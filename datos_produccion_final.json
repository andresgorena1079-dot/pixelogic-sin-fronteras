[{"model": "auth.user", "fields": {"password": "pbkdf2_sha256$1000000$lk0Fveq6KkRLtyGYChwiHg$TO15XBEyP7sE2daj6Cdq3lQK3enuHbqP5qa+7oiHncA=", "last_login": "2025-09-27T17:37:14.457Z", "is_superuser": true, "username": "Carlos", "first_name": "", "last_name": "", "email": "andresgorena1079@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2025-09-08T18:16:41.649Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "fields": {"password": "!TKpVNOpbASFVFNbUZ5uWfBD9zuKGAaSq4ePcXwsU", "last_login": "2025-09-10T22:15:22.427Z", "is_superuser": false, "username": "carlos_andres", "first_name": "Carlos Andres", "last_name": "Quezada Gorena", "email": "", "is_staff": false, "is_active": true, "date_joined": "2025-09-08T18:28:45.267Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "fields": {"password": "!Ampa8UEUk0QBsPNpkc5JyiC9loNB9JMQiFM7VxTl", "last_login": "2025-09-08T18:29:03.688Z", "is_superuser": false, "username": "andres", "first_name": "Andres", "last_name": "Gorena", "email": "", "is_staff": false, "is_active": true, "date_joined": "2025-09-08T18:29:03.664Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "fields": {"password": "pbkdf2_sha256$1000000$JXVE0lqSAQBPtPp5LTjDG3$UKc+QESktYSKQspCbrT5U9ERK/lypcdcdPW1g52d9lU=", "last_login": null, "is_superuser": true, "username": "Andres", "first_name": "", "last_name": "", "email": "andresgorena1079@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2025-09-21T21:28:43.525Z", "groups": [], "user_permissions": []}}, {"model": "sessions.session", "pk": "3elyzxhk86m5xvupbgjdwxujwhacc3pm", "fields": {"session_data": ".eJxVjEEKwyAQRe8y61DUqFNzlVKCGEmE1CnJ2I1491pKF919Pu-9CieF5HcfApXM88me4wlTbQP8Pl94i5lT8Jwoz4_IGy2duVX4bpj-K9BdhkmiQaOVUeqipTVW4wDPg15piUdXVqJ1j50t6VOQElHh6IQ1o7VOCKeuCO3e3pdMNMw:1uwT62:Nui_cJajU1c71FWAm-_R2Vm7PhAEP25ZChgRjKbqrW4", "expire_date": "2025-09-24T22:15:22.417Z"}}, {"model": "sessions.session", "pk": "a98xpof09crooet50twpvn72yac04868", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAqtAMu3fcMZJgZpGpoUtqV8e7apAvd_vfef6mI21ri1mSJE6uL6tTpd0tID6k74DvW26xprusyJb0r-qBNjzPL83q4fwcFW_nW554A8uCBDZFwJoQcBrDEZISNNWJTb5CSd9Z7YfTGho6CgAQH4NT7AwgtOHg:1v2Vkr:PHWprzOfE-FhdwaxdDLs-SOjEBFdMTSLwlrDXPFVl0I", "expire_date": "2025-10-11T14:18:29.163Z"}}, {"model": "sessions.session", "pk": "acye4x1l24ka94sphrcafeyo4grnplaz", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAqtAMu3fcMZJgZpGpoUtqV8e7apAvd_vfef6mI21ri1mSJE6uL6tTpd0tID6k74DvW26xprusyJb0r-qBNjzPL83q4fwcFW_nW554A8uCBDZFwJoQcBrDEZISNNWJTb5CSd9Z7YfTGho6CgAQH4NT7AwgtOHg:1v13sp:jypzQZUYh1_hSfMRuu4gRjnn1z0KmiOrN_0dfWQuBlY", "expire_date": "2025-10-07T14:20:43.195Z"}}, {"model": "sessions.session", "pk": "g929uiujwft0u1i4m98s52yjae84wdcl", "fields": {"session_data": ".eJxVkEFuAyEMRe_i9WgEGQgwy3bdE1TVyIDp0CYQAaOkinL3hjab7Cy_7yfrXwGdy1tqC25tpdSiwxZzWo7U1uwrzO9X-J9hhhPWes7FwwDYYOZKKiMZE_uRCSmMFgNslUrCI93Tr1gOucLtY4A_-9LZEruIw9POovum1IH_wvSZR5dTK9GOPTI-aB3fsqfDyyP7JFixrv16CiSlQRSOXHBq4ix4JYSUGjl3UpMP9v4vCqWldfudETuaVNDcaDvp0KWVau0F0OUUyw_M7PYLx8Ngug:1uyB70:C9liryL1V7M6nsioJN8gb0qwHdJXsRm9_mBBLp6ggRw", "expire_date": "2025-09-29T15:27:26.103Z"}}, {"model": "sessions.session", "pk": "h51r5fliib8maqonk9zubun4051axsho", "fields": {"session_data": ".eJxVkMFuwyAMQP_F5whBgEByXM_7gqmKHDALWwtVIOqmqv--sfXSm-X3_A6-ATqX91Rn3OtKqUaHNeY0n6mu2ReY3m7wP8MEFyzlmjcPHWCFSRhttDKD5Ez2ujeD6mAvtCU80699wO2UC9yPHfzV58bm2EICnnYLuk9KDfgPTO-ZuZzqFhfWFPaghb1mT6eXh_sUWLGs7VoG0npEVI5ccEYKHrxRSmuLQjhtyYeFc4XKWL24oR9VT9IEK0a7SBtatFAp7QH0dYnbN0z8_gPEd2C2:1uwUQQ:TdR0XkrSSc_3WAyKgP8OXIMpGP03XvpWyxPupU1jzYo", "expire_date": "2025-09-24T23:40:30.342Z"}}, {"model": "sessions.session", "pk": "hqnqki1jupndkelrdrg11gkxf0xd6afu", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hAqtAMu3fcMZJgZpGpoUtqV8e7apAvd_vfef6mI21ri1mSJE6uL6tTpd0tID6k74DvW26xprusyJb0r-qBNjzPL83q4fwcFW_nW554A8uCBDZFwJoQcBrDEZISNNWJTb5CSd9Z7YfTGho6CgAQH4NT7AwgtOHg:1v2YrC:wH3xUTpPXFVfL7H6eMt1_uHaXK9L8dUSD-K1J0Y3gLI", "expire_date": "2025-10-11T17:37:14.466Z"}}, {"model": "sessions.session", "pk": "iqapoqfpscdnfxw3zmpkd3o3z0ylo876", "fields": {"session_data": "eyJhY2NvdW50X2F1dGhlbnRpY2F0aW9uX21ldGhvZHMiOlt7Im1ldGhvZCI6InBhc3N3b3JkIiwiYXQiOjE3NTc1NDI0OTAuNTUwOTQ2NywidXNlcm5hbWUiOiJDYXJsb3MifV19:1uwT5W:yiCQsc9VqDzjdwafW-D9lOLVsUY3DF3WdnB1ppU9QPE", "expire_date": "2025-09-24T22:14:50.553Z"}}, {"model": "sessions.session", "pk": "iscknxheunv02o2hz4ivj41p6qnu92k4", "fields": {"session_data": ".eJxVkMFuwyAMht_F5ygKCQTIcTvvCaYpcsAsbC1UMVE7VX33la2X3ix_vz9Z_xXQubynMuNeVkolOiwxp_lIZc2eYXq_wv8ME5yQ-Zw3Dw1ggUlopa1UarStVMPYK93AzrQlPNI9_YrbITPcPhr4s8-VzbGKBDztFnTflCrwX5g-c-tyKltc2hppH5Tbt-zp8PLIPglW5LVeD4GUsojSkQtOD6ILXsv7iwaFcMqQD0vXSZTaqMWNvZU9DToYYc0ymFClTMy1ALqc4vYDU3f7BdJcYMY:1uy9wn:s62SJdrGEHkQLX2_5yw6i7EiK3hOLSOONGM3ZxFZIak", "expire_date": "2025-09-29T14:12:49.515Z"}}, {"model": "sessions.session", "pk": "isgiviej85uu2gx3ihx2ll61rux9bilx", "fields": {"session_data": ".eJxVj8FuwyAMQP_F5yiCAIXkuJ73BdMUGTALWwsVEG1T1X_f2HrpzfJ7fpKvgM7lPbUV97ZRatFhizmtZ2pb9hWWlyv8z7DABWv9zMXDANhg4VppcxBcsFHOEzPTAHulkvBMv_IRyylXuL0O8BdfO1tj73B42Fl0H5Q68O-Y3vLocmol2rEr453W8Tl7Oj3d3YfAhnXr1yKQUjOidOSC04Kz4LWUShnk3ClDPljGJEptlHWHaZYTCR0Mn40VJvRopVr7__R1ieUbFnb7AXupYH4:1uxoV8:KJ6VCW0txBJaKF5fbo1NAAcyVs_lE_YtCWP84kDzBow", "expire_date": "2025-09-28T15:18:50.524Z"}}, {"model": "sessions.session", "pk": "jtwpnz6v87oibgcdhgjq6jtgimucgkbp", "fields": {"session_data": ".eJxVj8FuwyAMQP_F5yiCBgLkuJ73BdMUGTALWwsVEG1T1X_f2HrpzfJ7fpKvgM7lPbUV97ZRatFhizmtZ2pb9hWWlyv8z7DABWv9zMXDANhg4UoqI5lWcuRGzbMaYK9UEp7pVz5iOeUKt9cB_uJrZ2vsHQ4PO4vug1IH_h3TWx5dTq1EO3ZlvNM6PmdPp6e7-xDYsG79egokpUEUjlxwauIseCWElBo5d1KTD5YxgUJpad18MOJAkwqaG20nHXq0Uq39f_q6xPINC7v9AJAoYJY:1uyBKN:iDw3ULmNO8iI6p4A929bW2g5Rxd_fsT2hSVKtE2WF7s", "expire_date": "2025-09-29T15:41:15.253Z"}}, {"model": "sessions.session", "pk": "l4atedzxaijr7gopnfqk9srszp9vtewb", "fields": {"session_data": ".eJxVkMFuwyAMQP_F5yiCBALJcT3vC6YqMmAWthYqIOqmqv--sfXSm-X3_A6-AVqb9lhX3OtGsQaLNaS4nqluyRVY3m7wP8MCFyzlmrKDDrDCwpXUYlJKT71WfGaD7GAvlCOe6dc-YD6lAvdjB3_1tbE1tBCHp51B-0mxAfeB8T31NsWag-mb0j9o6V-To9PLw30KbFi2dj16knJGFJast2rkzDslhJQaObdSk_OGMYFCaWnsNMxioFF5zWdtRu1btFAp7QH0dQn5GxZ2_wHTV2DH:1v0Lne:RKKrJfJKLQjdzBGD1UE0Psts8YBDfG6kqwd-JiewRFw", "expire_date": "2025-10-05T15:16:26.889Z"}}, {"model": "sessions.session", "pk": "m5fr2rsydv79wfkhry4lb2gel1dfnzn1", "fields": {"session_data": "eyJhY2NvdW50X2F1dGhlbnRpY2F0aW9uX21ldGhvZHMiOlt7Im1ldGhvZCI6InBhc3N3b3JkIiwiYXQiOjE3NTc1NDI1MDUuNTg1NTUzLCJ1c2VybmFtZSI6IkNhcmxvcyJ9XX0:1uwT5l:FnuQntBGjXrNWjvO7TD7IXZfbo6ktVaMVmMXLUUg2Qs", "expire_date": "2025-09-24T22:15:05.587Z"}}, {"model": "sessions.session", "pk": "qincvvgjcb52ssr4k34kh9g1nfo7eo4v", "fields": {"session_data": ".eJxVj8FuwyAMQP_F5wiFAAFyXM_7gqmKHDALWwtVIOqmqv--sfXSm-X3_CTfAJ3Le6oz7nWlVKPDGnOaz1TX7AtMbzf4n2GCC5ZyzZuHDrDCxLXSo1VKWzYM4yhkB3uhLeGZfuUDbqdc4H7s4C8-NzbH1uHwtFvQfVJqwH9ges_M5VS3uLCmsAct7DV7Or083KfAimVt1yKQUhZROnLBacH74LWUShnk3ClDPix9L1FqoxY3DlYOJHQw3JpFmNCihUpp_9PXJW7fMPX3H4tCYJA:1ux6uh:Ug5t6PdEd8AOzO7iEzNumExAmjjnvHdgnOzmyuM8fmc", "expire_date": "2025-09-26T16:46:19.250Z"}}, {"model": "sessions.session", "pk": "qkr3j0wh5xew19jntg4o9cu853es1pci", "fields": {"session_data": ".eJxVkMFuwyAMQP_F5wiFBgLkuJ73BdMUGTALWwsVEG1T1X_f2HrpzfJ7fgdfAZ3Le2or7m2j1KLDFnNaz9S27CssL1f4n2GBC9b6mYuHAbDBwpXUYpbccKbMrJQWA-yVSsIz_dpHLKdc4fY6wF997WyNPcThYWfRfVDqwL9jesvM5dRKtKwr7E4re86eTk939yGwYd369RRISoMoHLng1MTH4JUQUmrk3ElNPthxFCiUltbNByMONKmgudF20qFHK9XaH0Bfl1i-YRlvP9ZkYMs:1v0L7n:ruNqXdz53dsd60QplE4WtxhU7eGTzkmRXMc649_0ZIU", "expire_date": "2025-10-05T14:33:11.816Z"}}, {"model": "sites.site", "fields": {"domain": "pixelogic-sin-fronteras.onrender.com", "name": "pixelogic-sin-fronteras.onrender.com"}}, {"model": "cursos.curso", "pk": 1, "fields": {"titulo": "Python Sin Fronteras", "descripcion": "Un viaje completo para dominar Python desde cero, cubriendo desde los fundamentos hasta temas avanzados y profesionales.", "logo": "media/logos_cursos/python_logo_dtcidi"}}, {"model": "cursos.modulo", "pk": 1, "fields": {"curso": 1, "titulo": "Módulo 1: Fundamentos de Python", "descripcion": "Sienta las bases de tu viaje en la programación. Aprenderías a configurar tu entorno, la sintaxis básica del lenguaje, los tipos de datos, los operadores y como controlar el flujo de tus programas con funciones y condicionales."}}, {"model": "cursos.modulo", "pk": 2, "fields": {"curso": 1, "titulo": "Módulo 2: Estructuras de Datos en Profundidad", "descripcion": "Domina las colecciones de datos de Python. Exploraremos a fondo las listas, tuplas, diccionarios y conjuntos, aprendiendo sus métodos y cuando usar cada uno para manejar información de manera eficiente."}}, {"model": "cursos.modulo", "pk": 3, "fields": {"curso": 1, "titulo": "Módulo 3: Programación Orientada a Objetos (POO)", "descripcion": "Aprende el paradigma que impulsa el software moderno. Entenderías que son las clases y los objetos, y como usar los pilares de la POO como la herencia, el polimorfismo y el encapsulamiento para crear código robusto y reutilizable."}}, {"model": "cursos.modulo", "pk": 4, "fields": {"curso": 1, "titulo": "Módulo 4: Manejo de Errores y Archivos", "descripcion": "Prepara tus programas para el mundo real. Aprenderías a anticipar y gestionar errores con excepciones para evitar que tu aplicación se detenga, y a leer y escribir datos en archivos para que tu información persista."}}, {"model": "cursos.modulo", "pk": 5, "fields": {"curso": 1, "titulo": "Módulo 5: Temas Avanzados de Python", "descripcion": "Eleva tu nivel de Python con conceptos poderosos. Descubrirías técnicas elegantes como la comprensión de listas y las funciones lambda, la eficiencia de los generadores y decoradores, y el poder de la programación asincrónica."}}, {"model": "cursos.modulo", "pk": 6, "fields": {"curso": 1, "titulo": "Módulo 6: La Librería Estándar y Expresiones Regulares", "descripcion": "Explora las 'baterías incluidas' de Python. Conocerías los módulos esenciales para interactuar con el sistema operativo, y aprenderías a usar expresiones regulares para encontrar y manipular patrones en texto como un profesional."}}, {"model": "cursos.modulo", "pk": 7, "fields": {"curso": 1, "titulo": "Módulo 7: Ecosistema y Desarrollo Profesional", "descripcion": "Da el salto al desarrollo profesional con las herramientas más populares del ecosistema. Tendría una introducción a librerías fundamentales para el análisis de datos como Pandas y la creación de aplicaciones web."}}, {"model": "cursos.leccion", "pk": 1, "fields": {"modulo": 1, "titulo": "Intro entorno", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 1, Lección 1: Introducción y Entorno - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\"> \r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 1: El Entorno y la Sintaxis Básica</h1>\r\n        <p class=\"lesson-intro\">\r\n            ¡Bienvenido al inicio de tu viaje con Python! Antes de escribir código, un buen programador prepara sus herramientas. En esta primera lección, configuraremos un entorno de desarrollo profesional y escribiremos nuestro primer programa, entendiendo los conceptos más básicos de la sintaxis de Python.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Configuración del Entorno de Desarrollo</h2>\r\n        <p>\r\n            Al igual que un chef necesita una cocina bien equipada, un programador necesita un entorno de desarrollo robusto. Esto consiste en dos componentes clave: el intérprete de Python (el \"motor\") y un editor de código (nuestro \"taller\").\r\n        </p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>1.1: Instalación de Python 3.10+</h3>\r\n            <p>El intérprete de Python es el programa que lee, traduce y ejecuta tu código. Sin él, tu computadora no podría entender las instrucciones escritas en lenguaje Python.</p>\r\n            <ul>\r\n                <li><strong>Paso 1:</strong> Ve al sitio web oficial de Python: <a href=\"https://www.python.org/downloads/\" target=\"_blank\">python.org/downloads</a>.</li>\r\n                <li><strong>Paso 2:</strong> Descarga la última versión estable para tu sistema operativo.</li>\r\n                <li><strong>Paso 3:</strong> Ejecuta el instalador.</li>\r\n            </ul>\r\n            <div class=\"note\">\r\n                <p>⚠️ <strong>Atención (Windows):</strong> Durante la instalación, es <strong>vital</strong> marcar la casilla que dice <strong>\"Add Python to PATH\"</strong>. Esto te permitirá ejecutar Python desde cualquier terminal sin problemas.</p>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>1.3: Uso de Entornos Virtuales (Buena Práctica)</h3>\r\n            <p>Un entorno virtual es una carpeta aislada que contiene una instalación de Python específica para un proyecto. Esto evita que los paquetes de diferentes proyectos entren en conflicto.</p>\r\n            <p><strong>¿Por qué es importante?</strong> Imagina que el Proyecto A necesita la versión 1.0 de una librería, pero el Proyecto B necesita la versión 2.0. Sin entornos virtuales, tendrías un conflicto. Con ellos, cada proyecto tiene su propio espacio aislado.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># 1. Navega a la carpeta de tu proyecto</span>\r\n<span class=\"comment\"># 2. Crea un entorno llamado \"venv\"</span>\r\n<span class=\"variable\">python</span> -m <span class=\"variable\">venv</span> <span class=\"variable\">venv</span>\r\n\r\n<span class=\"comment\"># 3. Activa el entorno</span>\r\n<span class=\"comment\"># En Windows:</span>\r\n.\\<span class=\"variable\">venv</span>\\Scripts\\activate\r\n<span class=\"comment\"># En macOS/Linux:</span>\r\n<span class=\"keyword\">source</span> <span class=\"variable\">venv</span>/bin/activate\r\n            </pre></div>\r\n            <p>Sabrás que está activado porque el nombre `(venv)` aparecerá al inicio de la línea de tu terminal.</p>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 2: Primer Programa y Comentarios</h2>\r\n        <p>Ahora que tenemos el entorno listo, vamos a escribir nuestro primer programa, una tradición conocida como \"Hola, Mundo\".</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Función <code>print()</code></h3>\r\n            <p><strong>Categoría:</strong> Función Incorporada (Built-in)</p>\r\n            <p><strong>Sintaxis:</strong> <code>print(objeto1, objeto2, ..., sep=' ', end='\\n')</code></p>\r\n            <p><strong>Descripción:</strong> Imprime los objetos especificados en la consola. Es la herramienta fundamental para mostrar información al usuario y para depurar (verificar) el estado de las variables.</p>\r\n            <p><strong>Ejemplo Práctico:</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Código de Entrada</span>\r\n<span class=\"variable\">nombre</span> = <span class=\"highlight\">\"Mundo\"</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Hola,\"</span>, <span class=\"variable\">nombre</span>, <span class=\"highlight\">\"!\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Hola, Mundo !</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección</h3>\r\n\r\n            <h4>Ejercicio 1: Mensaje de Bienvenida (Conceptual)</h4>\r\n            <p><strong>Objetivo:</strong> Practicar el uso de la función <code>print()</code> con múltiples argumentos y el parámetro <code>sep</code>.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Escribe una única línea de código usando <code>print()</code>.</li>\r\n                <li>El `print` debe mostrar dos datos sobre Python: su creador y el año de creación.</li>\r\n                <li>Utiliza el parámetro <code>sep=\" | \"</code> para que los datos aparezcan separados por una barra vertical.</li>\r\n                <li>Usa el botón \"Ejecutar\" en la zona de práctica para ver el resultado.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion1-1')\">Ver Solución</span>\r\n            <div id=\"solucion1-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Creador: Guido van Rossum\"</span>, <span class=\"highlight\">\"Año: 1991\"</span>, <span class=\"variable\">sep</span>=<span class=\"highlight\">\" | \"</span>)\r\n                </pre></div>\r\n            </div>\r\n            \r\n            <h4 style=\"margin-top: 30px;\">Ejercicio 2: El \"Hola, Mundo\" (Validable)</h4>\r\n            <p><strong>Objetivo:</strong> Escribir un programa que imprima el saludo \"Hola, Mundo\" en la consola para que nuestro sistema pueda validarlo.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Escribe una sola línea de código.</li>\r\n                <li>Usa la función <code>print()</code> para mostrar el texto exacto: <code>Hola, Mundo</code></li>\r\n                <li>Usa el botón **\"Validar Solución\"** para comprobar si tu código es correcto. ¡Superar este desafío te permitirá avanzar a la siguiente lección y ganar tus primeros XP!</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion1-2')\">Ver Solución</span>\r\n            <div id=\"solucion1-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">'Hola, Mundo'</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</body>\r\n</html>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección</h3>\r\n\r\n            <h4>Ejercicio 1: Mensaje de Bienvenida (Conceptual)</h4>\r\n            <p><strong>Objetivo:</strong> Practicar el uso de la función <code>print()</code> con múltiples argumentos y el parámetro <code>sep</code>.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Escribe una única línea de código usando <code>print()</code>.</li>\r\n                <li>El `print` debe mostrar dos datos sobre Python: su creador y el año de creación.</li>\r\n                <li>Utiliza el parámetro <code>sep=\" | \"</code> para que los datos aparezcan separados por una barra vertical.</li>\r\n                <li>Usa el botón \"Ejecutar\" en la zona de práctica para ver el resultado.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion1-1')\">Ver Solución</span>\r\n            <div id=\"solucion1-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Creador: Guido van Rossum\"</span>, <span class=\"highlight\">\"Año: 1991\"</span>, <span class=\"variable\">sep</span>=<span class=\"highlight\">\" | \"</span>)\r\n                </pre></div>\r\n            </div>\r\n            \r\n            <h4 style=\"margin-top: 30px;\">Ejercicio 2: El \"Hola, Mundo\" (Validable)</h4>\r\n            <p><strong>Objetivo:</strong> Escribir un programa que imprima el saludo \"Hola, Mundo\" en la consola para que nuestro sistema pueda validarlo.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Escribe una sola línea de código.</li>\r\n                <li>Usa la función <code>print()</code> para mostrar el texto exacto: <code>Hola, Mundo</code></li>\r\n                <li>Usa el botón **\"Validar Solución\"** para comprobar si tu código es correcto. ¡Superar este desafío te permitirá avanzar a la siguiente lección y ganar tus primeros XP!</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion1-2')\">Ver Solución</span>\r\n            <div id=\"solucion1-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">'Hola, Mundo'</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 1, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 2, "fields": {"modulo": 1, "titulo": "Variables y tipos datos", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 1, Lección 2: Variables y Tipos de Datos - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 2: Variables y Tipos de Datos</h1>\r\n        <p class=\"lesson-intro\">\r\n            Los programas necesitan \"recordar\" información. En esta lección, aprenderás sobre las **variables**, que son como cajas con etiquetas para guardar datos, y los **tipos de datos** fundamentales, que definen qué clase de información podemos almacenar.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Variables y Tipos de Datos Fundamentales</h2>\r\n        <p>Una **variable** es un nombre que le asignamos a un valor. En Python, los tipos de datos básicos que usaremos al principio son los números (`int` para enteros, `float` para decimales), el texto (`str`) y los valores lógicos (`bool`).</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Declaración y Uso de Variables</h3>\r\n            <p>Se usa el operador de asignación (`=`) para darle un valor a una variable. Python detecta automáticamente el tipo de dato.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Declaración de variables de diferentes tipos</span>\r\n<span class=\"variable\">nombre</span> = <span class=\"highlight\">\"Arion\"</span>      <span class=\"comment\"># str (string)</span>\r\n<span class=\"variable\">puntos</span> = <span class=\"number\">150</span>        <span class=\"comment\"># int (integer)</span>\r\n<span class=\"variable\">velocidad</span> = <span class=\"number\">7.5</span>      <span class=\"comment\"># float</span>\r\n<span class=\"variable\">es_heroe</span> = <span class=\"boolean\">True</span>     <span class=\"comment\"># bool (boolean)</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Conversión de Tipos (Casting)</h3>\r\n            <p>A veces, necesitas convertir un dato de un tipo a otro. Para esto, se usan las funciones `int()`, `float()`, `str()` y `bool()`.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">puntos_str</span> = <span class=\"highlight\">\"100\"</span>\r\n<span class=\"variable\">puntos_int</span> = <span class=\"function\">int</span>(<span class=\"variable\">puntos_str</span>) <span class=\"comment\"># Convierte el string \"100\" a un número entero 100</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">puntos_int</span> + <span class=\"number\">50</span>)   <span class=\"comment\"># Salida: 150</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección</h3>\r\n\r\n            <h4>Ejercicio 1: Ficha de Personaje (Conceptual)</h4>\r\n            <p><strong>Objetivo:</strong> Practicar la declaración de variables de diferentes tipos para describir a un personaje de videojuego.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Declara cuatro variables: `nombre_personaje` (str), `puntos_de_vida` (int), `velocidad_movimiento` (float) y `es_heroe` (bool), con valores inventados por ti.</li>\r\n                <li>Usa la función <code>print()</code> y f-strings para mostrar una ficha del personaje en la consola.</li>\r\n                <li>Ejecuta tu código en la zona de práctica para ver el resultado.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion2-1')\">Ver Solución</span>\r\n            <div id=\"solucion2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">nombre_personaje</span> = <span class=\"highlight\">\"Arion\"</span>\r\n<span class=\"variable\">puntos_de_vida</span> = <span class=\"number\">150</span>\r\n<span class=\"variable\">velocidad_movimiento</span> = <span class=\"number\">7.5</span>\r\n<span class=\"variable\">es_heroe</span> = <span class=\"boolean\">True</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Ficha de Personaje ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Nombre: {nombre_personaje}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"HP: {puntos_de_vida}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Velocidad: {velocidad_movimiento}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Es un héroe: {es_heroe}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n            \r\n            <h4 style=\"margin-top: 30px;\">Ejercicio 2: Calculadora de Área (Validable)</h4>\r\n            <p><strong>Objetivo:</strong> Usar lo que aprendiste sobre variables y la función `print()` para mostrar el resultado de un cálculo.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea dos variables, <code>base</code> con valor <code>10</code> y <code>altura</code> con valor <code>5</code>.</li>\r\n                <li>Crea una tercera variable, <code>area</code>, y asígnale el resultado de multiplicar <code>base</code> por <code>altura</code>.</li>\r\n                <li>Usa la función <code>print()</code> para mostrar **solamente el valor** de la variable <code>area</code> en la consola.</li>\r\n                <li>Usa el botón **\"Validar Solución\"** para comprobar si tu código es correcto.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion2-2')\">Ver Solución</span>\r\n            <div id=\"solucion2-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">base</span> = <span class=\"number\">10</span>\r\n<span class=\"variable\">altura</span> = <span class=\"number\">5</span>\r\n<span class=\"variable\">area</span> = <span class=\"variable\">base</span> * <span class=\"variable\">altura</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">area</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</body>\r\n</html>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección</h3>\r\n\r\n            <h4>Ejercicio 1: Ficha de Personaje (Conceptual)</h4>\r\n            <p><strong>Objetivo:</strong> Practicar la declaración de variables de diferentes tipos para describir a un personaje de videojuego.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Declara cuatro variables: `nombre_personaje` (str), `puntos_de_vida` (int), `velocidad_movimiento` (float) y `es_heroe` (bool), con valores inventados por ti.</li>\r\n                <li>Usa la función <code>print()</code> y f-strings para mostrar una ficha del personaje en la consola.</li>\r\n                <li>Ejecuta tu código en la zona de práctica para ver el resultado.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion2-1')\">Ver Solución</span>\r\n            <div id=\"solucion2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">nombre_personaje</span> = <span class=\"highlight\">\"Arion\"</span>\r\n<span class=\"variable\">puntos_de_vida</span> = <span class=\"number\">150</span>\r\n<span class=\"variable\">velocidad_movimiento</span> = <span class=\"number\">7.5</span>\r\n<span class=\"variable\">es_heroe</span> = <span class=\"boolean\">True</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Ficha de Personaje ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Nombre: {nombre_personaje}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"HP: {puntos_de_vida}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Velocidad: {velocidad_movimiento}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Es un héroe: {es_heroe}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n            \r\n            <h4 style=\"margin-top: 30px;\">Ejercicio 2: Calculadora de Área (Validable)</h4>\r\n            <p><strong>Objetivo:</strong> Usar lo que aprendiste sobre variables y la función `print()` para mostrar el resultado de un cálculo.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea dos variables, <code>base</code> con valor <code>10</code> y <code>altura</code> con valor <code>5</code>.</li>\r\n                <li>Crea una tercera variable, <code>area</code>, y asígnale el resultado de multiplicar <code>base</code> por <code>altura</code>.</li>\r\n                <li>Usa la función <code>print()</code> para mostrar **solamente el valor** de la variable <code>area</code> en la consola.</li>\r\n                <li>Usa el botón **\"Validar Solución\"** para comprobar si tu código es correcto.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion2-2')\">Ver Solución</span>\r\n            <div id=\"solucion2-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">base</span> = <span class=\"number\">10</span>\r\n<span class=\"variable\">altura</span> = <span class=\"number\">5</span>\r\n<span class=\"variable\">area</span> = <span class=\"variable\">base</span> * <span class=\"variable\">altura</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">area</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 2, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 3, "fields": {"modulo": 1, "titulo": "Operadores", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 1, Lección 3: Operadores en Python - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 3: Operadores en Python</h1>\r\n        <p class=\"lesson-intro\">\r\n            Los programas no solo guardan datos; los manipulan, comparan y operan con ellos. Los **operadores** son los símbolos especiales que le dicen a Python que realice una operación. En esta lección, exploraremos las herramientas que nos permiten dar vida y lógica a nuestras variables.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Operadores Aritméticos</h2>\r\n        <p>Son los operadores que usas para realizar cálculos matemáticos. Te permiten ejecutar desde sumas simples hasta operaciones más complejas como el cálculo de potencias o el resto de una división, siendo la base de cualquier manipulación numérica en tu código.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Operadores Aritméticos Comunes</h3>\r\n            <ul>\r\n                <li><strong>Suma (<code>+</code>):</strong> Suma dos números.\r\n                    <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"10 + 5 = {10 + 5}\"</span>) <span class=\"comment\"># Salida: 15</span></pre></div>\r\n                </li>\r\n                <li><strong>Resta (<code>-</code>):</strong> Resta un número de otro.\r\n                    <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"20 - 8 = {20 - 8}\"</span>) <span class=\"comment\"># Salida: 12</span></pre></div>\r\n                </li>\r\n                <li><strong>Multiplicación (<code>*</code>):</strong> Multiplica dos números.\r\n                    <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"7 * 6 = {7 * 6}\"</span>) <span class=\"comment\"># Salida: 42</span></pre></div>\r\n                </li>\r\n                <li><strong>División (<code>/</code>):</strong> Divide. El resultado siempre es un `float`.\r\n                    <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"10 / 4 = {10 / 4}\"</span>) <span class=\"comment\"># Salida: 2.5</span></pre></div>\r\n                </li>\r\n                <li><strong>División Entera (<code>//</code>):</strong> Divide y redondea hacia abajo al entero más cercano.\r\n                    <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"10 // 4 = {10 // 4}\"</span>) <span class=\"comment\"># Salida: 2</span></pre></div>\r\n                </li>\r\n                 <li><strong>Módulo (<code>%</code>):</strong> Devuelve el resto de una división entera.\r\n                    <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"El resto de 10 / 4 es: {10 % 4}\"</span>) <span class=\"comment\"># Salida: 2</span></pre></div>\r\n                </li>\r\n                 <li><strong>Exponente (<code>**</code>):</strong> Eleva un número a la potencia de otro.\r\n                    <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"2 elevado a la 3 es: {2 ** 3}\"</span>) <span class=\"comment\"># Salida: 8</span></pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: Operadores de Asignación</h2>\r\n        <p>Estos operadores se utilizan para asignar o actualizar el valor de una variable. El más común es `=`, pero existen versiones combinadas que actúan como atajos para modificar una variable basándose en su valor actual, haciendo el código más conciso.</p>\r\n        <div class=\"concept-card\">\r\n            <h3>Operadores de Asignación Comunes</h3>\r\n            <ul>\r\n                <li><strong>Asignación (<code>=</code>):</strong> Asigna el valor de la derecha a la variable de la izquierda.</li>\r\n                <li><strong>Asignación Compuesta (<code>+=</code>, <code>-=</code>, <code>*=</code>, etc.):</strong> Realiza una operación y asigna el resultado a la misma variable. Es un atajo muy común.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">puntos</span> = <span class=\"number\">100</span>\r\n<span class=\"variable\">puntos</span> += <span class=\"number\">20</span>  <span class=\"comment\"># Es lo mismo que: puntos = puntos + 20</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Puntos totales: {puntos}\"</span>) <span class=\"comment\"># Salida: 120</span></pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 3: Operadores de Comparación</h2>\r\n        <p>Comparan dos valores y el resultado de la expresión es siempre un valor booleano: `True` o `False`. Son la base fundamental para la toma de decisiones y el control de flujo en cualquier programa.</p>\r\n        <div class=\"concept-card\">\r\n            <h3>Operadores de Comparación Comunes</h3>\r\n             <ul>\r\n                <li><strong>Igual a (<code>==</code>):</strong> Comprueba si dos valores son iguales.\r\n                    <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"¿10 es igual a 10?: {(10 == 10)}\"</span>) <span class=\"comment\"># Salida: True</span></pre></div>\r\n                </li>\r\n                <li><strong>No igual a (<code>!=</code>):</strong> Comprueba si dos valores son diferentes.\r\n                    <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"¿'hola' es diferente de 'adios'?: {('hola' != 'adios')}\"</span>) <span class=\"comment\"># Salida: True</span></pre></div>\r\n                </li>\r\n                <li><strong>Mayor que (<code>></code>):</strong> Comprueba si el valor de la izquierda es mayor que el de la derecha.\r\n                     <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"¿20 es mayor que 10?: {(20 > 10)}\"</span>) <span class=\"comment\"># Salida: True</span></pre></div>\r\n                </li>\r\n                 <li><strong>Menor o igual que (<code><=</code>):</strong> Comprueba si el valor de la izquierda es menor o igual que el de la derecha.\r\n                     <div class=\"code-block inline-example\"><pre><span class=\"function\">print</span>(<span class=\"highlight\">f\"¿15 es menor o igual que 15?: {(15 <= 15)}\"</span>) <span class=\"comment\"># Salida: True</span></pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 4: Operadores Lógicos</h2>\r\n        <p>Estos operadores te permiten combinar múltiples expresiones booleanas para crear condiciones más complejas y potentes. Son esenciales para construir una lógica de decisión que dependa de varios factores.</p>\r\n        <div class=\"concept-card\">\r\n            <h3>Operadores Lógicos Comunes</h3>\r\n            <ul>\r\n                <li><strong>Y Lógico (<code>and</code>):</strong> Devuelve `True` solo si **ambas** condiciones son verdaderas.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">puede_pasar</span> = (<span class=\"number\">12</span> >= <span class=\"number\">10</span>) <span class=\"keyword\">and</span> (<span class=\"number\">150</span> > <span class=\"number\">140</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿Puede pasar?: {puede_pasar}\"</span>) <span class=\"comment\"># Salida: True</span></pre></div>\r\n                </li>\r\n                <li><strong>O Lógico (<code>or</code>):</strong> Devuelve `True` si **al menos una** de las condiciones es verdadera.\r\n                     <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">tiene_descuento</span> = (<span class=\"boolean\">True</span> <span class=\"keyword\">or</span> <span class=\"boolean\">False</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿Tiene descuento?: {tiene_descuento}\"</span>) <span class=\"comment\"># Salida: True</span></pre></div>\r\n                </li>\r\n                <li><strong>Negación Lógica (<code>not</code>):</strong> Invierte el valor booleano de una condición.\r\n                     <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">esta_lloviendo</span> = <span class=\"boolean\">False</span>\r\n<span class=\"variable\">hay_sol</span> = <span class=\"keyword\">not</span> <span class=\"variable\">esta_lloviendo</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿Hay sol?: {hay_sol}\"</span>) <span class=\"comment\"># Salida: True</span></pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <hr>\r\n        \r\n        <h2>Ejemplo Integrador: Lógica de un Videojuego</h2>\r\n        <p>Este mini-programa funcional utiliza todos los operadores de la lección para analizar dos números y mostrar un reporte completo.</p>\r\n        <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># --- INICIO DEL SCRIPT ---</span>\r\n<span class=\"variable\">num1</span> = <span class=\"number\">20</span>; <span class=\"variable\">num2</span> = <span class=\"number\">5</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"--- Analizando los números: {num1} y {num2} ---\\n\"</span>)\r\n\r\n<span class=\"comment\"># Tema 1: Operadores Aritméticos</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"** Operaciones Aritméticas **\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Suma: {num1 + num2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Resta: {num1 - num2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Multiplicación: {num1 * num2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"División: {num1 / num2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"División Entera: {num1 // num2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Módulo: {num1 % num2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Exponente (num2 ** 2): {num2 ** 2}\\n\"</span>)\r\n\r\n<span class=\"comment\"># Tema 2: Operadores de Comparación</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"** Operaciones de Comparación **\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿Son iguales? (==): {num1 == num2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿Son diferentes? (!=): {num1 != num2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿num1 > num2?: {num1 > num2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿num1 <= num2?: {num1 <= num2}\\n\"</span>)\r\n\r\n<span class=\"comment\"># Tema 3: Operadores Lógicos</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"** Operaciones Lógicas **\"</span>)\r\n<span class=\"variable\">condicion1</span> = num1 > <span class=\"number\">10</span>  <span class=\"comment\"># True</span>\r\n<span class=\"variable\">condicion2</span> = num2 < <span class=\"number\">3</span>   <span class=\"comment\"># False</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿condicion1 Y condicion2? (and): {condicion1 and condicion2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿condicion1 O condicion2? (or): {condicion1 or condicion2}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿NO condicion2? (not): {not condicion2}\\n\"</span>)\r\n\r\n<span class=\"comment\"># Tema 4: Operadores de Asignación</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"** Operaciones de Asignación **\"</span>)\r\n<span class=\"variable\">resultado</span> = <span class=\"number\">100</span>\r\n<span class=\"variable\">resultado</span> -= <span class=\"number\">50</span>  <span class=\"comment\"># resultado ahora es 50</span>\r\n<span class=\"variable\">resultado</span> *= <span class=\"number\">3</span>   <span class=\"comment\"># resultado ahora es 150</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Resultado final de asignación compuesta: {resultado}\"</span>)\r\n        </pre></div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 3</h3>\r\n\r\n            <h4>Ejercicio 1: Sistema de Puntuación de Gimnasia</h4>\r\n            <p><strong>Objetivo:</strong> Crear un \"mini-programa\" que calcule la puntuación final de un gimnasta y determine si califica para una medalla, usando múltiples operadores.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Declara las puntuaciones de 3 jueces (ej: `juez1 = 9.5`, `juez2 = 9.8`, `juez3 = 9.2`).</li>\r\n                <li>Calcula la `puntuacion_total` sumando las tres puntuaciones.</li>\r\n                <li>Calcula la `puntuacion_promedio` dividiendo el total entre 3.</li>\r\n                <li>Declara una variable `puntuacion_minima_medalla` con valor `9.5`.</li>\r\n                <li>Crea una variable booleana `califica_para_medalla` que sea `True` si el promedio es mayor o igual a la puntuación mínima.</li>\r\n                <li>Imprime la puntuación de cada juez, la puntuación promedio final y un mensaje que diga \"Califica para medalla: [True/False]\".</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion3-1')\">Ver Solución</span>\r\n            <div id=\"solucion3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">juez1</span>, <span class=\"variable\">juez2</span>, <span class=\"variable\">juez3</span> = <span class=\"number\">9.5</span>, <span class=\"number\">9.8</span>, <span class=\"number\">9.2</span>\r\n<span class=\"variable\">puntuacion_total</span> = <span class=\"variable\">juez1</span> + <span class=\"variable\">juez2</span> + <span class=\"variable\">juez3</span>\r\n<span class=\"variable\">puntuacion_promedio</span> = <span class=\"variable\">puntuacion_total</span> / <span class=\"number\">3</span>\r\n<span class=\"variable\">puntuacion_minima_medalla</span> = <span class=\"number\">9.5</span>\r\n<span class=\"variable\">califica_para_medalla</span> = <span class=\"variable\">puntuacion_promedio</span> >= <span class=\"variable\">puntuacion_minima_medalla</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Evaluación de Gimnasia ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Puntuaciones: {juez1}, {juez2}, {juez3}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Promedio Final: {puntuacion_promedio}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"-----------------------------\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿Califica para medalla?: {califica_para_medalla}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n\r\n             <h4 style=\"margin-top: 30px;\">Ejercicio 2: Simulador de Compra con Cupón</h4>\r\n            <p><strong>Objetivo:</strong> Usar operadores lógicos para aplicar un descuento solo si se cumplen varias condiciones.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n             <ol>\r\n                <li>Declara las variables `total_compra` (float), `es_cliente_vip` (bool) y `tiene_cupon` (bool).</li>\r\n                <li>Un descuento del 15% se aplica si el `total_compra` es mayor a 100 **Y** (el cliente `es_cliente_vip` **O** `tiene_cupon`).</li>\r\n                <li>Crea una variable booleana `aplica_descuento` que contenga el resultado de esa lógica.</li>\r\n                <li>Usa un `if` para imprimir el precio final: si `aplica_descuento` es `True`, calcula y muestra el precio con descuento; si no, muestra el precio original.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion3-2')\">Ver Solución</span>\r\n            <div id=\"solucion3-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">total_compra</span> = <span class=\"number\">120.0</span>\r\n<span class=\"variable\">es_cliente_vip</span> = <span class=\"boolean\">False</span>\r\n<span class=\"variable\">tiene_cupon</span> = <span class=\"boolean\">True</span>\r\n\r\n<span class=\"variable\">aplica_descuento</span> = <span class=\"variable\">total_compra</span> > <span class=\"number\">100</span> <span class=\"keyword\">and</span> (<span class=\"variable\">es_cliente_vip</span> <span class=\"keyword\">or</span> <span class=\"variable\">tiene_cupon</span>)\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Resumen de Compra ---\"</span>)\r\n<span class=\"keyword\">if</span> <span class=\"variable\">aplica_descuento</span>:\r\n    <span class=\"variable\">precio_final</span> = <span class=\"variable\">total_compra</span> * <span class=\"number\">0.85</span> <span class=\"comment\"># 15% de descuento</span>\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"¡Descuento aplicado!\"</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Total a pagar: ${precio_final}\"</span>)\r\n<span class=\"keyword\">else</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"No se aplicó ningún descuento.\"</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Total a pagar: ${total_compra}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 3</h3>\r\n\r\n            <h4>Ejercicio 1: Sistema de Puntuación de Gimnasia</h4>\r\n            <p><strong>Objetivo:</strong> Crear un \"mini-programa\" que calcule la puntuación final de un gimnasta y determine si califica para una medalla, usando múltiples operadores.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Declara las puntuaciones de 3 jueces (ej: `juez1 = 9.5`, `juez2 = 9.8`, `juez3 = 9.2`).</li>\r\n                <li>Calcula la `puntuacion_total` sumando las tres puntuaciones.</li>\r\n                <li>Calcula la `puntuacion_promedio` dividiendo el total entre 3.</li>\r\n                <li>Declara una variable `puntuacion_minima_medalla` con valor `9.5`.</li>\r\n                <li>Crea una variable booleana `califica_para_medalla` que sea `True` si el promedio es mayor o igual a la puntuación mínima.</li>\r\n                <li>Imprime la puntuación de cada juez, la puntuación promedio final y un mensaje que diga \"Califica para medalla: [True/False]\".</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion3-1')\">Ver Solución</span>\r\n            <div id=\"solucion3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">juez1</span>, <span class=\"variable\">juez2</span>, <span class=\"variable\">juez3</span> = <span class=\"number\">9.5</span>, <span class=\"number\">9.8</span>, <span class=\"number\">9.2</span>\r\n<span class=\"variable\">puntuacion_total</span> = <span class=\"variable\">juez1</span> + <span class=\"variable\">juez2</span> + <span class=\"variable\">juez3</span>\r\n<span class=\"variable\">puntuacion_promedio</span> = <span class=\"variable\">puntuacion_total</span> / <span class=\"number\">3</span>\r\n<span class=\"variable\">puntuacion_minima_medalla</span> = <span class=\"number\">9.5</span>\r\n<span class=\"variable\">califica_para_medalla</span> = <span class=\"variable\">puntuacion_promedio</span> >= <span class=\"variable\">puntuacion_minima_medalla</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Evaluación de Gimnasia ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Puntuaciones: {juez1}, {juez2}, {juez3}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Promedio Final: {puntuacion_promedio}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"-----------------------------\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"¿Califica para medalla?: {califica_para_medalla}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n\r\n             <h4 style=\"margin-top: 30px;\">Ejercicio 2: Simulador de Compra con Cupón</h4>\r\n            <p><strong>Objetivo:</strong> Usar operadores lógicos para aplicar un descuento solo si se cumplen varias condiciones.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n             <ol>\r\n                <li>Declara las variables `total_compra` (float), `es_cliente_vip` (bool) y `tiene_cupon` (bool).</li>\r\n                <li>Un descuento del 15% se aplica si el `total_compra` es mayor a 100 **Y** (el cliente `es_cliente_vip` **O** `tiene_cupon`).</li>\r\n                <li>Crea una variable booleana `aplica_descuento` que contenga el resultado de esa lógica.</li>\r\n                <li>Usa un `if` para imprimir el precio final: si `aplica_descuento` es `True`, calcula y muestra el precio con descuento; si no, muestra el precio original.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion3-2')\">Ver Solución</span>\r\n            <div id=\"solucion3-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">total_compra</span> = <span class=\"number\">120.0</span>\r\n<span class=\"variable\">es_cliente_vip</span> = <span class=\"boolean\">False</span>\r\n<span class=\"variable\">tiene_cupon</span> = <span class=\"boolean\">True</span>\r\n\r\n<span class=\"variable\">aplica_descuento</span> = <span class=\"variable\">total_compra</span> > <span class=\"number\">100</span> <span class=\"keyword\">and</span> (<span class=\"variable\">es_cliente_vip</span> <span class=\"keyword\">or</span> <span class=\"variable\">tiene_cupon</span>)\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Resumen de Compra ---\"</span>)\r\n<span class=\"keyword\">if</span> <span class=\"variable\">aplica_descuento</span>:\r\n    <span class=\"variable\">precio_final</span> = <span class=\"variable\">total_compra</span> * <span class=\"number\">0.85</span> <span class=\"comment\"># 15% de descuento</span>\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"¡Descuento aplicado!\"</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Total a pagar: ${precio_final}\"</span>)\r\n<span class=\"keyword\">else</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"No se aplicó ningún descuento.\"</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Total a pagar: ${total_compra}\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 3, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 4, "fields": {"modulo": 1, "titulo": "Control de flujo", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 1, Lección 4: Control de Flujo - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 4: Control de Flujo</h1>\r\n        <p class=\"lesson-intro\">\r\n            El **control de flujo** es lo que le da \"inteligencia\" a nuestro código, permitiéndole tomar decisiones con **condicionales** y repetir tareas con **bucles**. Es aquí donde tus programas empiezan a reaccionar y a adaptarse a diferentes situaciones.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Sentencias Condicionales (`if`, `elif`, `else`)</h2>\r\n        <p>Las estructuras `if`, `elif` y `else` controlan el flujo de un programa, permitiendo ejecutar bloques de código diferentes según se cumplan o no ciertas condiciones. `if` evalúa una condición principal, `elif` comprueba condiciones adicionales solo si el `if` anterior fue falso, y `else` ejecuta su bloque si ninguna de las condiciones anteriores se cumplió.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Detalle de cada sentencia:</h3>\r\n            <ul>\r\n                <li>\r\n                    <strong><code>if</code> (Si):</strong> Es la primera y principal sentencia. Evalúa una condición, y si esta es `True`, ejecuta el bloque de código que le sigue.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">edad</span> = <span class=\"number\">18</span>\r\n<span class=\"keyword\">if</span> <span class=\"variable\">edad</span> >= <span class=\"number\">18</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Eres mayor de edad.\"</span>) <span class=\"comment\"># Se ejecuta</span></pre></div>\r\n                </li>\r\n                <li>\r\n                    <strong><code>elif</code> (Si no, si):</strong> Se usa para verificar condiciones adicionales. Solo se evalúa si la condición del `if` (o `elif`) anterior fue `False`. Puedes tener múltiples `elif`.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">nota</span> = <span class=\"number\">75</span>\r\n<span class=\"keyword\">if</span> <span class=\"variable\">nota</span> >= <span class=\"number\">90</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Sobresaliente\"</span>)\r\n<span class=\"keyword\">elif</span> <span class=\"variable\">nota</span> >= <span class=\"number\">70</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Notable\"</span>) <span class=\"comment\"># Se ejecuta este bloque</span></pre></div>\r\n                </li>\r\n                <li>\r\n                    <strong><code>else</code> (Si no):</strong> Es la sentencia final y opcional. Su bloque de código se ejecuta únicamente si ninguna de las condiciones anteriores (`if` o `elif`) fue verdadera.\r\n                     <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">temperatura</span> = <span class=\"number\">15</span>\r\n<span class=\"keyword\">if</span> <span class=\"variable\">temperatura</span> > <span class=\"number\">25</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Hace calor\"</span>)\r\n<span class=\"keyword\">else</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"No hace calor\"</span>) <span class=\"comment\"># Se ejecuta</span></pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 2: Bucles (`for` y `while`)</h2>\r\n        <p>Los bucles son herramientas para ejecutar un bloque de código múltiples veces. La diferencia clave es cómo controlan la repetición: el `for` está diseñado para un número conocido de iteraciones, mientras que el `while` se basa en una condición que puede ser indeterminada.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Bucle `for`</h3>\r\n            <p>Se utiliza para iterar sobre una secuencia de elementos (como una lista o un rango de números). Es ideal cuando se sabe cuántas veces se necesita repetir una acción.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Código de Entrada: Iterar sobre una lista</span>\r\n<span class=\"variable\">frutas</span> = [<span class=\"highlight\">\"manzana\"</span>, <span class=\"highlight\">\"banana\"</span>, <span class=\"highlight\">\"cereza\"</span>]\r\n<span class=\"keyword\">for</span> <span class=\"variable\">fruta</span> <span class=\"keyword\">in</span> <span class=\"variable\">frutas</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Me gusta la {fruta}\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Me gusta la manzana</span>\r\n<span class=\"highlight\">Me gusta la banana</span>\r\n<span class=\"highlight\">Me gusta la cereza</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Función <code>range()</code></h3>\r\n            <p><strong>Categoría:</strong> Función Incorporada (Built-in)</p>\r\n            <p><strong>Descripción:</strong> Genera una secuencia inmutable de números. Es la compañera más común del bucle `for` para repetir una acción un número específico de veces.</p>\r\n            <p><strong>Sintaxis:</strong> <code>range(inicio, fin, paso)</code></p>\r\n            <p><strong>Ejemplo Práctico:</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Imprimir números pares del 2 al 10</span>\r\n<span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"function\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>):\r\n    <span class=\"function\">print</span>(i)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">2</span>\r\n<span class=\"highlight\">4</span>\r\n<span class=\"highlight\">6</span>\r\n<span class=\"highlight\">8</span>\r\n<span class=\"highlight\">10</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Bucle `while`</h3>\r\n            <p>Ejecuta repetidamente un bloque de código siempre que una condición booleana especificada sea `True`. Es útil cuando no se sabe de antemano cuántas iteraciones serán necesarias.</p>\r\n             <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Código de Entrada: Simulación de una cuenta atrás</span>\r\n<span class=\"variable\">contador</span> = <span class=\"number\">3</span>\r\n<span class=\"keyword\">while</span> <span class=\"variable\">contador</span> > <span class=\"number\">0</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"{contador}...\"</span>)\r\n    <span class=\"variable\">contador</span> -= <span class=\"number\">1</span> <span class=\"comment\"># Actualizar la condición</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"¡Despegue!\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">3...</span>\r\n<span class=\"highlight\">2...</span>\r\n<span class=\"highlight\">1...</span>\r\n<span class=\"highlight\">¡Despegue!</span>\r\n            </pre></div>\r\n            <p>⚠️ **Error Común:** Olvidar actualizar la variable de la condición dentro del bucle, lo que provoca un **bucle infinito**.</p>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 3: Control Avanzado de Bucles (`break` y `continue`)</h2>\r\n        <p>Estas sentencias te dan un control más fino sobre el comportamiento de tus bucles, permitiéndote alterar su flujo normal.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Sentencia `break`</h3>\r\n            <p><strong>Función:</strong> Termina el bucle de forma inmediata y por completo.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Buscar el primer número divisible por 7</span>\r\n<span class=\"keyword\">for</span> <span class=\"variable\">numero</span> <span class=\"keyword\">in</span> <span class=\"function\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">20</span>):\r\n    <span class=\"keyword\">if</span> <span class=\"variable\">numero</span> % <span class=\"number\">7</span> == <span class=\"number\">0</span>:\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Encontrado: {numero}.\"</span>)\r\n        <span class=\"keyword\">break</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Sentencia `continue`</h3>\r\n            <p><strong>Función:</strong> Salta a la siguiente iteración del bucle, ignorando el resto del código en la iteración actual.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Imprimir solo los números impares</span>\r\n<span class=\"keyword\">for</span> <span class=\"variable\">numero</span> <span class=\"keyword\">in</span> <span class=\"function\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>):\r\n    <span class=\"keyword\">if</span> <span class=\"variable\">numero</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span>:\r\n        <span class=\"keyword\">continue</span>\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Impar: {numero}\"</span>)\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Ejemplo Integrador: Mini-Juego \"Adivina el Número\"</h2>\r\n        <p>Este mini-programa funcional combina `while`, `for`, `if/elif/else` y `break` para crear un juego completo y interactivo.</p>\r\n        <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">random</span>\r\n<span class=\"variable\">numero_secreto</span> = <span class=\"variable\">random</span>.<span class=\"function\">randint</span>(<span class=\"number\">1</span>, <span class=\"number\">20</span>)\r\n<span class=\"variable\">intentos_maximos</span> = <span class=\"number\">5</span>\r\n<span class=\"variable\">adivinado</span> = <span class=\"boolean\">False</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- ¡Adivina el Número (1-20)! ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Tienes {intentos_maximos} intentos.\"</span>)\r\n\r\n<span class=\"keyword\">for</span> <span class=\"variable\">intento_actual</span> <span class=\"keyword\">in</span> <span class=\"function\">range</span>(<span class=\"number\">1</span>, <span class=\"variable\">intentos_maximos</span> + <span class=\"number\">1</span>):\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"\\n--- Intento #{intento_actual} ---\"</span>)\r\n    <span class=\"keyword\">while</span> <span class=\"boolean\">True</span>:\r\n        <span class=\"variable\">entrada_usuario</span> = <span class=\"function\">input</span>(<span class=\"highlight\">\"Introduce tu número: \"</span>)\r\n        <span class=\"keyword\">if</span> <span class=\"variable\">entrada_usuario</span>.<span class=\"function\">isdigit</span>():\r\n            <span class=\"variable\">numero_usuario</span> = <span class=\"function\">int</span>(<span class=\"variable\">entrada_usuario</span>)\r\n            <span class=\"keyword\">break</span>\r\n        <span class=\"keyword\">else</span>:\r\n            <span class=\"function\">print</span>(<span class=\"highlight\">\"Entrada inválida.\"</span>)\r\n\r\n    <span class=\"keyword\">if</span> <span class=\"variable\">numero_usuario</span> == <span class=\"variable\">numero_secreto</span>:\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"¡Felicidades! ¡Has adivinado el número {numero_secreto}!\"</span>)\r\n        <span class=\"variable\">adivinado</span> = <span class=\"boolean\">True</span>\r\n        <span class=\"keyword\">break</span>\r\n    <span class=\"keyword\">elif</span> <span class=\"variable\">numero_usuario</span> < <span class=\"variable\">numero_secreto</span>:\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"El número secreto es MÁS ALTO.\"</span>)\r\n    <span class=\"keyword\">else</span>:\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"El número secreto es MÁS BAJO.\"</span>)\r\n\r\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable\">adivinado</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"\\nLo siento, te has quedado sin intentos. El número era {numero_secreto}.\"</span>)\r\n        </pre></div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 4</h3>\r\n            <h4>Ejercicio 1: Procesador de Pedidos de Pizza</h4>\r\n            <p><strong>Objetivo:</strong> Usar bucles y condicionales para procesar una lista de pedidos y calcular el total.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Define una lista de `pedidos` y los precios de cada pizza.</li>\r\n                <li>Inicializa una variable `total_ventas` en `0.0`.</li>\r\n                <li>Usa un bucle `for` para recorrer la lista de `pedidos`.</li>\r\n                <li>Dentro del bucle, usa `if/elif/else` para comprobar qué pizza es y añadir el precio correspondiente a `total_ventas`.</li>\r\n                <li>Si el pedido no es uno de los conocidos, imprime un mensaje de \"Pedido inválido\".</li>\r\n                <li>Al final, imprime el `total_ventas` del día.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion4-1')\">Ver Solución</span>\r\n            <div id=\"solucion4-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">pedidos</span> = [<span class=\"highlight\">\"margarita\"</span>, <span class=\"highlight\">\"pepperoni\"</span>, <span class=\"highlight\">\"desconocida\"</span>, <span class=\"highlight\">\"vegetariana\"</span>]\r\n<span class=\"variable\">total_ventas</span> = <span class=\"number\">0.0</span>\r\n<span class=\"keyword\">for</span> <span class=\"variable\">pizza</span> <span class=\"keyword\">in</span> <span class=\"variable\">pedidos</span>:\r\n    <span class=\"keyword\">if</span> <span class=\"variable\">pizza</span> == <span class=\"highlight\">\"margarita\"</span>: <span class=\"variable\">total_ventas</span> += <span class=\"number\">8</span>\r\n    <span class=\"keyword\">elif</span> <span class=\"variable\">pizza</span> == <span class=\"highlight\">\"pepperoni\"</span>: <span class=\"variable\">total_ventas</span> += <span class=\"number\">10</span>\r\n    <span class=\"keyword\">elif</span> <span class=\"variable\">pizza</span> == <span class=\"highlight\">\"vegetariana\"</span>: <span class=\"variable\">total_ventas</span> += <span class=\"number\">9</span>\r\n    <span class=\"keyword\">else</span>: <span class=\"function\">print</span>(<span class=\"highlight\">f\"Pedido '{pizza}' inválido.\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"\\nTotal de ventas: ${total_ventas}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 4</h3>\r\n            <h4>Ejercicio 1: Procesador de Pedidos de Pizza</h4>\r\n            <p><strong>Objetivo:</strong> Usar bucles y condicionales para procesar una lista de pedidos y calcular el total.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Define una lista de `pedidos` y los precios de cada pizza.</li>\r\n                <li>Inicializa una variable `total_ventas` en `0.0`.</li>\r\n                <li>Usa un bucle `for` para recorrer la lista de `pedidos`.</li>\r\n                <li>Dentro del bucle, usa `if/elif/else` para comprobar qué pizza es y añadir el precio correspondiente a `total_ventas`.</li>\r\n                <li>Si el pedido no es uno de los conocidos, imprime un mensaje de \"Pedido inválido\".</li>\r\n                <li>Al final, imprime el `total_ventas` del día.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion4-1')\">Ver Solución</span>\r\n            <div id=\"solucion4-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">pedidos</span> = [<span class=\"highlight\">\"margarita\"</span>, <span class=\"highlight\">\"pepperoni\"</span>, <span class=\"highlight\">\"desconocida\"</span>, <span class=\"highlight\">\"vegetariana\"</span>]\r\n<span class=\"variable\">total_ventas</span> = <span class=\"number\">0.0</span>\r\n<span class=\"keyword\">for</span> <span class=\"variable\">pizza</span> <span class=\"keyword\">in</span> <span class=\"variable\">pedidos</span>:\r\n    <span class=\"keyword\">if</span> <span class=\"variable\">pizza</span> == <span class=\"highlight\">\"margarita\"</span>: <span class=\"variable\">total_ventas</span> += <span class=\"number\">8</span>\r\n    <span class=\"keyword\">elif</span> <span class=\"variable\">pizza</span> == <span class=\"highlight\">\"pepperoni\"</span>: <span class=\"variable\">total_ventas</span> += <span class=\"number\">10</span>\r\n    <span class=\"keyword\">elif</span> <span class=\"variable\">pizza</span> == <span class=\"highlight\">\"vegetariana\"</span>: <span class=\"variable\">total_ventas</span> += <span class=\"number\">9</span>\r\n    <span class=\"keyword\">else</span>: <span class=\"function\">print</span>(<span class=\"highlight\">f\"Pedido '{pizza}' inválido.\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"\\nTotal de ventas: ${total_ventas}\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 4, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 5, "fields": {"modulo": 1, "titulo": "Funciones y modulos", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 1, Lección 5: Funciones y Módulos - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 5: Funciones y Módulos</h1>\r\n        <p class=\"lesson-intro\">\r\n            A medida que tus programas crecen, la organización se vuelve crucial. En esta lección, aprenderás a crear **funciones** para empaquetar y reutilizar bloques de código, y a usar **módulos** para dividir tu proyecto en archivos lógicos y manejables.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Funciones - Creando Código Reutilizable</h2>\r\n        <p>Una **función** es un bloque de código con nombre que realiza una tarea específica. En lugar de escribir el mismo código varias veces, lo defines una vez en una función y luego la \"llamas\" cada vez que la necesites. Esto sigue el principio **DRY (Don't Repeat Yourself - No te Repitas)**.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Definición y Llamada de una Función</h3>\r\n            <ul>\r\n                <li>\r\n                    <strong>Definición (<code>def</code>):</strong> Se usa la palabra clave `def` para crear una función. Dentro de los paréntesis se definen los **parámetros** (variables que la función espera recibir).\r\n                </li>\r\n                <li>\r\n                    <strong>Retorno (<code>return</code>):</strong> La palabra clave `return` se usa para que la función devuelva un resultado. Una vez que se ejecuta, la función termina.\r\n                </li>\r\n                <li>\r\n                    <strong>Llamada:</strong> Para ejecutar la función, simplemente escribes su nombre con los **argumentos** (los valores reales para los parámetros) entre paréntesis.\r\n                </li>\r\n            </ul>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># 1. Definición de la función</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">sumar</span>(<span class=\"variable\">numero1</span>, <span class=\"variable\">numero2</span>):\r\n    <span class=\"variable\">resultado</span> = <span class=\"variable\">numero1</span> + <span class=\"variable\">numero2</span>\r\n    <span class=\"keyword\">return</span> <span class=\"variable\">resultado</span>\r\n\r\n<span class=\"comment\"># 2. Llamada a la función</span>\r\n<span class=\"variable\">suma_total</span> = <span class=\"function\">sumar</span>(<span class=\"number\">10</span>, <span class=\"number\">5</span>) <span class=\"comment\"># 10 y 5 son los argumentos</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"El resultado es: {suma_total}\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">El resultado es: 15</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Argumentos por Defecto</h3>\r\n            <p>Puedes asignar un valor por defecto a un parámetro. Si no se proporciona un argumento para ese parámetro al llamar a la función, usará el valor por defecto, haciendo que ese argumento sea opcional.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># El parámetro 'saludo' tiene un valor por defecto</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">saludar_usuario</span>(<span class=\"variable\">nombre</span>, <span class=\"variable\">saludo</span>=<span class=\"highlight\">\"Hola\"</span>):\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"{saludo}, {nombre}!\"</span>)\r\n\r\n<span class=\"function\">saludar_usuario</span>(<span class=\"highlight\">\"Ana\"</span>) <span class=\"comment\"># Usa el saludo por defecto</span>\r\n<span class=\"function\">saludar_usuario</span>(<span class=\"highlight\">\"Luis\"</span>, <span class=\"highlight\">\"Bienvenido\"</span>) <span class=\"comment\"># Proporciona un saludo diferente</span>\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Hola, Ana!</span>\r\n<span class=\"highlight\">Bienvenido, Luis!</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 2: Módulos - Organizando tu Código</h2>\r\n        <p>Un **módulo** es simplemente un archivo de Python (`.py`) que contiene funciones, clases y variables. Sirven para organizar el código de forma lógica y para reutilizarlo en diferentes proyectos. Python viene con una enorme **Biblioteca Estándar** llena de módulos listos para usar.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Importando Módulos</h3>\r\n            <p>Se usa la palabra clave `import` para traer las funcionalidades de un módulo a tu script actual.</p>\r\n             <ul>\r\n                <li>\r\n                    <strong><code>import modulo</code>:</strong> Importa el módulo completo. Para usar sus funciones, debes escribir `modulo.funcion()`.\r\n                    <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">random</span> <span class=\"comment\"># Importa el módulo para generar números aleatorios</span>\r\n<span class=\"variable\">numero_aleatorio</span> = <span class=\"variable\">random</span>.<span class=\"function\">randint</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Número aleatorio entre 1 y 10: {numero_aleatorio}\"</span>)</pre></div>\r\n                </li>\r\n                <li>\r\n                    <strong><code>from modulo import funcion</code>:</strong> Importa solo un elemento específico del módulo. Puedes llamarlo directamente sin el prefijo del módulo.\r\n                    <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">from</span> <span class=\"variable\">math</span> <span class=\"keyword\">import</span> <span class=\"variable\">sqrt</span> <span class=\"comment\"># Importa solo la función de raíz cuadrada</span>\r\n<span class=\"variable\">raiz_cuadrada</span> = <span class=\"function\">sqrt</span>(<span class=\"number\">25</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"La raíz cuadrada de 25 es: {raiz_cuadrada}\"</span>) <span class=\"comment\"># Salida: 5.0</span></pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Ejemplo Integrador: Calculadora de Descuentos Modulariada</h2>\r\n        <p>Este ejemplo práctico muestra cómo separar la lógica en un módulo y usarla desde un script principal.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h4>Paso 1: Crear el Módulo (`calculos.py`)</h4>\r\n            <p>Este archivo contendrá nuestra función reutilizable.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Archivo: calculos.py</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">calcular_precio_final</span>(<span class=\"variable\">precio_original</span>, <span class=\"variable\">porcentaje_descuento</span>):\r\n    <span class=\"variable\">monto_descuento</span> = <span class=\"variable\">precio_original</span> * (<span class=\"variable\">porcentaje_descuento</span> / <span class=\"number\">100</span>)\r\n    <span class=\"variable\">precio_con_descuento</span> = <span class=\"variable\">precio_original</span> - <span class=\"variable\">monto_descuento</span>\r\n    <span class=\"keyword\">return</span> <span class=\"variable\">precio_con_descuento</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h4>Paso 2: Crear el Script Principal (`app.py`)</h4>\r\n            <p>Este archivo importará y usará la función del módulo `calculos`.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Archivo: app.py</span>\r\n<span class=\"keyword\">from</span> <span class=\"variable\">calculos</span> <span class=\"keyword\">import</span> <span class=\"function\">calcular_precio_final</span> <span class=\"comment\"># Importamos nuestra función</span>\r\n\r\n<span class=\"variable\">precio_tv</span> = <span class=\"number\">500</span>\r\n<span class=\"variable\">descuento_oferta</span> = <span class=\"number\">20</span> <span class=\"comment\"># 20% de descuento</span>\r\n\r\n<span class=\"comment\"># Usamos la función importada</span>\r\n<span class=\"variable\">precio_final_tv</span> = <span class=\"function\">calcular_precio_final</span>(<span class=\"variable\">precio_tv</span>, <span class=\"variable\">descuento_oferta</span>)\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Tienda de Electrónica ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Precio original de la TV: ${precio_tv}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Precio final con {descuento_oferta}% de descuento: ${precio_final_tv}\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">--- Tienda de Electrónica ---</span>\r\n<span class=\"highlight\">Precio original de la TV: $500</span>\r\n<span class=\"highlight\">Precio final con 20% de descuento: $400.0</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 5</h3>\r\n\r\n            <h4>Ejercicio 1: Módulo de Conversiones de Temperatura</h4>\r\n            <p><strong>Objetivo:</strong> Crear un módulo reutilizable con funciones de conversión y usarlo desde otro script.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un archivo llamado `conversor.py`. Dentro, define dos funciones: `celsius_a_fahrenheit(celsius)` y `fahrenheit_a_celsius(fahrenheit)`.\r\n                    <div class=\"note\">Fórmulas: `F = C * 9/5 + 32` y `C = (F - 32) * 5/9`.</div>\r\n                </li>\r\n                <li>Crea un segundo archivo llamado `clima_app.py`.</li>\r\n                <li>En `clima_app.py`, importa las dos funciones desde tu módulo `conversor`.</li>\r\n                <li>Usa las funciones importadas para convertir 25 grados Celsius a Fahrenheit y 77 grados Fahrenheit a Celsius.</li>\r\n                <li>Imprime los resultados de forma clara.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion5-1')\">Ver Solución</span>\r\n            <div id=\"solucion5-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Archivo: conversor.py</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">celsius_a_fahrenheit</span>(<span class=\"variable\">celsius</span>):\r\n    <span class=\"keyword\">return</span> <span class=\"variable\">celsius</span> * <span class=\"number\">9</span>/<span class=\"number\">5</span> + <span class=\"number\">32</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">fahrenheit_a_celsius</span>(<span class=\"variable\">fahrenheit</span>):\r\n    <span class=\"keyword\">return</span> (<span class=\"variable\">fahrenheit</span> - <span class=\"number\">32</span>) * <span class=\"number\">5</span>/<span class=\"number\">9</span>\r\n\r\n<span class=\"comment\"># Archivo: clima_app.py</span>\r\n<span class=\"keyword\">from</span> <span class=\"variable\">conversor</span> <span class=\"keyword\">import</span> <span class=\"function\">celsius_a_fahrenheit</span>, <span class=\"function\">fahrenheit_a_celsius</span>\r\n<span class=\"variable\">temp_c</span> = <span class=\"number\">25</span>\r\n<span class=\"variable\">temp_f</span> = <span class=\"number\">77</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"{temp_c}°C son {celsius_a_fahrenheit(temp_c)}°F\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"{temp_f}°F son {fahrenheit_a_celsius(temp_f)}°C\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 5</h3>\r\n\r\n            <h4>Ejercicio 1: Módulo de Conversiones de Temperatura</h4>\r\n            <p><strong>Objetivo:</strong> Crear un módulo reutilizable con funciones de conversión y usarlo desde otro script.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un archivo llamado `conversor.py`. Dentro, define dos funciones: `celsius_a_fahrenheit(celsius)` y `fahrenheit_a_celsius(fahrenheit)`.\r\n                    <div class=\"note\">Fórmulas: `F = C * 9/5 + 32` y `C = (F - 32) * 5/9`.</div>\r\n                </li>\r\n                <li>Crea un segundo archivo llamado `clima_app.py`.</li>\r\n                <li>En `clima_app.py`, importa las dos funciones desde tu módulo `conversor`.</li>\r\n                <li>Usa las funciones importadas para convertir 25 grados Celsius a Fahrenheit y 77 grados Fahrenheit a Celsius.</li>\r\n                <li>Imprime los resultados de forma clara.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion5-1')\">Ver Solución</span>\r\n            <div id=\"solucion5-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Archivo: conversor.py</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">celsius_a_fahrenheit</span>(<span class=\"variable\">celsius</span>):\r\n    <span class=\"keyword\">return</span> <span class=\"variable\">celsius</span> * <span class=\"number\">9</span>/<span class=\"number\">5</span> + <span class=\"number\">32</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">fahrenheit_a_celsius</span>(<span class=\"variable\">fahrenheit</span>):\r\n    <span class=\"keyword\">return</span> (<span class=\"variable\">fahrenheit</span> - <span class=\"number\">32</span>) * <span class=\"number\">5</span>/<span class=\"number\">9</span>\r\n\r\n<span class=\"comment\"># Archivo: clima_app.py</span>\r\n<span class=\"keyword\">from</span> <span class=\"variable\">conversor</span> <span class=\"keyword\">import</span> <span class=\"function\">celsius_a_fahrenheit</span>, <span class=\"function\">fahrenheit_a_celsius</span>\r\n<span class=\"variable\">temp_c</span> = <span class=\"number\">25</span>\r\n<span class=\"variable\">temp_f</span> = <span class=\"number\">77</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"{temp_c}°C son {celsius_a_fahrenheit(temp_c)}°F\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"{temp_f}°F son {fahrenheit_a_celsius(temp_f)}°C\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 5, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 6, "fields": {"modulo": 2, "titulo": "Listas", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 2, Lección 1: Listas - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n    <style>\r\n        /* Estilo simple para las tablas de indexado */\r\n        .indexing-table { width: 100%; text-align: center; border-collapse: collapse; margin-top: 15px; }\r\n        .indexing-table td, .indexing-table th { border: 1px solid var(--border-color); padding: 8px; }\r\n        .indexing-table th { background-color: var(--code-bg); color: var(--accent-color); }\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 1: Listas</h1>\r\n        <p class=\"lesson-intro\">\r\n            Una **lista** es la estructura de datos más fundamental de Python. Es una colección **ordenada** de elementos (cada uno con una posición o índice) y **mutable** (puedes cambiar su contenido en cualquier momento).\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Indexado y Acceso a Elementos</h2>\r\n        <p>Cada elemento en una lista tiene una posición específica, identificada por un número llamado **índice**.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Indexado Positivo (desde el principio)</h3>\r\n            <p>El conteo de los índices en Python siempre empieza en **cero**.</p>\r\n            <table class=\"indexing-table\">\r\n                <tr><th>Índice</th><th>0</th><th>1</th><th>2</th><th>3</th></tr>\r\n                <tr><td>Elemento</td><td>\"Ana\"</td><td>\"Luis\"</td><td>\"Marta\"</td><td>\"Juan\"</td></tr>\r\n            </table>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">jugadores</span> = [<span class=\"highlight\">\"Ana\"</span>, <span class=\"highlight\">\"Luis\"</span>, <span class=\"highlight\">\"Marta\"</span>, <span class=\"highlight\">\"Juan\"</span>]\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"El jugador en el índice 0 es: {jugadores[0]}\"</span>) <span class=\"comment\"># Salida: Ana</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Indexado Negativo (desde el final)</h3>\r\n            <p>Permite acceder a los elementos empezando desde el final. El último elemento es el índice `-1`.</p>\r\n             <table class=\"indexing-table\">\r\n                <tr><td>Elemento</td><td>\"Ana\"</td><td>\"Luis\"</td><td>\"Marta\"</td><td>\"Juan\"</td></tr>\r\n                <tr><th>Índice</th><th>-4</th><th>-3</th><th>-2</th><th>-1</th></tr>\r\n            </table>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">jugadores</span> = [<span class=\"highlight\">\"Ana\"</span>, <span class=\"highlight\">\"Luis\"</span>, <span class=\"highlight\">\"Marta\"</span>, <span class=\"highlight\">\"Juan\"</span>]\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"El último jugador es: {jugadores[-1]}\"</span>) <span class=\"comment\"># Salida: Juan</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: Métodos de Listas</h2>\r\n        <p>Las listas vienen con métodos para manipular su contenido.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>list.append(elemento)</code></h3>\r\n            <p><strong>Descripción:</strong> Añade un único elemento al **final** de la lista.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">tareas</span> = [<span class=\"highlight\">\"Limpiar\"</span>]\r\n<span class=\"variable\">tareas</span>.<span class=\"function\">append</span>(<span class=\"highlight\">\"Estudiar\"</span>)\r\n<span class=\"function\">print</span>(tareas) <span class=\"comment\"># Salida: ['Limpiar', 'Estudiar']</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>list.extend(iterable)</code></h3>\r\n            <p><strong>Descripción:</strong> Une una lista con otro iterable (como otra lista), añadiendo cada elemento al final.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">lista_a</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; <span class=\"variable\">lista_b</span> = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]\r\n<span class=\"variable\">lista_a</span>.<span class=\"function\">extend</span>(<span class=\"variable\">lista_b</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">lista_a</span>) <span class=\"comment\"># Salida: [1, 2, 3, 4]</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>list.insert(indice, elemento)</code></h3>\r\n            <p><strong>Descripción:</strong> Inserta un elemento en una posición específica, desplazando el resto.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">ranking</span> = [<span class=\"highlight\">\"Oro\"</span>, <span class=\"highlight\">\"Bronce\"</span>]\r\n<span class=\"variable\">ranking</span>.<span class=\"function\">insert</span>(<span class=\"number\">1</span>, <span class=\"highlight\">\"Plata\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">ranking</span>) <span class=\"comment\"># Salida: ['Oro', 'Plata', 'Bronce']</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>list.remove(valor)</code></h3>\r\n            <p><strong>Descripción:</strong> Elimina la **primera ocurrencia** de un valor especificado.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">frutas</span> = [<span class=\"highlight\">'manzana'</span>, <span class=\"highlight\">'pera'</span>, <span class=\"highlight\">'manzana'</span>]\r\n<span class=\"variable\">frutas</span>.<span class=\"function\">remove</span>(<span class=\"highlight\">'manzana'</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">frutas</span>) <span class=\"comment\"># Salida: ['pera', 'manzana']</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>list.pop(indice)</code></h3>\r\n            <p><strong>Descripción:</strong> Elimina y **retorna** el elemento de la posición especificada. Si se omite el índice, elimina el último.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">baraja</span> = [<span class=\"highlight\">\"As\"</span>, <span class=\"highlight\">\"Rey\"</span>, <span class=\"highlight\">\"Reina\"</span>]\r\n<span class=\"variable\">carta_tomada</span> = <span class=\"variable\">baraja</span>.<span class=\"function\">pop</span>()\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Carta: {carta_tomada}, Baraja: {baraja}\"</span>) <span class=\"comment\"># Salida: Carta: Reina, Baraja: ['As', 'Rey']</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>list.sort()</code></h3>\r\n            <p><strong>Descripción:</strong> Ordena los elementos de la lista. **Modifica la lista original**.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">puntuaciones</span> = [<span class=\"number\">95</span>, <span class=\"number\">88</span>, <span class=\"number\">100</span>]\r\n<span class=\"variable\">puntuaciones</span>.<span class=\"function\">sort</span>()\r\n<span class=\"function\">print</span>(<span class=\"variable\">puntuaciones</span>) <span class=\"comment\"># Salida: [88, 95, 100]</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>list.reverse()</code></h3>\r\n            <p><strong>Descripción:</strong> Invierte el orden de los elementos. **Modifica la lista original**.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">numeros</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]\r\n<span class=\"variable\">numeros</span>.<span class=\"function\">reverse</span>()\r\n<span class=\"function\">print</span>(<span class=\"variable\">numeros</span>) <span class=\"comment\"># Salida: [4, 3, 2, 1]</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Ejemplo Integrador: Gestión de una Playlist Musical</h2>\r\n        <p>Este script funcional aplica todos los conceptos de la lección para gestionar una lista que representa una playlist.</p>\r\n        <div class=\"code-block\"><pre>\r\n<span class=\"variable\">playlist</span> = [<span class=\"highlight\">\"Bohemian Rhapsody\"</span>, <span class=\"highlight\">\"Stairway to Heaven\"</span>, <span class=\"highlight\">\"Hotel California\"</span>]\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Playlist inicial: {playlist}\\n\"</span>)\r\n\r\n<span class=\"comment\"># Añadir canciones</span>\r\n<span class=\"variable\">playlist</span>.<span class=\"function\">append</span>(<span class=\"highlight\">\"Imagine\"</span>)\r\n<span class=\"variable\">playlist</span>.<span class=\"function\">insert</span>(<span class=\"number\">1</span>, <span class=\"highlight\">\"Like a Rolling Stone\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Playlist actualizada: {playlist}\\n\"</span>)\r\n\r\n<span class=\"comment\"># Eliminar una canción por nombre y otra por posición</span>\r\n<span class=\"variable\">playlist</span>.<span class=\"function\">remove</span>(<span class=\"highlight\">\"Stairway to Heaven\"</span>)\r\n<span class=\"variable\">cancion_eliminada</span> = <span class=\"variable\">playlist</span>.<span class=\"function\">pop</span>(<span class=\"number\">0</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Se eliminó '{cancion_eliminada}'.\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Playlist después de eliminar: {playlist}\\n\"</span>)\r\n\r\n<span class=\"comment\"># Buscar y contar</span>\r\n<span class=\"variable\">posicion</span> = <span class=\"variable\">playlist</span>.<span class=\"function\">index</span>(<span class=\"highlight\">\"Hotel California\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"'Hotel California' está en la posición: {posicion}\"</span>)\r\n<span class=\"variable\">playlist</span>.<span class=\"function\">append</span>(<span class=\"highlight\">\"Imagine\"</span>)\r\n<span class=\"variable\">veces_imagine</span> = <span class=\"variable\">playlist</span>.<span class=\"function\">count</span>(<span class=\"highlight\">\"Imagine\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"'Imagine' aparece {veces_imagine} veces.\\n\"</span>)\r\n\r\n<span class=\"comment\"># Ordenar y revertir</span>\r\n<span class=\"variable\">playlist</span>.<span class=\"function\">sort</span>()\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Playlist ordenada: {playlist}\"</span>)\r\n<span class=\"variable\">playlist</span>.<span class=\"function\">reverse</span>()\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Playlist invertida: {playlist}\"</span>)\r\n        </pre></div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicio: Gestión de Lista de Tareas (To-Do List) Avanzada</h3>\r\n            <p><strong>Objetivo:</strong> Aplicar múltiples métodos de listas para crear un gestor de tareas funcional.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea una lista de `tareas` inicial.</li>\r\n                <li>Usa `append()` para añadir una nueva tarea.</li>\r\n                <li>Usa `insert()` para añadir una tarea de alta prioridad al principio (índice 0).</li>\r\n                <li>Usa `remove()` para \"completar\" una tarea por su nombre.</li>\r\n                <li>Usa `sort()` para ordenar las tareas restantes alfabéticamente.</li>\r\n                <li>Busca la posición de una tarea específica usando `index()`.</li>\r\n                <li>Imprime la lista final de tareas y la posición de la tarea que buscaste.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM2L1')\">Ver Solución</span>\r\n            <div id=\"solucionM2L1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">tareas</span> = [<span class=\"highlight\">\"Hacer la compra\"</span>, <span class=\"highlight\">\"Llamar al banco\"</span>, <span class=\"highlight\">\"Estudiar Python\"</span>]\r\n<span class=\"variable\">tareas</span>.<span class=\"function\">append</span>(<span class=\"highlight\">\"Pasear al perro\"</span>)\r\n<span class=\"variable\">tareas</span>.<span class=\"function\">insert</span>(<span class=\"number\">0</span>, <span class=\"highlight\">\"URGENTE: Enviar email\"</span>)\r\n<span class=\"variable\">tareas</span>.<span class=\"function\">remove</span>(<span class=\"highlight\">\"Llamar al banco\"</span>)\r\n<span class=\"variable\">tareas</span>.<span class=\"function\">sort</span>()\r\n<span class=\"variable\">posicion_estudiar</span> = <span class=\"variable\">tareas</span>.<span class=\"function\">index</span>(<span class=\"highlight\">\"Estudiar Python\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Tareas pendientes ordenadas: {tareas}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"'Estudiar Python' está en la posición: {posicion_estudiar}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Gestión de Lista de Tareas (To-Do List) Avanzada</h3>\r\n            <p><strong>Objetivo:</strong> Aplicar múltiples métodos de listas para crear un gestor de tareas funcional.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea una lista de `tareas` inicial.</li>\r\n                <li>Usa `append()` para añadir una nueva tarea.</li>\r\n                <li>Usa `insert()` para añadir una tarea de alta prioridad al principio (índice 0).</li>\r\n                <li>Usa `remove()` para \"completar\" una tarea por su nombre.</li>\r\n                <li>Usa `sort()` para ordenar las tareas restantes alfabéticamente.</li>\r\n                <li>Busca la posición de una tarea específica usando `index()`.</li>\r\n                <li>Imprime la lista final de tareas y la posición de la tarea que buscaste.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM2L1')\">Ver Solución</span>\r\n            <div id=\"solucionM2L1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">tareas</span> = [<span class=\"highlight\">\"Hacer la compra\"</span>, <span class=\"highlight\">\"Llamar al banco\"</span>, <span class=\"highlight\">\"Estudiar Python\"</span>]\r\n<span class=\"variable\">tareas</span>.<span class=\"function\">append</span>(<span class=\"highlight\">\"Pasear al perro\"</span>)\r\n<span class=\"variable\">tareas</span>.<span class=\"function\">insert</span>(<span class=\"number\">0</span>, <span class=\"highlight\">\"URGENTE: Enviar email\"</span>)\r\n<span class=\"variable\">tareas</span>.<span class=\"function\">remove</span>(<span class=\"highlight\">\"Llamar al banco\"</span>)\r\n<span class=\"variable\">tareas</span>.<span class=\"function\">sort</span>()\r\n<span class=\"variable\">posicion_estudiar</span> = <span class=\"variable\">tareas</span>.<span class=\"function\">index</span>(<span class=\"highlight\">\"Estudiar Python\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Tareas pendientes ordenadas: {tareas}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"'Estudiar Python' está en la posición: {posicion_estudiar}\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 1, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 7, "fields": {"modulo": 2, "titulo": "Tuplas", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 2, Lección 2: Tuplas y Conjuntos (Sets) - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 2: Tuplas y Conjuntos (Sets)</h1>\r\n        <p class=\"lesson-intro\">\r\n            Además de las listas, Python ofrece otras estructuras de datos para situaciones específicas. En esta lección, exploraremos las **tuplas**, que son como \"listas inmutables\", y los **conjuntos (sets)**, colecciones de elementos únicos sin un orden específico.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Tuplas - Colecciones Inmutables</h2>\r\n        <p>Una **tupla** es muy similar a una lista (es ordenada y se accede por índice), pero con una diferencia crucial: es **inmutable**. Una vez que creas una tupla, no puedes añadir, eliminar o modificar sus elementos. Piensa en ellas como una \"caja de cristal\" sellada, perfecta para datos que no deben cambiar.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Creación, Acceso y Desempaquetado</h3>\r\n            <p>Se crean con paréntesis `()` y se accede a sus elementos con índices. Una de sus características más potentes es el \"desempaquetado\", que permite asignar sus elementos a variables individuales.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Código de Entrada</span>\r\n<span class=\"variable\">configuracion_db</span> = (<span class=\"highlight\">\"localhost\"</span>, <span class=\"number\">5432</span>, <span class=\"highlight\">\"admin\"</span>)\r\n<span class=\"comment\"># Desempaquetado de tuplas</span>\r\n<span class=\"variable\">host</span>, <span class=\"variable\">puerto</span>, <span class=\"variable\">usuario</span> = <span class=\"variable\">configuracion_db</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Conectando a {host} en el puerto {puerto}\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Conectando a localhost en el puerto 5432</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Métodos de Tuplas</h3>\r\n            <ul>\r\n                <li><strong><code>.count(valor)</code>:</strong> Cuenta cuántas veces aparece un `valor` en la tupla.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">notas</span> = (<span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>)\r\n<span class=\"variable\">veces_diez</span> = <span class=\"variable\">notas</span>.<span class=\"function\">count</span>(<span class=\"number\">10</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"El número 10 aparece {veces_diez} veces.\"</span>) <span class=\"comment\"># Salida: 3</span></pre></div>\r\n                </li>\r\n                <li><strong><code>.index(valor)</code>:</strong> Devuelve el índice de la primera ocurrencia de un `valor`.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">dias_semana</span> = (<span class=\"highlight\">\"Lunes\"</span>, <span class=\"highlight\">\"Martes\"</span>, <span class=\"highlight\">\"Miércoles\"</span>)\r\n<span class=\"variable\">posicion_martes</span> = <span class=\"variable\">dias_semana</span>.<span class=\"function\">index</span>(<span class=\"highlight\">\"Martes\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Martes está en el índice: {posicion_martes}\"</span>) <span class=\"comment\"># Salida: 1</span></pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: Conjuntos (Sets) - Colecciones de Elementos Únicos</h2>\r\n        <p>Un **conjunto (set)** es una colección que tiene dos características clave: **no tiene un orden** específico y **no permite elementos duplicados**. Su principal superpoder es realizar operaciones matemáticas de conjuntos de forma muy eficiente.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Métodos de Modificación</h3>\r\n            <ul>\r\n                <li><strong><code>.add(elemento)</code>:</strong> Añade un elemento. Si ya existe, no hace nada.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">ingredientes</span> = {<span class=\"highlight\">\"tomate\"</span>, <span class=\"highlight\">\"cebolla\"</span>}\r\n<span class=\"variable\">ingredientes</span>.<span class=\"function\">add</span>(<span class=\"highlight\">\"ajo\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">ingredientes</span>) <span class=\"comment\"># Salida (el orden puede variar): {'cebolla', 'ajo', 'tomate'}</span></pre></div>\r\n                </li>\r\n                <li><strong><code>.remove(elemento)</code>:</strong> Elimina un elemento. Lanza `KeyError` si el elemento no existe.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">ingredientes</span> = {<span class=\"highlight\">\"tomate\"</span>, <span class=\"highlight\">\"cebolla\"</span>}\r\n<span class=\"variable\">ingredientes</span>.<span class=\"function\">remove</span>(<span class=\"highlight\">\"tomate\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">ingredientes</span>) <span class=\"comment\"># Salida: {'cebolla'}</span></pre></div>\r\n                </li>\r\n                <li><strong><code>.discard(elemento)</code>:</strong> Elimina un elemento. Si no existe, **no hace nada** (es más seguro que `remove`).\r\n                     <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">ingredientes</span> = {<span class=\"highlight\">\"tomate\"</span>, <span class=\"highlight\">\"cebolla\"</span>}\r\n<span class=\"variable\">ingredientes</span>.<span class=\"function\">discard</span>(<span class=\"highlight\">\"pimiento\"</span>) <span class=\"comment\"># No da error</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">ingredientes</span>) <span class=\"comment\"># Salida: {'cebolla', 'tomate'}</span></pre></div>\r\n                </li>\r\n                <li><strong><code>.pop()</code>:</strong> Elimina y retorna un elemento aleatorio del conjunto.\r\n                     <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">tags</span> = {<span class=\"highlight\">\"python\"</span>, <span class=\"highlight\">\"web\"</span>, <span class=\"highlight\">\"dev\"</span>}\r\n<span class=\"variable\">tag_eliminado</span> = <span class=\"variable\">tags</span>.<span class=\"function\">pop</span>()\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Tag eliminado: {tag_eliminado}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Tags restantes: {tags}\"</span>)</pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Operaciones de Conjuntos</h3>\r\n            <ul>\r\n                <li><strong>Unión (<code>|</code>):</strong> Combina dos sets, devolviendo todos los elementos únicos de ambos.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">set_a</span> = {<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>}; <span class=\"variable\">set_b</span> = {<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>}\r\n<span class=\"variable\">union</span> = <span class=\"variable\">set_a</span> | <span class=\"variable\">set_b</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">union</span>) <span class=\"comment\"># Salida: {1, 2, 3, 4, 5}</span></pre></div>\r\n                </li>\r\n                <li><strong>Intersección (<code>&</code>):</strong> Devuelve solo los elementos que están presentes en ambos sets.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">set_a</span> = {<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>}; <span class=\"variable\">set_b</span> = {<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>}\r\n<span class=\"variable\">interseccion</span> = <span class=\"variable\">set_a</span> & <span class=\"variable\">set_b</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">interseccion</span>) <span class=\"comment\"># Salida: {3}</span></pre></div>\r\n                </li>\r\n                <li><strong>Diferencia (<code>-</code>):</strong> Devuelve los elementos que están en el primer set pero no en el segundo.\r\n                     <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">set_a</span> = {<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>}; <span class=\"variable\">set_b</span> = {<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>}\r\n<span class=\"variable\">diferencia</span> = <span class=\"variable\">set_a</span> - <span class=\"variable\">set_b</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">diferencia</span>) <span class=\"comment\"># Salida: {1, 2}</span></pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Ejemplo Integrador: Análisis de Datos de Encuestas</h2>\r\n        <p>Este script utiliza tuplas para almacenar respuestas (que no deben cambiar) y conjuntos para analizarlas (encontrar respuestas únicas, comparar grupos, etc.), integrando todos los conceptos de la lección.</p>\r\n        <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># 1. Usamos una LISTA de TUPLAS para almacenar datos inmutables.</span>\r\n<span class=\"comment\"># Cada tupla es (id_usuario, respuesta), un registro que no debe cambiar.</span>\r\n<span class=\"variable\">respuestas_encuesta</span> = [\r\n    (<span class=\"number\">101</span>, <span class=\"highlight\">\"Python\"</span>),\r\n    (<span class=\"number\">102</span>, <span class=\"highlight\">\"Java\"</span>),\r\n    (<span class=\"number\">103</span>, <span class=\"highlight\">\"Python\"</span>),\r\n    (<span class=\"number\">104</span>, <span class=\"highlight\">\"C++\"</span>),\r\n    (<span class=\"number\">105</span>, <span class=\"highlight\">\"Java\"</span>)\r\n]\r\n\r\n<span class=\"comment\"># 2. Usamos un CONJUNTO para obtener todas las respuestas ÚNICAS.</span>\r\n<span class=\"comment\"># El método .add() se encarga de ignorar los duplicados automáticamente.</span>\r\n<span class=\"variable\">lenguajes_mencionados</span> = <span class=\"function\">set</span>()\r\n<span class=\"keyword\">for</span> <span class=\"variable\">id_usuario</span>, <span class=\"variable\">lenguaje</span> <span class=\"keyword\">in</span> <span class=\"variable\">respuestas_encuesta</span>: <span class=\"comment\"># Desempaquetado de tuplas</span>\r\n    <span class=\"variable\">lenguajes_mencionados</span>.<span class=\"function\">add</span>(<span class=\"variable\">lenguaje</span>)\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Lenguajes únicos mencionados: {lenguajes_mencionados}\\n\"</span>)\r\n\r\n<span class=\"comment\"># 3. Usamos OPERACIONES DE CONJUNTOS para analizar los resultados.</span>\r\n<span class=\"variable\">lenguajes_web</span> = {<span class=\"highlight\">\"Python\"</span>, <span class=\"highlight\">\"Java\"</span>, <span class=\"highlight\">\"JavaScript\"</span>}\r\n<span class=\"variable\">lenguajes_compilados</span> = {<span class=\"highlight\">\"C++\"</span>, <span class=\"highlight\">\"Java\"</span>, <span class=\"highlight\">\"Rust\"</span>}\r\n\r\n<span class=\"variable\">comunes_web</span> = <span class=\"variable\">lenguajes_mencionados</span> & <span class=\"variable\">lenguajes_web</span>\r\n<span class=\"variable\">no_compilados</span> = <span class=\"variable\">lenguajes_mencionados</span> - <span class=\"variable\">lenguajes_compilados</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Análisis de la Encuesta ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Lenguajes de la encuesta que también son de desarrollo web: {comunes_web}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Lenguajes de la encuesta que NO son compilados: {no_compilados}\"</span>)\r\n        </pre></div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 2 (Módulo 2)</h3>\r\n\r\n            <h4>Ejercicio 1: Gestión de Coordenadas Geográficas</h4>\r\n            <p><strong>Objetivo:</strong> Usar una lista de tuplas para almacenar datos fijos y practicar el acceso y desempaquetado.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea una lista de tuplas llamada `ciudades`, donde cada tupla contenga el nombre de una ciudad y sus coordenadas (lat, lon).</li>\r\n                <li>Usa un bucle `for` y el **desempaquetado de tuplas** para imprimir un mensaje formateado para cada ciudad, como: `\"Ciudad: [Nombre], Lat: [Latitud], Lon: [Longitud]\"`.</li>\r\n                <li>Usa el método `.count()` en la lista para ver si una ciudad específica (como una tupla completa) está duplicada.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM2L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM2L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">ciudades</span> = [\r\n    (<span class=\"highlight\">\"Nueva York\"</span>, <span class=\"number\">40.7128</span>, <span class=\"number\">-74.0060</span>),\r\n    (<span class=\"highlight\">\"Tokio\"</span>, <span class=\"number\">35.6895</span>, <span class=\"number\">139.6917</span>),\r\n    (<span class=\"highlight\">\"Londres\"</span>, <span class=\"number\">51.5074</span>, <span class=\"number\">-0.1278</span>)\r\n]\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Coordenadas de Ciudades ---\"</span>)\r\n<span class=\"keyword\">for</span> <span class=\"variable\">nombre</span>, <span class=\"variable\">lat</span>, <span class=\"variable\">lon</span> <span class=\"keyword\">in</span> <span class=\"variable\">ciudades</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Ciudad: {nombre}, Lat: {lat}, Lon: {lon}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n\r\n            <h4 style=\"margin-top: 30px;\">Ejercicio 2: Comparación de Habilidades de Equipos</h4>\r\n            <p><strong>Objetivo:</strong> Usar conjuntos y sus operaciones para analizar las habilidades de dos equipos.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Define dos conjuntos, `habilidades_dev` y `habilidades_design`, cada uno con varias habilidades (strings).</li>\r\n                <li>Usa la operación de **intersección** (`&`) para encontrar las `habilidades_comunes`.</li>\r\n                <li>Usa la operación de **unión** (`|`) para encontrar el `conjunto_total_habilidades`.</li>\r\n                <li>Usa la operación de **diferencia** (`-`) para encontrar las `habilidades_solo_dev`.</li>\r\n                <li>Imprime los tres conjuntos resultantes con mensajes claros.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM2L2-2')\">Ver Solución</span>\r\n            <div id=\"solucionM2L2-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">habilidades_dev</span> = {<span class=\"highlight\">\"Python\"</span>, <span class=\"highlight\">\"SQL\"</span>, <span class=\"highlight\">\"Git\"</span>, <span class=\"highlight\">\"API\"</span>}\r\n<span class=\"variable\">habilidades_design</span> = {<span class=\"highlight\">\"Figma\"</span>, <span class=\"highlight\">\"UX\"</span>, <span class=\"highlight\">\"Git\"</span>, <span class=\"highlight\">\"HTML\"</span>}\r\n\r\n<span class=\"variable\">habilidades_comunes</span> = <span class=\"variable\">habilidades_dev</span> & <span class=\"variable\">habilidades_design</span>\r\n<span class=\"variable\">conjunto_total_habilidades</span> = <span class=\"variable\">habilidades_dev</span> | <span class=\"variable\">habilidades_design</span>\r\n<span class=\"variable\">habilidades_solo_dev</span> = <span class=\"variable\">habilidades_dev</span> - <span class=\"variable\">habilidades_design</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Habilidades en común: {habilidades_comunes}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Todas las habilidades del equipo: {conjunto_total_habilidades}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Habilidades que solo tienen los desarrolladores: {habilidades_solo_dev}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 2 (Módulo 2)</h3>\r\n\r\n            <h4>Ejercicio 1: Gestión de Coordenadas Geográficas</h4>\r\n            <p><strong>Objetivo:</strong> Usar una lista de tuplas para almacenar datos fijos y practicar el acceso y desempaquetado.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea una lista de tuplas llamada `ciudades`, donde cada tupla contenga el nombre de una ciudad y sus coordenadas (lat, lon).</li>\r\n                <li>Usa un bucle `for` y el **desempaquetado de tuplas** para imprimir un mensaje formateado para cada ciudad, como: `\"Ciudad: [Nombre], Lat: [Latitud], Lon: [Longitud]\"`.</li>\r\n                <li>Usa el método `.count()` en la lista para ver si una ciudad específica (como una tupla completa) está duplicada.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM2L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM2L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">ciudades</span> = [\r\n    (<span class=\"highlight\">\"Nueva York\"</span>, <span class=\"number\">40.7128</span>, <span class=\"number\">-74.0060</span>),\r\n    (<span class=\"highlight\">\"Tokio\"</span>, <span class=\"number\">35.6895</span>, <span class=\"number\">139.6917</span>),\r\n    (<span class=\"highlight\">\"Londres\"</span>, <span class=\"number\">51.5074</span>, <span class=\"number\">-0.1278</span>)\r\n]\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Coordenadas de Ciudades ---\"</span>)\r\n<span class=\"keyword\">for</span> <span class=\"variable\">nombre</span>, <span class=\"variable\">lat</span>, <span class=\"variable\">lon</span> <span class=\"keyword\">in</span> <span class=\"variable\">ciudades</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Ciudad: {nombre}, Lat: {lat}, Lon: {lon}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n\r\n            <h4 style=\"margin-top: 30px;\">Ejercicio 2: Comparación de Habilidades de Equipos</h4>\r\n            <p><strong>Objetivo:</strong> Usar conjuntos y sus operaciones para analizar las habilidades de dos equipos.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Define dos conjuntos, `habilidades_dev` y `habilidades_design`, cada uno con varias habilidades (strings).</li>\r\n                <li>Usa la operación de **intersección** (`&`) para encontrar las `habilidades_comunes`.</li>\r\n                <li>Usa la operación de **unión** (`|`) para encontrar el `conjunto_total_habilidades`.</li>\r\n                <li>Usa la operación de **diferencia** (`-`) para encontrar las `habilidades_solo_dev`.</li>\r\n                <li>Imprime los tres conjuntos resultantes con mensajes claros.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM2L2-2')\">Ver Solución</span>\r\n            <div id=\"solucionM2L2-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">habilidades_dev</span> = {<span class=\"highlight\">\"Python\"</span>, <span class=\"highlight\">\"SQL\"</span>, <span class=\"highlight\">\"Git\"</span>, <span class=\"highlight\">\"API\"</span>}\r\n<span class=\"variable\">habilidades_design</span> = {<span class=\"highlight\">\"Figma\"</span>, <span class=\"highlight\">\"UX\"</span>, <span class=\"highlight\">\"Git\"</span>, <span class=\"highlight\">\"HTML\"</span>}\r\n\r\n<span class=\"variable\">habilidades_comunes</span> = <span class=\"variable\">habilidades_dev</span> & <span class=\"variable\">habilidades_design</span>\r\n<span class=\"variable\">conjunto_total_habilidades</span> = <span class=\"variable\">habilidades_dev</span> | <span class=\"variable\">habilidades_design</span>\r\n<span class=\"variable\">habilidades_solo_dev</span> = <span class=\"variable\">habilidades_dev</span> - <span class=\"variable\">habilidades_design</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Habilidades en común: {habilidades_comunes}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Todas las habilidades del equipo: {conjunto_total_habilidades}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Habilidades que solo tienen los desarrolladores: {habilidades_solo_dev}\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 2, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 8, "fields": {"modulo": 2, "titulo": "Diccionarios", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 2, Lección 3: Diccionarios - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 3: Diccionarios</h1>\r\n        <p class=\"lesson-intro\">\r\n            Los **diccionarios** son el corazón de muchas aplicaciones en Python. Son colecciones **mutables** que, a diferencia de las listas, no usan índices numéricos. En su lugar, almacenan datos en pares `clave: valor`. Piensa en ellos como una agenda de contactos: buscas por el nombre (la **clave**) para obtener su número de teléfono (el **valor**).\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Creación y Manipulación Básica</h2>\r\n        <p>Un diccionario se crea con llaves `{}`. Las claves deben ser únicas e inmutables (generalmente se usan strings o números), y se usan para acceder, modificar y eliminar los valores asociados.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Acceso, Adición y Eliminación</h3>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Código de Entrada</span>\r\n<span class=\"variable\">perfil_usuario</span> = {<span class=\"highlight\">\"nombre\"</span>: <span class=\"highlight\">\"Ana\"</span>, <span class=\"highlight\">\"edad\"</span>: <span class=\"number\">28</span>}\r\n\r\n<span class=\"comment\"># Acceder a un valor</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Nombre: {perfil_usuario['nombre']}\"</span>)\r\n\r\n<span class=\"comment\"># Añadir un nuevo par clave-valor</span>\r\n<span class=\"variable\">perfil_usuario</span>[<span class=\"highlight\">\"ciudad\"</span>] = <span class=\"highlight\">\"Madrid\"</span>\r\n\r\n<span class=\"comment\"># Eliminar un par clave-valor</span>\r\n<span class=\"keyword\">del</span> <span class=\"variable\">perfil_usuario</span>[<span class=\"highlight\">'edad'</span>]\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Perfil final: {perfil_usuario}\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Nombre: Ana</span>\r\n<span class=\"highlight\">Perfil final: {'nombre': 'Ana', 'ciudad': 'Madrid'}</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: Métodos de Diccionarios</h2>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>.keys()</code>, <code>.values()</code>, <code>.items()</code></h3>\r\n            <p><strong>Descripción:</strong> Devuelven \"vistas\" para recorrer las claves (`keys`), los valores (`values`), o los pares clave-valor (`items`). `.items()` es el más usado en bucles `for`.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">producto</span> = {<span class=\"highlight\">\"nombre\"</span>: <span class=\"highlight\">\"Teclado\"</span>, <span class=\"highlight\">\"precio\"</span>: <span class=\"number\">75</span>}\r\n<span class=\"keyword\">for</span> <span class=\"variable\">clave</span>, <span class=\"variable\">valor</span> <span class=\"keyword\">in</span> <span class=\"variable\">producto</span>.<span class=\"function\">items</span>():\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"{clave.capitalize()}: {valor}\"</span>)\r\n<span class=\"comment\"># Salida:</span>\r\n<span class=\"comment\"># Nombre: Teclado</span>\r\n<span class=\"comment\"># Precio: 75</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>.get(clave, defecto)</code></h3>\r\n            <p><strong>Descripción:</strong> Obtiene el valor de una clave de forma segura. Si la clave no existe, devuelve `None` o el valor `defecto` especificado, sin dar error.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">config</span> = {<span class=\"highlight\">\"idioma\"</span>: <span class=\"highlight\">\"español\"</span>}\r\n<span class=\"variable\">tema</span> = <span class=\"variable\">config</span>.<span class=\"function\">get</span>(<span class=\"highlight\">\"tema\"</span>, <span class=\"highlight\">\"oscuro\"</span>) <span class=\"comment\"># \"tema\" no existe, devuelve \"oscuro\"</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Tema: {tema}\"</span>) <span class=\"comment\"># Salida: oscuro</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>.pop(clave, defecto)</code></h3>\r\n            <p><strong>Descripción:</strong> Elimina una clave y **retorna** su valor. Si la clave no existe, lanza `KeyError` a menos que se proporcione un valor por `defecto`.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">jugador</span> = {<span class=\"highlight\">\"nombre\"</span>: <span class=\"highlight\">\"Alex\"</span>, <span class=\"highlight\">\"puntos\"</span>: <span class=\"number\">1200</span>}\r\n<span class=\"variable\">puntos_ganados</span> = <span class=\"variable\">jugador</span>.<span class=\"function\">pop</span>(<span class=\"highlight\">\"puntos\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Puntos ganados: {puntos_ganados}\"</span>) <span class=\"comment\"># Salida: 1200</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Jugador: {jugador}\"</span>) <span class=\"comment\"># Salida: {'nombre': 'Alex'}</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>.popitem()</code></h3>\r\n            <p><strong>Descripción:</strong> Elimina y retorna el último par (clave, valor) insertado en el diccionario (desde Python 3.7).</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">tareas</span> = {<span class=\"highlight\">\"lunes\"</span>: <span class=\"highlight\">\"reunión\"</span>, <span class=\"highlight\">\"martes\"</span>: <span class=\"highlight\">\"reporte\"</span>}\r\n<span class=\"variable\">ultima_tarea</span> = <span class=\"variable\">tareas</span>.<span class=\"function\">popitem</span>()\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Última tarea eliminada: {ultima_tarea}\"</span>) <span class=\"comment\"># Salida: ('martes', 'reporte')</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>.update(otro_dict)</code></h3>\r\n            <p><strong>Descripción:</strong> Fusiona un diccionario con otro. Si hay claves repetidas, los valores del `otro_dict` sobrescriben a los originales.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">perfil</span> = {<span class=\"highlight\">\"nombre\"</span>: <span class=\"highlight\">\"Ana\"</span>, <span class=\"highlight\">\"ciudad\"</span>: <span class=\"highlight\">\"Lima\"</span>}\r\n<span class=\"variable\">datos_nuevos</span> = {<span class=\"highlight\">\"ciudad\"</span>: <span class=\"highlight\">\"Cusco\"</span>, <span class=\"highlight\">\"profesion\"</span>: <span class=\"highlight\">\"Ingeniera\"</span>}\r\n<span class=\"variable\">perfil</span>.<span class=\"function\">update</span>(<span class=\"variable\">datos_nuevos</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">perfil</span>) <span class=\"comment\"># Salida: {'nombre': 'Ana', 'ciudad': 'Cusco', 'profesion': 'Ingeniera'}</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>.clear()</code></h3>\r\n            <p><strong>Descripción:</strong> Elimina todos los elementos del diccionario, dejándolo vacío.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"variable\">carrito</span> = {<span class=\"highlight\">\"manzanas\"</span>: <span class=\"number\">5</span>, <span class=\"highlight\">\"peras\"</span>: <span class=\"number\">3</span>}\r\n<span class=\"variable\">carrito</span>.<span class=\"function\">clear</span>()\r\n<span class=\"function\">print</span>(<span class=\"variable\">carrito</span>) <span class=\"comment\"># Salida: {}</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Ejemplo Integrador: Ficha de un Personaje de Videojuego</h2>\r\n        <p>Este script utiliza un diccionario para gestionar los atributos de un personaje y aplica varios métodos para actualizar y mostrar su estado.</p>\r\n        <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># 1. Creación del personaje con un diccionario</span>\r\n<span class=\"variable\">personaje</span> = {<span class=\"highlight\">\"nombre\"</span>: <span class=\"highlight\">\"Gael\"</span>, <span class=\"highlight\">\"clase\"</span>: <span class=\"highlight\">\"Mago\"</span>, <span class=\"highlight\">\"nivel\"</span>: <span class=\"number\">5</span>, \"vida\": <span class=\"number\">100</span>}\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Estado Inicial ---\"</span>)\r\n<span class=\"keyword\">for</span> <span class=\"variable\">k</span>, <span class=\"variable\">v</span> <span class=\"keyword\">in</span> <span class=\"variable\">personaje</span>.<span class=\"function\">items</span>(): <span class=\"function\">print</span>(<span class=\"highlight\">f\"- {k.capitalize()}: {v}\"</span>)\r\n\r\n<span class=\"comment\"># 2. El personaje sube de nivel, actualizamos con .update()</span>\r\n<span class=\"variable\">personaje</span>.<span class=\"function\">update</span>({<span class=\"highlight\">\"nivel\"</span>: <span class=\"number\">6</span>, <span class=\"highlight\">\"vida\"</span>: <span class=\"number\">110</span>, <span class=\"highlight\">\"nuevo_hechizo\"</span>: <span class=\"highlight\">\"Bola de Fuego\"</span>})\r\n\r\n<span class=\"comment\"># 3. El personaje consume un objeto temporal y lo eliminamos con .pop()</span>\r\n<span class=\"variable\">personaje</span>[<span class=\"highlight\">\"buff\"</span>] = <span class=\"highlight\">\"Poción de Fuerza\"</span>\r\n<span class=\"variable\">buff_usado</span> = <span class=\"variable\">personaje</span>.<span class=\"function\">pop</span>(<span class=\"highlight\">\"buff\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"\\nSe ha usado el objeto: {buff_usado}\"</span>)\r\n\r\n<span class=\"comment\"># 4. Mostramos el estado final</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"\\n--- Estado Final ---\"</span>)\r\n<span class=\"keyword\">for</span> <span class=\"variable\">clave</span> <span class=\"keyword\">in</span> <span class=\"variable\">personaje</span>.<span class=\"function\">keys</span>():\r\n    <span class=\"variable\">valor</span> = <span class=\"variable\">personaje</span>.<span class=\"function\">get</span>(<span class=\"variable\">clave</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"- {clave.capitalize()}: {valor}\"</span>)\r\n        </pre></div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 3 (Módulo 2)</h3>\r\n\r\n            <h4>Ejercicio 1: Contador de Frecuencia de Palabras</h4>\r\n            <p><strong>Objetivo:</strong> Usar un diccionario para contar las ocurrencias de cada palabra en una frase.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_contador_palabras.py`.</li>\r\n                <li>Define un string con una frase (ej: \"hola mundo hola python\").</li>\r\n                <li>Crea un diccionario vacío llamado `frecuencias`.</li>\r\n                <li>Usa el método `.split()` en la frase para obtener una lista de palabras.</li>\r\n                <li>Recorre la lista de palabras con un bucle `for`.</li>\r\n                <li>En cada iteración, usa `.get(palabra, 0)` para obtener la cuenta actual de esa palabra y súmale 1. Actualiza el diccionario con la nueva cuenta.</li>\r\n                <li>Al final, imprime el diccionario `frecuencias`.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM2L3-1')\">Ver Solución</span>\r\n            <div id=\"solucionM2L3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">frase</span> = <span class=\"highlight\">\"hola mundo hola python python python\"</span>\r\n<span class=\"variable\">palabras</span> = <span class=\"variable\">frase</span>.<span class=\"function\">split</span>()\r\n<span class=\"variable\">frecuencias</span> = {}\r\n<span class=\"keyword\">for</span> <span class=\"variable\">palabra</span> <span class=\"keyword\">in</span> <span class=\"variable\">palabras</span>:\r\n    <span class=\"variable\">frecuencias</span>[<span class=\"variable\">palabra</span>] = <span class=\"variable\">frecuencias</span>.<span class=\"function\">get</span>(<span class=\"variable\">palabra</span>, <span class=\"number\">0</span>) + <span class=\"number\">1</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Frecuencia de palabras: {frecuencias}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 3 (Módulo 2)</h3>\r\n\r\n            <h4>Ejercicio 1: Contador de Frecuencia de Palabras</h4>\r\n            <p><strong>Objetivo:</strong> Usar un diccionario para contar las ocurrencias de cada palabra en una frase.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_contador_palabras.py`.</li>\r\n                <li>Define un string con una frase (ej: \"hola mundo hola python\").</li>\r\n                <li>Crea un diccionario vacío llamado `frecuencias`.</li>\r\n                <li>Usa el método `.split()` en la frase para obtener una lista de palabras.</li>\r\n                <li>Recorre la lista de palabras con un bucle `for`.</li>\r\n                <li>En cada iteración, usa `.get(palabra, 0)` para obtener la cuenta actual de esa palabra y súmale 1. Actualiza el diccionario con la nueva cuenta.</li>\r\n                <li>Al final, imprime el diccionario `frecuencias`.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM2L3-1')\">Ver Solución</span>\r\n            <div id=\"solucionM2L3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">frase</span> = <span class=\"highlight\">\"hola mundo hola python python python\"</span>\r\n<span class=\"variable\">palabras</span> = <span class=\"variable\">frase</span>.<span class=\"function\">split</span>()\r\n<span class=\"variable\">frecuencias</span> = {}\r\n<span class=\"keyword\">for</span> <span class=\"variable\">palabra</span> <span class=\"keyword\">in</span> <span class=\"variable\">palabras</span>:\r\n    <span class=\"variable\">frecuencias</span>[<span class=\"variable\">palabra</span>] = <span class=\"variable\">frecuencias</span>.<span class=\"function\">get</span>(<span class=\"variable\">palabra</span>, <span class=\"number\">0</span>) + <span class=\"number\">1</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Frecuencia de palabras: {frecuencias}\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 3, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 9, "fields": {"modulo": 2, "titulo": "Conjuntos", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 2, Lección 4: Conjuntos (Sets) - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 4: Conjuntos (Sets)</h1>\r\n        <p class=\"lesson-intro\">\r\n            Los **conjuntos (sets)** son el tercer tipo de colección fundamental en Python. Son colecciones **mutables** con dos características únicas y poderosas: **no tienen un orden** específico y **no permiten elementos duplicados**. Su principal superpoder es realizar operaciones matemáticas de conjuntos (unión, intersección, etc.) de forma extremadamente eficiente.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Creación y Propiedades de los Conjuntos</h2>\r\n        <p>Un conjunto se crea con llaves `{}` o con la función `set()`. Si intentas añadir un elemento que ya existe, simplemente será ignorado, garantizando que cada elemento sea único.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Creación de un Conjunto</h3>\r\n            <p>La forma más común de crear un conjunto es a partir de una lista para eliminar duplicados.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Código de Entrada</span>\r\n<span class=\"variable\">lista_con_duplicados</span> = [<span class=\"highlight\">\"manzana\"</span>, <span class=\"highlight\">\"pera\"</span>, <span class=\"highlight\">\"manzana\"</span>, <span class=\"highlight\">\"uva\"</span>, <span class=\"highlight\">\"pera\"</span>]\r\n\r\n<span class=\"comment\"># Convertir la lista a un conjunto para obtener elementos únicos</span>\r\n<span class=\"variable\">frutas_unicas</span> = <span class=\"function\">set</span>(<span class=\"variable\">lista_con_duplicados</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Frutas únicas en la lista: {frutas_unicas}\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola (el orden puede variar)</span>\r\n<span class=\"highlight\">Frutas únicas en la lista: {'pera', 'manzana', 'uva'}</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: Métodos de Modificación de Conjuntos</h2>\r\n        <div class=\"concept-card\">\r\n            <h3>Métodos Comunes de Modificación</h3>\r\n            <ul>\r\n                <li>\r\n                    <strong><code>.add(elemento)</code>:</strong> Añade un elemento. Si ya existe, no hace nada.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">ingredientes</span> = {<span class=\"highlight\">\"tomate\"</span>, <span class=\"highlight\">\"cebolla\"</span>}\r\n<span class=\"variable\">ingredientes</span>.<span class=\"function\">add</span>(<span class=\"highlight\">\"ajo\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">ingredientes</span>) <span class=\"comment\"># Salida (el orden puede variar): {'cebolla', 'ajo', 'tomate'}</span>\r\n                    </pre></div>\r\n                </li>\r\n                <li>\r\n                    <strong><code>.remove(elemento)</code>:</strong> Elimina un elemento. Lanza `KeyError` si el elemento no existe.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">ingredientes</span> = {<span class=\"highlight\">\"tomate\"</span>, <span class=\"highlight\">\"cebolla\"</span>}\r\n<span class=\"variable\">ingredientes</span>.<span class=\"function\">remove</span>(<span class=\"highlight\">\"tomate\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">ingredientes</span>) <span class=\"comment\"># Salida: {'cebolla'}</span>\r\n                    </pre></div>\r\n                </li>\r\n                <li>\r\n                    <strong><code>.discard(elemento)</code>:</strong> Elimina un elemento. Si no existe, **no hace nada** (es más seguro que `remove`).\r\n                     <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">ingredientes</span> = {<span class=\"highlight\">\"tomate\"</span>, <span class=\"highlight\">\"cebolla\"</span>}\r\n<span class=\"variable\">ingredientes</span>.<span class=\"function\">discard</span>(<span class=\"highlight\">\"pimiento\"</span>) <span class=\"comment\"># \"pimiento\" no existe, pero no da error</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">ingredientes</span>) <span class=\"comment\"># Salida: {'cebolla', 'tomate'}</span>\r\n                    </pre></div>\r\n                </li>\r\n                 <li>\r\n                    <strong><code>.pop()</code>:</strong> Elimina y retorna un elemento aleatorio del conjunto (ya que no tienen orden).\r\n                     <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">tags</span> = {<span class=\"highlight\">\"python\"</span>, <span class=\"highlight\">\"web\"</span>, <span class=\"highlight\">\"dev\"</span>}\r\n<span class=\"variable\">tag_eliminado</span> = <span class=\"variable\">tags</span>.<span class=\"function\">pop</span>()\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Tag eliminado: {tag_eliminado}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Tags restantes: {tags}\"</span>)\r\n                    </pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 3: Operaciones de Conjuntos</h2>\r\n        <div class=\"concept-card\">\r\n            <h3>Operaciones Lógicas entre Conjuntos</h3>\r\n            <ul>\r\n                <li>\r\n                    <strong>Unión (<code>|</code> o <code>.union()</code>):</strong> Combina dos sets, devolviendo un nuevo set con todos los elementos únicos de ambos.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">set_a</span> = {<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>}; <span class=\"variable\">set_b</span> = {<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>}\r\n<span class=\"variable\">union</span> = <span class=\"variable\">set_a</span> | <span class=\"variable\">set_b</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">union</span>) <span class=\"comment\"># Salida: {1, 2, 3, 4, 5}</span>\r\n                    </pre></div>\r\n                </li>\r\n                <li>\r\n                    <strong>Intersección (<code>&</code> o <code>.intersection()</code>):</strong> Devuelve un nuevo set solo con los elementos que están presentes en ambos sets.\r\n                    <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">set_a</span> = {<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>}; <span class=\"variable\">set_b</span> = {<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>}\r\n<span class=\"variable\">interseccion</span> = <span class=\"variable\">set_a</span> & <span class=\"variable\">set_b</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">interseccion</span>) <span class=\"comment\"># Salida: {3}</span>\r\n                    </pre></div>\r\n                </li>\r\n                <li>\r\n                    <strong>Diferencia (<code>-</code> o <code>.difference()</code>):</strong> Devuelve un nuevo set con los elementos que están en el primer set pero no en el segundo.\r\n                     <div class=\"code-block inline-example\"><pre>\r\n<span class=\"variable\">set_a</span> = {<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>}; <span class=\"variable\">set_b</span> = {<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>}\r\n<span class=\"variable\">diferencia</span> = <span class=\"variable\">set_a</span> - <span class=\"variable\">set_b</span>\r\n<span class=\"function\">print</span>(<span class=\"variable\">diferencia</span>) <span class=\"comment\"># Salida: {1, 2}</span>\r\n                    </pre></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Ejemplo Integrador: Análisis de Habilidades de Equipos</h2>\r\n        <p>Este script utiliza conjuntos para gestionar las habilidades de dos equipos de trabajo y realiza un análisis completo usando operaciones de conjuntos.</p>\r\n        <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># 1. Definimos las habilidades de cada equipo como conjuntos</span>\r\n<span class=\"variable\">habilidades_equipo_A</span> = {<span class=\"highlight\">\"Python\"</span>, <span class=\"highlight\">\"SQL\"</span>, <span class=\"highlight\">\"Git\"</span>, <span class=\"highlight\">\"Docker\"</span>}\r\n<span class=\"variable\">habilidades_equipo_B</span> = {<span class=\"highlight\">\"JavaScript\"</span>, <span class=\"highlight\">\"HTML/CSS\"</span>, <span class=\"highlight\">\"Git\"</span>, <span class=\"highlight\">\"Docker\"</span>}\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Análisis de Habilidades de Equipos ---\"</span>)\r\n\r\n<span class=\"comment\"># 2. Se une un nuevo miembro al Equipo A</span>\r\n<span class=\"variable\">habilidades_equipo_A</span>.<span class=\"function\">add</span>(<span class=\"highlight\">\"React\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Equipo A (actualizado): {habilidades_equipo_A}\"</span>)\r\n\r\n<span class=\"comment\"># 3. 'SQL' ya no es un requisito para el Equipo B, lo eliminamos de forma segura</span>\r\n<span class=\"variable\">habilidades_equipo_B</span>.<span class=\"function\">discard</span>(<span class=\"highlight\">\"SQL\"</span>)\r\n\r\n<span class=\"comment\"># 4. Realizamos operaciones de conjuntos para el análisis</span>\r\n<span class=\"variable\">habilidades_comunes</span> = <span class=\"variable\">habilidades_equipo_A</span> & <span class=\"variable\">habilidades_equipo_B</span>\r\n<span class=\"variable\">todas_las_habilidades</span> = <span class=\"variable\">habilidades_equipo_A</span> | <span class=\"variable\">habilidades_equipo_B</span>\r\n<span class=\"variable\">habilidades_solo_A</span> = <span class=\"variable\">habilidades_equipo_A</span> - <span class=\"variable\">habilidades_equipo_B</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"\\nHabilidades en común (intersección): {habilidades_comunes}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Conjunto total de habilidades en la empresa (unión): {todas_las_habilidades}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Habilidades que solo posee el Equipo A (diferencia): {habilidades_solo_A}\"</span>)\r\n        </pre></div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 4 (Módulo 2)</h3>\r\n\r\n            <h4>Ejercicio 1: Gestión de Ingredientes Únicos</h4>\r\n            <p><strong>Objetivo:</strong> Usar un conjunto para gestionar una lista de ingredientes de una receta, asegurando que no haya duplicados.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `04_receta.py`.</li>\r\n                <li>Crea una lista `ingredientes_receta` que contenga algunos ingredientes duplicados.</li>\r\n                <li>Convierte esta lista a un conjunto `ingredientes_unicos` para eliminar los duplicados.</li>\r\n                <li>Añade un nuevo ingrediente al conjunto usando `.add()`.</li>\r\n                <li>Elimina un ingrediente que sabes que existe usando `.remove()`.</li>\r\n                <li>Intenta eliminar un ingrediente que no existe usando `.discard()`.</li>\r\n                <li>Imprime el conjunto final de ingredientes únicos.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM2L4-1')\">Ver Solución</span>\r\n            <div id=\"solucionM2L4-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">ingredientes_receta</span> = [<span class=\"highlight\">\"tomate\"</span>, <span class=\"highlight\">\"cebolla\"</span>, <span class=\"highlight\">\"ajo\"</span>, <span class=\"highlight\">\"tomate\"</span>, <span class=\"highlight\">\"aceite\"</span>]\r\n<span class=\"variable\">ingredientes_unicos</span> = <span class=\"function\">set</span>(<span class=\"variable\">ingredientes_receta</span>)\r\n<span class=\"variable\">ingredientes_unicos</span>.<span class=\"function\">add</span>(<span class=\"highlight\">\"sal\"</span>)\r\n<span class=\"variable\">ingredientes_unicos</span>.<span class=\"function\">remove</span>(<span class=\"highlight\">\"cebolla\"</span>)\r\n<span class=\"variable\">ingredientes_unicos</span>.<span class=\"function\">discard</span>(<span class=\"highlight\">\"pimienta\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Ingredientes finales de la receta: {ingredientes_unicos}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 4 (Módulo 2)</h3>\r\n\r\n            <h4>Ejercicio 1: Gestión de Ingredientes Únicos</h4>\r\n            <p><strong>Objetivo:</strong> Usar un conjunto para gestionar una lista de ingredientes de una receta, asegurando que no haya duplicados.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `04_receta.py`.</li>\r\n                <li>Crea una lista `ingredientes_receta` que contenga algunos ingredientes duplicados.</li>\r\n                <li>Convierte esta lista a un conjunto `ingredientes_unicos` para eliminar los duplicados.</li>\r\n                <li>Añade un nuevo ingrediente al conjunto usando `.add()`.</li>\r\n                <li>Elimina un ingrediente que sabes que existe usando `.remove()`.</li>\r\n                <li>Intenta eliminar un ingrediente que no existe usando `.discard()`.</li>\r\n                <li>Imprime el conjunto final de ingredientes únicos.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM2L4-1')\">Ver Solución</span>\r\n            <div id=\"solucionM2L4-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">ingredientes_receta</span> = [<span class=\"highlight\">\"tomate\"</span>, <span class=\"highlight\">\"cebolla\"</span>, <span class=\"highlight\">\"ajo\"</span>, <span class=\"highlight\">\"tomate\"</span>, <span class=\"highlight\">\"aceite\"</span>]\r\n<span class=\"variable\">ingredientes_unicos</span> = <span class=\"function\">set</span>(<span class=\"variable\">ingredientes_receta</span>)\r\n<span class=\"variable\">ingredientes_unicos</span>.<span class=\"function\">add</span>(<span class=\"highlight\">\"sal\"</span>)\r\n<span class=\"variable\">ingredientes_unicos</span>.<span class=\"function\">remove</span>(<span class=\"highlight\">\"cebolla\"</span>)\r\n<span class=\"variable\">ingredientes_unicos</span>.<span class=\"function\">discard</span>(<span class=\"highlight\">\"pimienta\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Ingredientes finales de la receta: {ingredientes_unicos}\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 4, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 10, "fields": {"modulo": 3, "titulo": "Clases y objetos", "descripcion": "", "contenido_html": "<h1>Lección 1: Clases y Objetos</h1>\r\n<p class=\"lesson-intro\">\r\n    Bienvenido a la <strong>Programación Orientada a Objetos (POO)</strong>. Este es un paradigma que nos permite estructurar nuestro código de una manera que imita el mundo real. En lugar de tener datos y funciones por separado, la POO los agrupa en \"objetos\" que tienen tanto datos (<strong>atributos</strong>) como comportamientos (<strong>métodos</strong>).\r\n</p>\r\n<hr>\r\n<h2>Tema 1: El Plano y la Construcción (Clases y Objetos)</h2>\r\n<p>La mejor forma de entender la POO es con una analogía del mundo real:</p>\r\n<ul>\r\n    <li><strong>Clase:</strong> Es el <strong>plano arquitectónico</strong> de una casa. No es la casa en sí, sino el diseño que define sus características (número de habitaciones, color) y sus funcionalidades (abrir puertas, encender luces).</li>\r\n    <li><strong>Objeto:</strong> Es la <strong>casa real y tangible</strong> que construyes a partir de ese plano. Puedes construir múltiples casas (objetos) a partir del mismo plano (clase), y cada una será una instancia independiente.</li>\r\n</ul>\r\n<div class=\"concept-card\">\r\n    <h3>Definición de una Clase en Python</h3>\r\n    <p>Se usa la palabra clave <code>class</code> para definir el \"plano\". Dentro de la clase, definimos sus atributos y métodos.</p>\r\n    <ul>\r\n        <li><strong>El constructor <code>__init__(self, ...)</code>:</strong> Es un método especial que se ejecuta automáticamente al crear un nuevo objeto. Su trabajo es \"construir\" el objeto, asignando los valores iniciales a sus atributos.</li>\r\n        <li><strong>El parámetro <code>self</code>:</strong> Se refiere a la instancia específica (al objeto) que se está creando. Se usa para acceder a los atributos y métodos de ese objeto. Por ejemplo, <code>self.marca</code> se refiere a la marca <em>de este objeto en particular</em>.</li>\r\n    </ul>\r\n    <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># 1. Definición de la Clase (el plano)</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Coche</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(<span class=\"variable\">self</span>, <span class=\"variable\">marca</span>, <span class=\"variable\">modelo</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">marca</span> = <span class=\"variable\">marca</span>      <span class=\"comment\"># Atributo de instancia</span>\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">modelo</span> = <span class=\"variable\">modelo</span>     <span class=\"comment\"># Atributo de instancia</span>\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">encendido</span> = <span class=\"boolean\">False</span> <span class=\"comment\"># Atributo con valor inicial fijo</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">arrancar</span>(<span class=\"variable\">self</span>): <span class=\"comment\"># Método de instancia</span>\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">encendido</span> = <span class=\"boolean\">True</span>\r\n        <span class=\"keyword\">return</span> <span class=\"string\">\"El coche ha arrancado.\"</span>\r\n<span class=\"comment\"># 2. Creación de Objetos (las casas construidas)</span>\r\n<span class=\"variable\">mi_coche</span> = <span class=\"variable\">Coche</span>(<span class=\"string\">\"Toyota\"</span>, <span class=\"string\">\"Corolla\"</span>)\r\n<span class=\"variable\">coche_de_ana</span> = <span class=\"variable\">Coche</span>(<span class=\"string\">\"Ford\"</span>, <span class=\"string\">\"Fiesta\"</span>)\r\n<span class=\"comment\"># 3. Uso de los objetos</span>\r\n<span class=\"function\">print</span>(<span class=\"string\">f\"Mi coche es un {mi_coche.marca} {mi_coche.modelo}.\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">mi_coche</span>.<span class=\"function\">arrancar</span>())\r\n<span class=\"comment\"># Salida Esperada en la Consola:</span>\r\n<span class=\"highlight\">Mi coche es un Toyota Corolla.</span>\r\n<span class=\"highlight\">El coche ha arrancado.</span>\r\n    </pre></div>\r\n</div>\r\n<hr>\r\n<div class=\"exercise\">\r\n    <h3>🚀 Ejercicio: Modelando un Estudiante</h3>\r\n    <p><strong>Objetivo:</strong> Crear una clase para representar a un estudiante, con sus atributos y un método para mostrar su información.</p>\r\n    <p><strong>Instrucciones:</strong></p>\r\n    <ol>\r\n        <li>Define una clase llamada <code><span class=\"variable\">Estudiante</span></code>.</li>\r\n        <li>En el constructor <code><span class=\"function\">__init__</span></code>, la clase debe aceptar dos parámetros: <code><span class=\"variable\">nombre</span></code> y <code><span class=\"variable\">edad</span></code>, y guardarlos como atributos.</li>\r\n        <li>Añade un atributo de instancia llamado <code><span class=\"variable\">cursos</span></code>, que debe ser una lista vacía <code><span class=\"string\">[]</span></code>.</li>\r\n        <li>Crea un método llamado <code><span class=\"function\">agregar_curso</span>(<span class=\"variable\">nombre_curso</span>)</code> que añada un curso a la lista <code><span class=\"variable\">cursos</span></code> del estudiante.</li>\r\n        <li>Crea un método llamado <code><span class=\"function\">mostrar_info</span>()</code> que imprima el nombre, la edad y la lista de cursos del estudiante de forma formateada.</li>\r\n        <li>Crea una instancia de <code><span class=\"variable\">Estudiante</span></code>, agrega dos cursos y luego llama a <code><span class=\"function\">mostrar_info</span>()</code>.</li>\r\n    </ol>\r\n    <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion1')\">Ver Solución</span>\r\n    <div id=\"solucion1\" class=\"exercise-solution\">\r\n        <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Estudiante</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(<span class=\"variable\">self</span>, <span class=\"variable\">nombre</span>, <span class=\"variable\">edad</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">nombre</span> = <span class=\"variable\">nombre</span>\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">edad</span> = <span class=\"variable\">edad</span>\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">cursos</span> = []\r\n    \r\n    <span class=\"keyword\">def</span> <span class=\"function\">agregar_curso</span>(<span class=\"variable\">self</span>, <span class=\"variable\">nombre_curso</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">cursos</span>.<span class=\"function\">append</span>(<span class=\"variable\">nombre_curso</span>)\r\n        <span class=\"function\">print</span>(<span class=\"string\">f\"Curso '{nombre_curso}' añadido.\"</span>)\r\n\r\n    <span class=\"keyword\">def</span> <span class=\"function\">mostrar_info</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"string\">\"--- Ficha del Estudiante ---\"</span>)\r\n        <span class=\"function\">print</span>(<span class=\"string\">f\"Nombre: {self.nombre}\"</span>)\r\n        <span class=\"function\">print</span>(<span class=\"string\">f\"Edad: {self.edad}\"</span>)\r\n        <span class=\"function\">print</span>(<span class=\"string\">f\"Cursos: {self.cursos}\"</span>)\r\n\r\n<span class=\"comment\"># Probando la clase</span>\r\n<span class=\"variable\">estudiante1</span> = <span class=\"variable\">Estudiante</span>(<span class=\"string\">\"Laura\"</span>, <span class=\"number\">22</span>)\r\n<span class=\"variable\">estudiante1</span>.<span class=\"function\">agregar_curso</span>(<span class=\"string\">\"Matemáticas\"</span>)\r\n<span class=\"variable\">estudiante1</span>.<span class=\"function\">agregar_curso</span>(<span class=\"string\">\"Historia\"</span>)\r\n<span class=\"variable\">estudiante1</span>.<span class=\"function\">mostrar_info</span>()\r\n        </pre></div>\r\n    </div>\r\n</div>\r\n<script>\r\nfunction toggleSolution(id) {\r\n    var solution = document.getElementById(id);\r\n    if (solution.style.display === \"none\" || solution.style.display === \"\") {\r\n        solution.style.display = \"block\";\r\n    } else {\r\n        solution.style.display = \"none\";\r\n    }\r\n}", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Modelando un Estudiante</h3>\r\n    <p><strong>Objetivo:</strong> Crear una clase para representar a un estudiante, con sus atributos y un método para mostrar su información.</p>\r\n    <p><strong>Instrucciones:</strong></p>\r\n    <ol>\r\n        <li>Define una clase llamada <code><span class=\"variable\">Estudiante</span></code>.</li>\r\n        <li>En el constructor <code><span class=\"function\">__init__</span></code>, la clase debe aceptar dos parámetros: <code><span class=\"variable\">nombre</span></code> y <code><span class=\"variable\">edad</span></code>, y guardarlos como atributos.</li>\r\n        <li>Añade un atributo de instancia llamado <code><span class=\"variable\">cursos</span></code>, que debe ser una lista vacía <code><span class=\"string\">[]</span></code>.</li>\r\n        <li>Crea un método llamado <code><span class=\"function\">agregar_curso</span>(<span class=\"variable\">nombre_curso</span>)</code> que añada un curso a la lista <code><span class=\"variable\">cursos</span></code> del estudiante.</li>\r\n        <li>Crea un método llamado <code><span class=\"function\">mostrar_info</span>()</code> que imprima el nombre, la edad y la lista de cursos del estudiante de forma formateada.</li>\r\n        <li>Crea una instancia de <code><span class=\"variable\">Estudiante</span></code>, agrega dos cursos y luego llama a <code><span class=\"function\">mostrar_info</span>()</code>.</li>\r\n    </ol>\r\n    <span class=\"solution-toggle\" onclick=\"toggleSolution('solucion1')\">Ver Solución</span>\r\n    <div id=\"solucion1\" class=\"exercise-solution\">\r\n        <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Estudiante</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(<span class=\"variable\">self</span>, <span class=\"variable\">nombre</span>, <span class=\"variable\">edad</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">nombre</span> = <span class=\"variable\">nombre</span>\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">edad</span> = <span class=\"variable\">edad</span>\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">cursos</span> = []\r\n    \r\n    <span class=\"keyword\">def</span> <span class=\"function\">agregar_curso</span>(<span class=\"variable\">self</span>, <span class=\"variable\">nombre_curso</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">cursos</span>.<span class=\"function\">append</span>(<span class=\"variable\">nombre_curso</span>)\r\n        <span class=\"function\">print</span>(<span class=\"string\">f\"Curso '{nombre_curso}' añadido.\"</span>)\r\n\r\n    <span class=\"keyword\">def</span> <span class=\"function\">mostrar_info</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"string\">\"--- Ficha del Estudiante ---\"</span>)\r\n        <span class=\"function\">print</span>(<span class=\"string\">f\"Nombre: {self.nombre}\"</span>)\r\n        <span class=\"function\">print</span>(<span class=\"string\">f\"Edad: {self.edad}\"</span>)\r\n        <span class=\"function\">print</span>(<span class=\"string\">f\"Cursos: {self.cursos}\"</span>)\r\n\r\n<span class=\"comment\"># Probando la clase</span>\r\n<span class=\"variable\">estudiante1</span> = <span class=\"variable\">Estudiante</span>(<span class=\"string\">\"Laura\"</span>, <span class=\"number\">22</span>)\r\n<span class=\"variable\">estudiante1</span>.<span class=\"function\">agregar_curso</span>(<span class=\"string\">\"Matemáticas\"</span>)\r\n<span class=\"variable\">estudiante1</span>.<span class=\"function\">agregar_curso</span>(<span class=\"string\">\"Historia\"</span>)\r\n<span class=\"variable\">estudiante1</span>.<span class=\"function\">mostrar_info</span>()\r\n        </pre></div>\r\n    </div>", "puntos_xp": 10, "orden": 1, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 11, "fields": {"modulo": 3, "titulo": "Herencia", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 3, Lección 2: Herencia - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 2: Herencia</h1>\r\n        <p class=\"lesson-intro\">\r\n            La **herencia** es un pilar fundamental de la POO que nos permite crear nuevas clases a partir de otras existentes. Es un mecanismo para **reutilizar código** y crear una jerarquía lógica entre clases, basándose en la relación \"es un tipo de\". Por ejemplo, un `Perro` es un tipo de `Animal`.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Conceptos Fundamentales de la Herencia</h2>\r\n        <p>La herencia permite que una clase hija (subclase) adquiera los atributos y métodos de una clase padre (superclase). La clase hija puede, a su vez, añadir nueva funcionalidad o modificar la heredada.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica / Las 5 Cuestionantes de la Herencia</h3>\r\n            \r\n            <h4>¿Para qué sirve? (El Propósito)</h4>\r\n            <p>Su función principal es permitir la **reutilización de código**. En lugar de reescribir la misma lógica en múltiples clases, se define una vez en una clase padre. Esto organiza el código en jerarquías lógicas, haciéndolo más modular y fácil de mantener.</p>\r\n\r\n            <h4>¿Cómo funciona? (La Sintaxis)</h4>\r\n            <p>Se define una nueva clase y se especifica el nombre de la clase padre entre paréntesis. Para asegurar que la clase hija inicialice correctamente los atributos del padre, se utiliza la función <strong><code>super()</code></strong>.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Clase Padre</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Animal</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(<span class=\"variable\">self</span>, <span class=\"variable\">nombre</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">nombre</span> = <span class=\"variable\">nombre</span>\r\n    \r\n    <span class=\"keyword\">def</span> <span class=\"function\">hacer_sonido</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"keyword\">return</span> <span class=\"highlight\">\"Este animal no hace un sonido específico.\"</span>\r\n\r\n<span class=\"comment\"># Clase Hija que hereda de Animal</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Perro</span>(<span class=\"variable\">Animal</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(<span class=\"variable\">self</span>, <span class=\"variable\">nombre</span>, <span class=\"variable\">raza</span>):\r\n        <span class=\"function\">super</span>().__<span class=\"function\">init__</span>(<span class=\"variable\">nombre</span>) <span class=\"comment\"># Llama al constructor del padre</span>\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">raza</span> = <span class=\"variable\">raza</span>\r\n    \r\n    <span class=\"comment\"># Sobrescribimos el método del padre</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">hacer_sonido</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"keyword\">return</span> <span class=\"highlight\">\"¡Guau!\"</span>\r\n\r\n<span class=\"variable\">mi_perro</span> = <span class=\"variable\">Perro</span>(<span class=\"highlight\">\"Fido\"</span>, <span class=\"highlight\">\"Labrador\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"{mi_perro.nombre} es un {mi_perro.raza} y dice: {mi_perro.hacer_sonido()}\"</span>)\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 2: Tipos de Herencia en Python</h2>\r\n        <p>Python soporta varios tipos de herencia, lo que le da una gran flexibilidad para modelar diferentes tipos de relaciones.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>1. Herencia Única (Simple)</h3>\r\n            <p>Una clase hija hereda de una única clase padre. Es el tipo de herencia más común y el que vimos en el ejemplo anterior.</p>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>2. Herencia Múltiple</h3>\r\n            <p>Una clase hija puede heredar de varias clases padre, combinando sus funcionalidades.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Vuela</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">volar</span>(<span class=\"variable\">self</span>): <span class=\"keyword\">return</span> <span class=\"highlight\">\"Estoy volando.\"</span>\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Nada</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">nadar</span>(<span class=\"variable\">self</span>): <span class=\"keyword\">return</span> <span class=\"highlight\">\"Estoy nadando.\"</span>\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Pato</span>(<span class=\"variable\">Vuela</span>, <span class=\"variable\">Nada</span>): <span class=\"comment\"># Hereda de dos clases</span>\r\n    <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"variable\">pato</span> = <span class=\"variable\">Pato</span>()\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"El pato dice: {pato.volar()} y {pato.nadar()}\"</span>)\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>3. Herencia Multinivel</h3>\r\n            <p>Se crea una cadena de herencia, donde una clase hereda de una clase hija. Se parece a la relación abuelo-padre-hijo.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Abuelo</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">habilidad_abuelo</span>(<span class=\"variable\">self</span>): <span class=\"keyword\">return</span> <span class=\"highlight\">\"Tengo mucha experiencia.\"</span>\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Padre</span>(<span class=\"variable\">Abuelo</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">habilidad_padre</span>(<span class=\"variable\">self</span>): <span class=\"keyword\">return</span> <span class=\"highlight\">\"Tengo fuerza.\"</span>\r\n    \r\n<span class=\"keyword\">class</span> <span class=\"variable\">Hijo</span>(<span class=\"variable\">Padre</span>):\r\n    <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"variable\">nieto</span> = <span class=\"variable\">Hijo</span>()\r\n<span class=\"function\">print</span>(nieto.<span class=\"function\">habilidad_abuelo</span>()) <span class=\"comment\"># Hereda del Abuelo</span>\r\n<span class=\"function\">print</span>(nieto.<span class=\"function\">habilidad_padre</span>()) <span class=\"comment\"># Hereda del Padre</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>4. Herencia Jerárquica</h3>\r\n            <p>Múltiples clases hijas heredan de una única clase padre.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Figura</span>: <span class=\"comment\"># Padre único</span>\r\n    <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Circulo</span>(<span class=\"variable\">Figura</span>): <span class=\"comment\"># Hija 1</span>\r\n    <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Cuadrado</span>(<span class=\"variable\">Figura</span>): <span class=\"comment\"># Hija 2</span>\r\n    <span class=\"keyword\">pass</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicio: Creando una Jerarquía de Vehículos</h3>\r\n            <p><strong>Objetivo:</strong> Aplicar los diferentes tipos de herencia para modelar una jerarquía de vehículos, demostrando la reutilización de código y la especialización de clases.</p>\r\n            <p><strong>Instrucciones Progresivas:</strong></p>\r\n            <ol>\r\n                <li><strong>Herencia Simple:</strong>\r\n                    <ul>\r\n                        <li>Crea una clase base `Vehiculo` con un método `__init__` que acepte `marca` y un método `moverse()` que imprima \"El vehículo se está moviendo.\".</li>\r\n                        <li>Crea una clase `Coche` que herede de `Vehiculo`.</li>\r\n                    </ul>\r\n                </li>\r\n                <li><strong>Herencia Multinivel:</strong>\r\n                    <ul>\r\n                        <li>Crea una clase `CocheDeportivo` que herede de `Coche`.</li>\r\n                        <li>Añádele un método `acelerar_rapido()` que imprima \"¡Acelerando a máxima velocidad!\".</li>\r\n                    </ul>\r\n                </li>\r\n                <li><strong>Herencia Jerárquica:</strong>\r\n                    <ul>\r\n                        <li>Crea otra clase `Camion` que también herede de `Vehiculo`.</li>\r\n                        <li>Añádele un método `cargar_mercancia()` que imprima \"Cargando mercancía pesada.\".</li>\r\n                    </ul>\r\n                </li>\r\n                 <li><strong>Herencia Múltiple:</strong>\r\n                    <ul>\r\n                        <li>Crea una clase `Radio` con un método `reproducir_musica()`.</li>\r\n                        <li>Crea una clase final `CocheConMusica` que herede de `Coche` y de `Radio`.</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Crea una instancia de `CocheConMusica` y prueba que puede usar métodos de `Vehiculo` (`moverse`), `Coche` (ninguno propio en este caso), y `Radio` (`reproducir_musica`).</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM3L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM3L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Vehiculo</span>: <span class=\"comment\"># Clase Base</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(<span class=\"variable\">self</span>, <span class=\"variable\">marca</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">marca</span> = <span class=\"variable\">marca</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">moverse</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"El vehículo se está moviendo.\"</span>)\r\n\r\n<span class=\"comment\"># Herencia Simple</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Coche</span>(<span class=\"variable\">Vehiculo</span>):\r\n    <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"comment\"># Herencia Multinivel</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">CocheDeportivo</span>(<span class=\"variable\">Coche</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">acelerar_rapido</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"¡Acelerando a máxima velocidad!\"</span>)\r\n\r\n<span class=\"comment\"># Herencia Jerárquica (Camion también hereda de Vehiculo)</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Camion</span>(<span class=\"variable\">Vehiculo</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">cargar_mercancia</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"Cargando mercancía pesada.\"</span>)\r\n        \r\n<span class=\"keyword\">class</span> <span class=\"variable\">Radio</span>: <span class=\"comment\"># Otra clase base para herencia múltiple</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">reproducir_musica</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"Reproduciendo música...\"</span>)\r\n\r\n<span class=\"comment\"># Herencia Múltiple</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">CocheConMusica</span>(<span class=\"variable\">Coche</span>, <span class=\"variable\">Radio</span>):\r\n    <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"comment\"># Prueba final</span>\r\n<span class=\"variable\">mi_auto_completo</span> = <span class=\"variable\">CocheConMusica</span>(<span class=\"highlight\">\"Audi\"</span>)\r\n<span class=\"variable\">mi_auto_completo</span>.<span class=\"function\">moverse</span>() <span class=\"comment\"># Heredado de Vehiculo</span>\r\n<span class=\"variable\">mi_auto_completo</span>.<span class=\"function\">reproducir_musica</span>() <span class=\"comment\"># Heredado de Radio</span>\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Creando una Jerarquía de Vehículos</h3>\r\n            <p><strong>Objetivo:</strong> Aplicar los diferentes tipos de herencia para modelar una jerarquía de vehículos, demostrando la reutilización de código y la especialización de clases.</p>\r\n            <p><strong>Instrucciones Progresivas:</strong></p>\r\n            <ol>\r\n                <li><strong>Herencia Simple:</strong>\r\n                    <ul>\r\n                        <li>Crea una clase base `Vehiculo` con un método `__init__` que acepte `marca` y un método `moverse()` que imprima \"El vehículo se está moviendo.\".</li>\r\n                        <li>Crea una clase `Coche` que herede de `Vehiculo`.</li>\r\n                    </ul>\r\n                </li>\r\n                <li><strong>Herencia Multinivel:</strong>\r\n                    <ul>\r\n                        <li>Crea una clase `CocheDeportivo` que herede de `Coche`.</li>\r\n                        <li>Añádele un método `acelerar_rapido()` que imprima \"¡Acelerando a máxima velocidad!\".</li>\r\n                    </ul>\r\n                </li>\r\n                <li><strong>Herencia Jerárquica:</strong>\r\n                    <ul>\r\n                        <li>Crea otra clase `Camion` que también herede de `Vehiculo`.</li>\r\n                        <li>Añádele un método `cargar_mercancia()` que imprima \"Cargando mercancía pesada.\".</li>\r\n                    </ul>\r\n                </li>\r\n                 <li><strong>Herencia Múltiple:</strong>\r\n                    <ul>\r\n                        <li>Crea una clase `Radio` con un método `reproducir_musica()`.</li>\r\n                        <li>Crea una clase final `CocheConMusica` que herede de `Coche` y de `Radio`.</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Crea una instancia de `CocheConMusica` y prueba que puede usar métodos de `Vehiculo` (`moverse`), `Coche` (ninguno propio en este caso), y `Radio` (`reproducir_musica`).</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM3L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM3L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Vehiculo</span>: <span class=\"comment\"># Clase Base</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(<span class=\"variable\">self</span>, <span class=\"variable\">marca</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">marca</span> = <span class=\"variable\">marca</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">moverse</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"El vehículo se está moviendo.\"</span>)\r\n\r\n<span class=\"comment\"># Herencia Simple</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Coche</span>(<span class=\"variable\">Vehiculo</span>):\r\n    <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"comment\"># Herencia Multinivel</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">CocheDeportivo</span>(<span class=\"variable\">Coche</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">acelerar_rapido</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"¡Acelerando a máxima velocidad!\"</span>)\r\n\r\n<span class=\"comment\"># Herencia Jerárquica (Camion también hereda de Vehiculo)</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Camion</span>(<span class=\"variable\">Vehiculo</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">cargar_mercancia</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"Cargando mercancía pesada.\"</span>)\r\n        \r\n<span class=\"keyword\">class</span> <span class=\"variable\">Radio</span>: <span class=\"comment\"># Otra clase base para herencia múltiple</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">reproducir_musica</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"Reproduciendo música...\"</span>)\r\n\r\n<span class=\"comment\"># Herencia Múltiple</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">CocheConMusica</span>(<span class=\"variable\">Coche</span>, <span class=\"variable\">Radio</span>):\r\n    <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"comment\"># Prueba final</span>\r\n<span class=\"variable\">mi_auto_completo</span> = <span class=\"variable\">CocheConMusica</span>(<span class=\"highlight\">\"Audi\"</span>)\r\n<span class=\"variable\">mi_auto_completo</span>.<span class=\"function\">moverse</span>() <span class=\"comment\"># Heredado de Vehiculo</span>\r\n<span class=\"variable\">mi_auto_completo</span>.<span class=\"function\">reproducir_musica</span>() <span class=\"comment\"># Heredado de Radio</span>\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 2, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 12, "fields": {"modulo": 3, "titulo": "Polimorfismo", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 3, Lección 3: Polimorfismo - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 3: Polimorfismo</h1>\r\n        <p class=\"lesson-intro\">\r\n            El **polimorfismo**, que literalmente significa \"muchas formas\", es uno de los conceptos más poderosos de la POO. Se refiere a la capacidad de objetos de diferentes clases de responder al mismo mensaje (la misma llamada de método) de maneras específicas para cada uno. Esto nos permite escribir código más genérico y flexible.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: El Principio de Polimorfismo</h2>\r\n        <p>La analogía más clara para el polimorfismo es un **puerto USB**. No importa qué dispositivo conectes (un ratón, un teclado, un pendrive), tu computadora sabe cómo interactuar con él a través de la misma interfaz (el puerto). Cada dispositivo responde al comando \"transferir datos\" a su manera, pero la forma de llamarlo es siempre la misma. En POO, una función puede recibir diferentes tipos de objetos y llamar al mismo método en ellos, confiando en que cada objeto sabrá cómo ejecutarlo correctamente.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica / Las 5 Cuestionantes del Polimorfismo</h3>\r\n            \r\n            <h4>¿Para qué sirve? (El Propósito)</h4>\r\n            <p>Para escribir código que no dependa de tipos de objetos específicos. Permite crear funciones y métodos genéricos que pueden trabajar con una variedad de objetos diferentes, siempre y cuando compartan una interfaz común (es decir, tengan métodos con el mismo nombre).</p>\r\n\r\n            <h4>¿Qué hace? (El Concepto)</h4>\r\n            <p>Permite que una única interfaz (como una función o un método) trate a objetos de diferentes clases de manera uniforme. Al llamar a un método como `objeto.moverse()`, Python ejecutará la versión de `moverse()` que corresponda a la clase del `objeto` en ese momento.</p>\r\n\r\n            <h4>¿Cómo se emplea? (La Sintaxis)</h4>\r\n            <p>El polimorfismo no requiere una sintaxis especial, sino una estructura de diseño. Generalmente se logra a través de la **herencia** y la **sobrescritura de métodos**. Creas una clase padre con un método, y las clases hijas lo sobrescriben con su propia implementación.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Gato</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">hacer_sonido</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"keyword\">return</span> <span class=\"highlight\">\"¡Miau!\"</span>\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Perro</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">hacer_sonido</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"keyword\">return</span> <span class=\"highlight\">\"¡Guau!\"</span>\r\n\r\n<span class=\"comment\"># Esta función es polimórfica: no le importa si el animal es un Perro o un Gato</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">sonido_animal</span>(<span class=\"variable\">animal</span>):\r\n    <span class=\"function\">print</span>(<span class=\"variable\">animal</span>.<span class=\"function\">hacer_sonido</span>())\r\n\r\n<span class=\"variable\">gato</span> = <span class=\"variable\">Gato</span>()\r\n<span class=\"variable\">perro</span> = <span class=\"variable\">Perro</span>()\r\n\r\n<span class=\"function\">sonido_animal</span>(<span class=\"variable\">gato</span>)  <span class=\"comment\"># Llama a Gato.hacer_sonido()</span>\r\n<span class=\"function\">sonido_animal</span>(<span class=\"variable\">perro</span>) <span class=\"comment\"># Llama a Perro.hacer_sonido()</span>\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">¡Miau!</span>\r\n<span class=\"highlight\">¡Guau!</span>\r\n            </pre></div>\r\n\r\n            <h4>¿Dónde se emplea? (Casos de Uso Reales)</h4>\r\n            <p>En cualquier sistema donde se procesan colecciones de objetos heterogéneos. Por ejemplo, en un videojuego, una función `renderizar()` puede recorrer una lista de todos los objetos en pantalla (`[jugador, enemigo, item, proyectil]`) y llamar a `objeto.dibujar()` en cada uno. Cada objeto sabrá cómo dibujarse a sí mismo.</p>\r\n\r\n            <h4>¿Por qué se emplea? (Las Ventajas)</h4>\r\n            <p>Reduce drásticamente la necesidad de usar condicionales `if/elif/else` para comprobar el tipo de un objeto. Esto hace el código más limpio, más fácil de mantener y, sobre todo, más **extensible**: si en el futuro creas una nueva clase `Vaca`, no necesitas modificar la función `sonido_animal`; simplemente te aseguras de que la clase `Vaca` tenga un método `hacer_sonido()` y funcionará automáticamente.</p>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicio: Sistema de Notificaciones</h3>\r\n            <p><strong>Objetivo:</strong> Crear un sistema polimórfico que pueda enviar diferentes tipos de notificaciones (Email, SMS, Push) a través de una única función.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_notificaciones.py`.</li>\r\n                <li>Define tres clases: `NotificacionEmail`, `NotificacionSMS` y `NotificacionPush`.</li>\r\n                <li>Cada clase debe tener un método `enviar(mensaje)`. La implementación de este método será diferente para cada clase:\r\n                    <ul>\r\n                        <li>`NotificacionEmail`: Debe imprimir `\"Enviando email: [mensaje]\"`.</li>\r\n                        <li>`NotificacionSMS`: Debe imprimir `\"Enviando SMS: [mensaje]\"`.</li>\r\n                        <li>`NotificacionPush`: Debe imprimir `\"Enviando notificación Push: [mensaje]\"`.</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Crea una función llamada `enviar_notificacion(notificador, mensaje)`, donde `notificador` es un objeto de cualquiera de las clases anteriores. Esta función debe llamar al método `enviar()` del objeto `notificador`.</li>\r\n                <li>Crea una lista de `notificadores` que contenga una instancia de cada una de las tres clases de notificación.</li>\r\n                <li>Usa un bucle `for` para recorrer la lista de `notificadores` y, para cada uno, llama a la función `enviar_notificacion()` pasándole el notificador actual y un mensaje de prueba.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM3L3-1')\">Ver Solución</span>\r\n            <div id=\"solucionM3L3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">NotificacionEmail</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">enviar</span>(<span class=\"variable\">self</span>, <span class=\"variable\">mensaje</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Enviando email: {mensaje}\"</span>)\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">NotificacionSMS</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">enviar</span>(<span class=\"variable\">self</span>, <span class=\"variable\">mensaje</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Enviando SMS: {mensaje}\"</span>)\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">NotificacionPush</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">enviar</span>(<span class=\"variable\">self</span>, <span class=\"variable\">mensaje</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Enviando notificación Push: {mensaje}\"</span>)\r\n\r\n<span class=\"keyword\">def</span> <span class=\"function\">enviar_notificacion</span>(<span class=\"variable\">notificador</span>, <span class=\"variable\">mensaje</span>):\r\n    <span class=\"variable\">notificador</span>.<span class=\"function\">enviar</span>(<span class=\"variable\">mensaje</span>)\r\n\r\n<span class=\"comment\"># Creamos los objetos</span>\r\n<span class=\"variable\">email</span> = <span class=\"variable\">NotificacionEmail</span>()\r\n<span class=\"variable\">sms</span> = <span class=\"variable\">NotificacionSMS</span>()\r\n<span class=\"variable\">push</span> = <span class=\"variable\">NotificacionPush</span>()\r\n\r\n<span class=\"variable\">notificadores</span> = [<span class=\"variable\">email</span>, <span class=\"variable\">sms</span>, <span class=\"variable\">push</span>]\r\n<span class=\"variable\">mensaje_prueba</span> = <span class=\"highlight\">\"Tu pedido ha sido enviado.\"</span>\r\n\r\n<span class=\"keyword\">for</span> <span class=\"variable\">notificador</span> <span class=\"keyword\">in</span> <span class=\"variable\">notificadores</span>:\r\n    <span class=\"function\">enviar_notificacion</span>(<span class=\"variable\">notificador</span>, <span class=\"variable\">mensaje_prueba</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Sistema de Notificaciones</h3>\r\n            <p><strong>Objetivo:</strong> Crear un sistema polimórfico que pueda enviar diferentes tipos de notificaciones (Email, SMS, Push) a través de una única función.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_notificaciones.py`.</li>\r\n                <li>Define tres clases: `NotificacionEmail`, `NotificacionSMS` y `NotificacionPush`.</li>\r\n                <li>Cada clase debe tener un método `enviar(mensaje)`. La implementación de este método será diferente para cada clase:\r\n                    <ul>\r\n                        <li>`NotificacionEmail`: Debe imprimir `\"Enviando email: [mensaje]\"`.</li>\r\n                        <li>`NotificacionSMS`: Debe imprimir `\"Enviando SMS: [mensaje]\"`.</li>\r\n                        <li>`NotificacionPush`: Debe imprimir `\"Enviando notificación Push: [mensaje]\"`.</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Crea una función llamada `enviar_notificacion(notificador, mensaje)`, donde `notificador` es un objeto de cualquiera de las clases anteriores. Esta función debe llamar al método `enviar()` del objeto `notificador`.</li>\r\n                <li>Crea una lista de `notificadores` que contenga una instancia de cada una de las tres clases de notificación.</li>\r\n                <li>Usa un bucle `for` para recorrer la lista de `notificadores` y, para cada uno, llama a la función `enviar_notificacion()` pasándole el notificador actual y un mensaje de prueba.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM3L3-1')\">Ver Solución</span>\r\n            <div id=\"solucionM3L3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">NotificacionEmail</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">enviar</span>(<span class=\"variable\">self</span>, <span class=\"variable\">mensaje</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Enviando email: {mensaje}\"</span>)\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">NotificacionSMS</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">enviar</span>(<span class=\"variable\">self</span>, <span class=\"variable\">mensaje</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Enviando SMS: {mensaje}\"</span>)\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">NotificacionPush</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">enviar</span>(<span class=\"variable\">self</span>, <span class=\"variable\">mensaje</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Enviando notificación Push: {mensaje}\"</span>)\r\n\r\n<span class=\"keyword\">def</span> <span class=\"function\">enviar_notificacion</span>(<span class=\"variable\">notificador</span>, <span class=\"variable\">mensaje</span>):\r\n    <span class=\"variable\">notificador</span>.<span class=\"function\">enviar</span>(<span class=\"variable\">mensaje</span>)\r\n\r\n<span class=\"comment\"># Creamos los objetos</span>\r\n<span class=\"variable\">email</span> = <span class=\"variable\">NotificacionEmail</span>()\r\n<span class=\"variable\">sms</span> = <span class=\"variable\">NotificacionSMS</span>()\r\n<span class=\"variable\">push</span> = <span class=\"variable\">NotificacionPush</span>()\r\n\r\n<span class=\"variable\">notificadores</span> = [<span class=\"variable\">email</span>, <span class=\"variable\">sms</span>, <span class=\"variable\">push</span>]\r\n<span class=\"variable\">mensaje_prueba</span> = <span class=\"highlight\">\"Tu pedido ha sido enviado.\"</span>\r\n\r\n<span class=\"keyword\">for</span> <span class=\"variable\">notificador</span> <span class=\"keyword\">in</span> <span class=\"variable\">notificadores</span>:\r\n    <span class=\"function\">enviar_notificacion</span>(<span class=\"variable\">notificador</span>, <span class=\"variable\">mensaje_prueba</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 3, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 13, "fields": {"modulo": 3, "titulo": "Encapsulamiento y abstraccion", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 3, Lección 4: Encapsulamiento y Abstracción - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 4: Encapsulamiento y Abstracción</h1>\r\n        <p class=\"lesson-intro\">\r\n            En esta lección final del módulo de POO, exploraremos dos principios que, aunque más abstractos, son cruciales para escribir código seguro, mantenible y fácil de usar: el **encapsulamiento**, que protege los datos de un objeto, y la **abstracción**, que oculta la complejidad innecesaria.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Encapsulamiento - Protegiendo tus Datos</h2>\r\n        <p>El **encapsulamiento** es el principio de restringir el acceso directo a los atributos de un objeto y agruparlos con los métodos que operan sobre ellos. La idea es proteger el estado interno del objeto para evitar modificaciones accidentales o inválidas.</p>\r\n        <p><strong>Analogía del Coche:</strong> Tú no interactúas directamente con los pistones del motor para acelerar. En su lugar, usas una interfaz pública (el pedal del acelerador). El coche **encapsula** la complejidad del motor y solo expone los controles necesarios.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Atributos \"Privados\" en Python</h3>\r\n            <p>A diferencia de otros lenguajes, Python no tiene atributos verdaderamente privados. Sin embargo, usa una convención de nomenclatura para indicar que un atributo no debe ser modificado desde fuera de la clase:</p>\r\n            <ul>\r\n                <li><strong>Un guion bajo (<code>_nombre</code>):</strong> Indica que el atributo es para uso interno. Es una señal de \"no tocar\", pero técnicamente todavía se puede acceder.</li>\r\n                <li><strong>Dos guiones bajos (<code>__nombre</code>):</strong> Activa un mecanismo llamado \"Name Mangling\", que hace más difícil acceder al atributo desde fuera. Es la forma más cercana a un atributo privado.</li>\r\n            </ul>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">CuentaBancaria</span>:\r\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(<span class=\"variable\">self</span>, <span class=\"variable\">saldo_inicial</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">__saldo</span> = <span class=\"variable\">saldo_inicial</span> <span class=\"comment\"># Atributo \"privado\"</span>\r\n\r\n    <span class=\"keyword\">def</span> <span class=\"function\">depositar</span>(<span class=\"variable\">self</span>, <span class=\"variable\">monto</span>):\r\n        <span class=\"keyword\">if</span> <span class=\"variable\">monto</span> > <span class=\"number\">0</span>:\r\n            <span class=\"variable\">self</span>.<span class=\"variable\">__saldo</span> += <span class=\"variable\">monto</span>\r\n            <span class=\"function\">print</span>(<span class=\"highlight\">\"Depósito exitoso.\"</span>)\r\n        <span class=\"keyword\">else</span>:\r\n            <span class=\"function\">print</span>(<span class=\"highlight\">\"El monto debe ser positivo.\"</span>)\r\n\r\n    <span class=\"keyword\">def</span> <span class=\"function\">ver_saldo</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"keyword\">return</span> <span class=\"variable\">self</span>.<span class=\"variable\">__saldo</span>\r\n\r\n<span class=\"variable\">mi_cuenta</span> = <span class=\"variable\">CuentaBancaria</span>(<span class=\"number\">1000</span>)\r\n<span class=\"comment\"># No podemos hacer esto: mi_cuenta.__saldo = -500 (rompería la lógica)</span>\r\n<span class=\"variable\">mi_cuenta</span>.<span class=\"function\">depositar</span>(<span class=\"number\">500</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Saldo actual: ${mi_cuenta.ver_saldo()}\"</span>)\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 2: Abstracción - Ocultando la Complejidad</h2>\r\n        <p>La **abstracción** consiste en ocultar los detalles complejos de implementación y exponer solo la funcionalidad esencial al usuario. Está muy relacionada con el encapsulamiento.</p>\r\n        <p><strong>Analogía del Control Remoto:</strong> Para cambiar de canal, solo necesitas presionar un botón. No necesitas saber nada sobre las frecuencias, las señales infrarrojas o los circuitos internos del televisor. El control remoto te ofrece una **abstracción** simple de una operación compleja.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Clases y Métodos Abstractos</h3>\r\n            <p>En Python, la abstracción se implementa a menudo con **Clases Base Abstractas (ABC)**. Una clase abstracta es como una plantilla: define qué métodos deben tener sus clases hijas, pero no dice cómo deben implementarlos. Obliga a las clases hijas a seguir un contrato.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">from</span> <span class=\"variable\">abc</span> <span class=\"keyword\">import</span> <span class=\"variable\">ABC</span>, <span class=\"variable\">abstractmethod</span>\r\n\r\n<span class=\"comment\"># Clase Abstracta (la plantilla)</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Vehiculo</span>(<span class=\"variable\">ABC</span>):\r\n    @<span class=\"function\">abstractmethod</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">acelerar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"comment\"># Clases Concretas (la implementación)</span>\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Coche</span>(<span class=\"variable\">Vehiculo</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">acelerar</span>(<span class=\"variable\">self</span>): <span class=\"comment\"># Obligado a implementar este método</span>\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"El coche acelera en el asfalto.\"</span>)\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">Barco</span>(<span class=\"variable\">Vehiculo</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">acelerar</span>(<span class=\"variable\">self</span>): <span class=\"comment\"># Obligado a implementar este método</span>\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"El barco acelera en el agua.\"</span>)\r\n\r\n<span class=\"comment\"># No puedes crear un objeto de una clase abstracta: vehiculo = Vehiculo() -> Dará error</span>\r\n<span class=\"variable\">mi_coche</span> = <span class=\"variable\">Coche</span>()\r\n<span class=\"variable\">mi_coche</span>.<span class=\"function\">acelerar</span>()\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicio: Sistema de Base de Datos Abstracto</h3>\r\n            <p><strong>Objetivo:</strong> Usar la abstracción para definir una interfaz común para diferentes tipos de bases de datos y el encapsulamiento para proteger los datos de conexión.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `04_database.py`.</li>\r\n                <li>Importa `ABC` y `abstractmethod` del módulo `abc`.</li>\r\n                <li>Crea una clase abstracta `BaseDeDatos` que herede de `ABC`.\r\n                    <ul>\r\n                        <li>En su `__init__`, debe aceptar `host` y `puerto` y guardarlos como atributos \"privados\" (ej: `self.__host`).</li>\r\n                        <li>Debe tener dos métodos abstractos: `conectar()` y `desconectar()`.</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Crea dos clases hijas concretas, `PostgreSQL` y `MongoDB`, que hereden de `BaseDeDatos`.</li>\r\n                <li>Implementa los métodos `conectar()` y `desconectar()` en ambas clases hijas. Cada uno debe imprimir un mensaje específico (ej: `\"Conectando a PostgreSQL en [host]:[puerto]\"`).</li>\r\n                <li>Crea una instancia de `PostgreSQL` y otra de `MongoDB`. Llama a sus métodos `conectar()` y `desconectar()` para probar que la abstracción funciona.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM3L4-1')\">Ver Solución</span>\r\n            <div id=\"solucionM3L4-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">from</span> <span class=\"variable\">abc</span> <span class=\"keyword\">import</span> <span class=\"variable\">ABC</span>, <span class=\"variable\">abstractmethod</span>\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">BaseDeDatos</span>(<span class=\"variable\">ABC</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(<span class=\"variable\">self</span>, <span class=\"variable\">host</span>, <span class=\"variable\">puerto</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">__host</span> = <span class=\"variable\">host</span>\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">__puerto</span> = <span class=\"variable\">puerto\r\n    \r\n    @<span class=\"function\">abstractmethod</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">conectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"keyword\">pass</span>\r\n\r\n    @<span class=\"function\">abstractmethod</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">desconectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">PostgreSQL</span>(<span class=\"variable\">BaseDeDatos</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">conectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Conectando a PostgreSQL en {self._BaseDeDatos__host}:{self._BaseDeDatos__puerto}\"</span>)\r\n    \r\n    <span class=\"keyword\">def</span> <span class=\"function\">desconectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"Desconectado de PostgreSQL.\"</span>)\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">MongoDB</span>(<span class=\"variable\">BaseDeDatos</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">conectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Conectando a MongoDB en {self._BaseDeDatos__host}:{self._BaseDeDatos__puerto}\"</span>)\r\n    \r\n    <span class=\"keyword\">def</span> <span class=\"function\">desconectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"Desconectado de MongoDB.\"</span>)\r\n\r\n<span class=\"variable\">db1</span> = <span class=\"variable\">PostgreSQL</span>(<span class=\"highlight\">\"localhost\"</span>, <span class=\"number\">5432</span>)\r\n<span class=\"variable\">db2</span> = <span class=\"variable\">MongoDB</span>(<span class=\"highlight\">\"cluster1.mongo.com\"</span>, <span class=\"number\">27017</span>)\r\n\r\n<span class=\"variable\">db1</span>.<span class=\"function\">conectar</span>()\r\n<span class=\"variable\">db2</span>.<span class=\"function\">conectar</span>()\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Sistema de Base de Datos Abstracto</h3>\r\n            <p><strong>Objetivo:</strong> Usar la abstracción para definir una interfaz común para diferentes tipos de bases de datos y el encapsulamiento para proteger los datos de conexión.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `04_database.py`.</li>\r\n                <li>Importa `ABC` y `abstractmethod` del módulo `abc`.</li>\r\n                <li>Crea una clase abstracta `BaseDeDatos` que herede de `ABC`.\r\n                    <ul>\r\n                        <li>En su `__init__`, debe aceptar `host` y `puerto` y guardarlos como atributos \"privados\" (ej: `self.__host`).</li>\r\n                        <li>Debe tener dos métodos abstractos: `conectar()` y `desconectar()`.</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Crea dos clases hijas concretas, `PostgreSQL` y `MongoDB`, que hereden de `BaseDeDatos`.</li>\r\n                <li>Implementa los métodos `conectar()` y `desconectar()` en ambas clases hijas. Cada uno debe imprimir un mensaje específico (ej: `\"Conectando a PostgreSQL en [host]:[puerto]\"`).</li>\r\n                <li>Crea una instancia de `PostgreSQL` y otra de `MongoDB`. Llama a sus métodos `conectar()` y `desconectar()` para probar que la abstracción funciona.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM3L4-1')\">Ver Solución</span>\r\n            <div id=\"solucionM3L4-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">from</span> <span class=\"variable\">abc</span> <span class=\"keyword\">import</span> <span class=\"variable\">ABC</span>, <span class=\"variable\">abstractmethod</span>\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">BaseDeDatos</span>(<span class=\"variable\">ABC</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">__init__</span>(<span class=\"variable\">self</span>, <span class=\"variable\">host</span>, <span class=\"variable\">puerto</span>):\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">__host</span> = <span class=\"variable\">host</span>\r\n        <span class=\"variable\">self</span>.<span class=\"variable\">__puerto</span> = <span class=\"variable\">puerto\r\n    \r\n    @<span class=\"function\">abstractmethod</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">conectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"keyword\">pass</span>\r\n\r\n    @<span class=\"function\">abstractmethod</span>\r\n    <span class=\"keyword\">def</span> <span class=\"function\">desconectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"keyword\">pass</span>\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">PostgreSQL</span>(<span class=\"variable\">BaseDeDatos</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">conectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Conectando a PostgreSQL en {self._BaseDeDatos__host}:{self._BaseDeDatos__puerto}\"</span>)\r\n    \r\n    <span class=\"keyword\">def</span> <span class=\"function\">desconectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"Desconectado de PostgreSQL.\"</span>)\r\n\r\n<span class=\"keyword\">class</span> <span class=\"variable\">MongoDB</span>(<span class=\"variable\">BaseDeDatos</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">conectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Conectando a MongoDB en {self._BaseDeDatos__host}:{self._BaseDeDatos__puerto}\"</span>)\r\n    \r\n    <span class=\"keyword\">def</span> <span class=\"function\">desconectar</span>(<span class=\"variable\">self</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">\"Desconectado de MongoDB.\"</span>)\r\n\r\n<span class=\"variable\">db1</span> = <span class=\"variable\">PostgreSQL</span>(<span class=\"highlight\">\"localhost\"</span>, <span class=\"number\">5432</span>)\r\n<span class=\"variable\">db2</span> = <span class=\"variable\">MongoDB</span>(<span class=\"highlight\">\"cluster1.mongo.com\"</span>, <span class=\"number\">27017</span>)\r\n\r\n<span class=\"variable\">db1</span>.<span class=\"function\">conectar</span>()\r\n<span class=\"variable\">db2</span>.<span class=\"function\">conectar</span>()\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 4, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 14, "fields": {"modulo": 4, "titulo": "Manejo de excepciones", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 4, Lección 1: Manejo de Excepciones - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 1: Manejo de Excepciones</h1>\r\n        <p class=\"lesson-intro\">\r\n            En el mundo real, las cosas a menudo salen mal: un usuario ingresa texto en lugar de un número, un archivo no existe, etc. Si no estás preparado, estos errores (llamados **excepciones**) detendrán tu programa bruscamente. El **manejo de excepciones** es el mecanismo que nos permite anticipar y gestionar estos problemas de forma elegante y controlada.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: El Bloque `try-except`</h2>\r\n        <p>La principal herramienta para manejar errores es el bloque `try-except`. La analogía es una **red de seguridad para un trapecista**. El código propenso a fallar es el trapecista (`try`). Si resbala (ocurre un error), no se estrella contra el suelo (el programa no crashea), sino que cae en la red (`except`), que lo gestiona de forma segura y permite que el espectáculo continúe.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Bloque <code>try-except</code></h3>\r\n            <p><strong>Descripción:</strong> Define un bloque de código para \"intentar\" (`try`) una operación que podría fallar. Si ocurre una excepción, el programa salta al bloque `except` correspondiente en lugar de detenerse.</p>\r\n            <p><strong>Sintaxis:</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">try</span>:\r\n    <span class=\"comment\"># Código que podría lanzar un error</span>\r\n    <span class=\"variable\">resultado</span> = <span class=\"number\">10</span> / <span class=\"number\">0</span>\r\n<span class=\"keyword\">except</span> <span class=\"variable\">ZeroDivisionError</span>:\r\n    <span class=\"comment\"># Código que se ejecuta SI ocurre ese error específico</span>\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Error: No se puede dividir por cero.\"</span>)\r\n            </pre></div>\r\n            <p><strong>Ejemplo Práctico:</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Código de Entrada</span>\r\n<span class=\"variable\">edad_str</span> = <span class=\"function\">input</span>(<span class=\"highlight\">\"Introduce tu edad: \"</span>) <span class=\"comment\"># Prueba introduciendo \"hola\"</span>\r\n<span class=\"keyword\">try</span>:\r\n    <span class=\"variable\">edad_num</span> = <span class=\"function\">int</span>(<span class=\"variable\">edad_str</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"En 10 años tendrás {edad_num + 10} años.\"</span>)\r\n<span class=\"keyword\">except</span> <span class=\"variable\">ValueError</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Entrada inválida. Debes introducir un número.\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada (si se introduce \"hola\")</span>\r\n<span class=\"highlight\">Entrada inválida. Debes introducir un número.</span>\r\n            </pre></div>\r\n            <p>✅ **Buena Práctica:** Es mejor capturar excepciones específicas (como `ValueError` o `FileNotFoundError`) en lugar de una excepción genérica (`except Exception:`), para saber exactamente qué tipo de error ocurrió.</p>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 2: Bloques `else` y `finally`</h2>\r\n        <p>La estructura `try-except` se puede extender con dos bloques opcionales más.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Bloque `else`</h3>\r\n            <p>El bloque `else` se ejecuta **únicamente si no ocurrió ninguna excepción** en el bloque `try`.</p>\r\n        </div>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Bloque `finally`</h3>\r\n            <p>El bloque `finally` se ejecuta **siempre**, sin importar si hubo una excepción o no. Es ideal para tareas de \"limpieza\", como cerrar un archivo o una conexión de red.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">try</span>:\r\n    <span class=\"variable\">numero</span> = <span class=\"function\">int</span>(<span class=\"highlight\">\"123\"</span>)\r\n<span class=\"keyword\">except</span> <span class=\"variable\">ValueError</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Ocurrió un error de valor.\"</span>)\r\n<span class=\"keyword\">else</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"No hubo errores, la conversión fue exitosa.\"</span>) <span class=\"comment\"># Se ejecuta</span>\r\n<span class=\"keyword\">finally</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Este bloque se ejecuta siempre.\"</span>) <span class=\"comment\"># Se ejecuta</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 1 (Módulo 4)</h3>\r\n\r\n            <h4>Ejercicio 1: Calculadora Segura</h4>\r\n            <p><strong>Objetivo:</strong> Crear una función de división que maneje los errores de división por cero y de entrada no numérica.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `01_calculadora_segura.py`.</li>\r\n                <li>Define una función `dividir(a, b)` que intente retornar el resultado de `a / b`.</li>\r\n                <li>Dentro de la función, usa un bloque `try-except` para capturar la excepción `ZeroDivisionError`. Si ocurre, la función debe devolver el string `\"Error: No se puede dividir por cero.\"`.</li>\r\n                <li>Fuera de la función, pide al usuario dos números.</li>\r\n                <li>Usa un bloque `try-except` para convertir las entradas a `float`. Si falla (`ValueError`), imprime un mensaje de error.</li>\r\n                <li>Si la conversión es exitosa (en un bloque `else`), llama a tu función `dividir` e imprime el resultado.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM4L1-1')\">Ver Solución</span>\r\n            <div id=\"solucionM4L1-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">def</span> <span class=\"function\">dividir</span>(<span class=\"variable\">a</span>, <span class=\"variable\">b</span>):\r\n    <span class=\"keyword\">try</span>:\r\n        <span class=\"keyword\">return</span> <span class=\"variable\">a</span> / <span class=\"variable\">b</span>\r\n    <span class=\"keyword\">except</span> <span class=\"variable\">ZeroDivisionError</span>:\r\n        <span class=\"keyword\">return</span> <span class=\"highlight\">\"Error: No se puede dividir por cero.\"</span>\r\n\r\n<span class=\"variable\">num1_str</span> = <span class=\"function\">input</span>(<span class=\"highlight\">\"Introduce el dividendo: \"</span>)\r\n<span class=\"variable\">num2_str</span> = <span class=\"function\">input</span>(<span class=\"highlight\">\"Introduce el divisor: \"</span>)\r\n\r\n<span class=\"keyword\">try</span>:\r\n    <span class=\"variable\">num1</span> = <span class=\"function\">float</span>(<span class=\"variable\">num1_str</span>)\r\n    <span class=\"variable\">num2</span> = <span class=\"function\">float</span>(<span class=\"variable\">num2_str</span>)\r\n<span class=\"keyword\">except</span> <span class=\"variable\">ValueError</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Error: Ambos valores deben ser numéricos.\"</span>)\r\n<span class=\"keyword\">else</span>:\r\n    <span class=\"variable\">resultado</span> = <span class=\"function\">dividir</span>(<span class=\"variable\">num1</span>, <span class=\"variable\">num2</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"El resultado es: {resultado}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 1 (Módulo 4)</h3>\r\n\r\n            <h4>Ejercicio 1: Calculadora Segura</h4>\r\n            <p><strong>Objetivo:</strong> Crear una función de división que maneje los errores de división por cero y de entrada no numérica.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `01_calculadora_segura.py`.</li>\r\n                <li>Define una función `dividir(a, b)` que intente retornar el resultado de `a / b`.</li>\r\n                <li>Dentro de la función, usa un bloque `try-except` para capturar la excepción `ZeroDivisionError`. Si ocurre, la función debe devolver el string `\"Error: No se puede dividir por cero.\"`.</li>\r\n                <li>Fuera de la función, pide al usuario dos números.</li>\r\n                <li>Usa un bloque `try-except` para convertir las entradas a `float`. Si falla (`ValueError`), imprime un mensaje de error.</li>\r\n                <li>Si la conversión es exitosa (en un bloque `else`), llama a tu función `dividir` e imprime el resultado.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM4L1-1')\">Ver Solución</span>\r\n            <div id=\"solucionM4L1-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">def</span> <span class=\"function\">dividir</span>(<span class=\"variable\">a</span>, <span class=\"variable\">b</span>):\r\n    <span class=\"keyword\">try</span>:\r\n        <span class=\"keyword\">return</span> <span class=\"variable\">a</span> / <span class=\"variable\">b</span>\r\n    <span class=\"keyword\">except</span> <span class=\"variable\">ZeroDivisionError</span>:\r\n        <span class=\"keyword\">return</span> <span class=\"highlight\">\"Error: No se puede dividir por cero.\"</span>\r\n\r\n<span class=\"variable\">num1_str</span> = <span class=\"function\">input</span>(<span class=\"highlight\">\"Introduce el dividendo: \"</span>)\r\n<span class=\"variable\">num2_str</span> = <span class=\"function\">input</span>(<span class=\"highlight\">\"Introduce el divisor: \"</span>)\r\n\r\n<span class=\"keyword\">try</span>:\r\n    <span class=\"variable\">num1</span> = <span class=\"function\">float</span>(<span class=\"variable\">num1_str</span>)\r\n    <span class=\"variable\">num2</span> = <span class=\"function\">float</span>(<span class=\"variable\">num2_str</span>)\r\n<span class=\"keyword\">except</span> <span class=\"variable\">ValueError</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Error: Ambos valores deben ser numéricos.\"</span>)\r\n<span class=\"keyword\">else</span>:\r\n    <span class=\"variable\">resultado</span> = <span class=\"function\">dividir</span>(<span class=\"variable\">num1</span>, <span class=\"variable\">num2</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"El resultado es: {resultado}\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 1, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 15, "fields": {"modulo": 4, "titulo": "Manipulacion de archivos", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 4, Lección 2: Manipulación de Archivos - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 2: Manipulación de Archivos</h1>\r\n        <p class=\"lesson-intro\">\r\n            Hasta ahora, los datos de nuestros programas han sido efímeros: existen solo mientras el programa se ejecuta. El **manejo de archivos** nos permite darles persistencia, guardando información en el disco duro para que pueda ser leída y utilizada en futuras ejecuciones.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Lectura y Escritura de Archivos de Texto</h2>\r\n        <p>La operación más fundamental es trabajar con archivos de texto simple (`.txt`). Python hace que este proceso sea muy sencillo y seguro a través del bloque <code>with open()</code>.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Bloque <code>with open()</code></h3>\r\n            <p><strong>Descripción:</strong> Es la forma recomendada para abrir un archivo. Define un contexto que asegura que el archivo se cierre automáticamente al finalizar el bloque, incluso si ocurren errores. Esto previene la corrupción de datos y libera recursos del sistema.</p>\r\n            <p><strong>Sintaxis:</strong> <code>with open('nombre_archivo.txt', 'modo') as f:</code></p>\r\n            <p><strong>Parámetros:</strong>\r\n                <ul>\r\n                    <li><code>nombre_archivo.txt</code>: La ruta al archivo que quieres abrir.</li>\r\n                    <li><code>modo</code>: Un string que indica qué quieres hacer con el archivo.</li>\r\n                    <li><code>f</code>: La variable que usaremos para referirnos al objeto del archivo abierto.</li>\r\n                </ul>\r\n            </p>\r\n            <p><strong>Modos de Apertura Principales:</strong></p>\r\n            <ul>\r\n                <li><strong><code>'r'</code> (Read):</strong> Leer. Es el modo por defecto. Da error si el archivo no existe.</li>\r\n                <li><strong><code>'w'</code> (Write):</strong> Escribir. **Sobrescribe todo el contenido** si el archivo existe. Si no existe, lo crea.</li>\r\n                <li><strong><code>'a'</code> (Append):</strong> Añadir. Agrega contenido nuevo al final del archivo. Si no existe, lo crea.</li>\r\n            </ul>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Ejemplos de Lectura y Escritura</h3>\r\n            <p><strong>Escribir en un archivo (modo 'w'):</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Código de Entrada</span>\r\n<span class=\"keyword\">with</span> <span class=\"function\">open</span>(<span class=\"highlight\">'lista_compras.txt'</span>, <span class=\"highlight\">'w'</span>) <span class=\"keyword\">as</span> <span class=\"variable\">f</span>:\r\n    <span class=\"variable\">f</span>.<span class=\"function\">write</span>(<span class=\"highlight\">\"Manzanas\\n\"</span>) <span class=\"comment\"># \\n es un salto de línea</span>\r\n    <span class=\"variable\">f</span>.<span class=\"function\">write</span>(<span class=\"highlight\">\"Pan\\n\"</span>)\r\n    <span class=\"variable\">f</span>.<span class=\"function\">write</span>(<span class=\"highlight\">\"Leche\\n\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Archivo 'lista_compras.txt' creado/actualizado.\"</span>)\r\n            </pre></div>\r\n\r\n            <p><strong>Leer un archivo completo (modo 'r'):</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">with</span> <span class=\"function\">open</span>(<span class=\"highlight\">'lista_compras.txt'</span>, <span class=\"highlight\">'r'</span>) <span class=\"keyword\">as</span> <span class=\"variable\">f</span>:\r\n    <span class=\"variable\">contenido</span> = <span class=\"variable\">f</span>.<span class=\"function\">read</span>()\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"--- Contenido del Archivo ---\"</span>)\r\n    <span class=\"function\">print</span>(<span class=\"variable\">contenido</span>)\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: Archivos Estructurados (JSON y CSV)</h2>\r\n        <p>A menudo, no guardamos texto simple, sino datos estructurados. Python tiene módulos en su librería estándar para trabajar fácilmente con los formatos más comunes.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Módulo <code>json</code></h3>\r\n            <p><strong>JSON (JavaScript Object Notation)</strong> es un formato de texto ligero ideal para intercambiar datos. Es muy similar a los diccionarios de Python.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">json</span>\r\n\r\n<span class=\"variable\">datos_usuario</span> = {<span class=\"highlight\">\"nombre\"</span>: <span class=\"highlight\">\"Carlos\"</span>, <span class=\"highlight\">\"edad\"</span>: <span class=\"number\">30</span>, <span class=\"highlight\">\"suscrito\"</span>: <span class=\"boolean\">True</span>}\r\n\r\n<span class=\"comment\"># Escribir un diccionario a un archivo JSON</span>\r\n<span class=\"keyword\">with</span> <span class=\"function\">open</span>(<span class=\"highlight\">'usuario.json'</span>, <span class=\"highlight\">'w'</span>) <span class=\"keyword\">as</span> <span class=\"variable\">f</span>:\r\n    <span class=\"variable\">json</span>.<span class=\"function\">dump</span>(<span class=\"variable\">datos_usuario</span>, <span class=\"variable\">f</span>, <span class=\"variable\">indent</span>=<span class=\"number\">4</span>)\r\n\r\n<span class=\"comment\"># Leer un archivo JSON y convertirlo de nuevo a un diccionario</span>\r\n<span class=\"keyword\">with</span> <span class=\"function\">open</span>(<span class=\"highlight\">'usuario.json'</span>, <span class=\"highlight\">'r'</span>) <span class=\"keyword\">as</span> <span class=\"variable\">f</span>:\r\n    <span class=\"variable\">datos_leidos</span> = <span class=\"variable\">json</span>.<span class=\"function\">load</span>(<span class=\"variable\">f</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Datos leídos del JSON: {datos_leidos}\"</span>)\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 2 (Módulo 4)</h3>\r\n\r\n            <h4>Ejercicio 1: Gestor de Tareas Persistente</h4>\r\n            <p><strong>Objetivo:</strong> Crear un programa que guarde una lista de tareas en un archivo de texto y pueda leerlas al iniciar.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `02_gestor_tareas.py`.</li>\r\n                <li>Define una lista de `tareas` con algunas tareas iniciales.</li>\r\n                <li>Usa el modo `'w'` para escribir cada tarea de la lista en un archivo `tareas.txt`. Cada tarea debe estar en una nueva línea.</li>\r\n                <li>Luego, crea una nueva lista vacía `tareas_leidas`.</li>\r\n                <li>Abre `tareas.txt` en modo `'r'` y usa un bucle `for` para leer el archivo línea por línea. En cada iteración, añade la línea (sin el salto de línea, usa `.strip()`) a la lista `tareas_leidas`.</li>\r\n                <li>Imprime la lista `tareas_leidas` para verificar que el proceso fue exitoso.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM4L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM4L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Escribir el archivo</span>\r\n<span class=\"variable\">tareas</span> = [<span class=\"highlight\">\"Comprar leche\"</span>, <span class=\"highlight\">\"Pasear al perro\"</span>, <span class=\"highlight\">\"Estudiar POO\"</span>]\r\n<span class=\"keyword\">with</span> <span class=\"function\">open</span>(<span class=\"highlight\">'tareas.txt'</span>, <span class=\"highlight\">'w'</span>) <span class=\"keyword\">as</span> <span class=\"variable\">f</span>:\r\n    <span class=\"keyword\">for</span> <span class=\"variable\">tarea</span> <span class=\"keyword\">in</span> <span class=\"variable\">tareas</span>:\r\n        <span class=\"variable\">f</span>.<span class=\"function\">write</span>(<span class=\"variable\">tarea</span> + <span class=\"highlight\">'\\n'</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Tareas guardadas en tareas.txt\"</span>)\r\n\r\n<span class=\"comment\"># Leer el archivo</span>\r\n<span class=\"variable\">tareas_leidas</span> = []\r\n<span class=\"keyword\">with</span> <span class=\"function\">open</span>(<span class=\"highlight\">'tareas.txt'</span>, <span class=\"highlight\">'r'</span>) <span class=\"keyword\">as</span> <span class=\"variable\">f</span>:\r\n    <span class=\"keyword\">for</span> <span class=\"variable\">linea</span> <span class=\"keyword\">in</span> <span class=\"variable\">f</span>:\r\n        <span class=\"variable\">tareas_leidas</span>.<span class=\"function\">append</span>(<span class=\"variable\">linea</span>.<span class=\"function\">strip</span>())\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Tareas leídas del archivo: {tareas_leidas}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 2 (Módulo 4)</h3>\r\n\r\n            <h4>Ejercicio 1: Gestor de Tareas Persistente</h4>\r\n            <p><strong>Objetivo:</strong> Crear un programa que guarde una lista de tareas en un archivo de texto y pueda leerlas al iniciar.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `02_gestor_tareas.py`.</li>\r\n                <li>Define una lista de `tareas` con algunas tareas iniciales.</li>\r\n                <li>Usa el modo `'w'` para escribir cada tarea de la lista en un archivo `tareas.txt`. Cada tarea debe estar en una nueva línea.</li>\r\n                <li>Luego, crea una nueva lista vacía `tareas_leidas`.</li>\r\n                <li>Abre `tareas.txt` en modo `'r'` y usa un bucle `for` para leer el archivo línea por línea. En cada iteración, añade la línea (sin el salto de línea, usa `.strip()`) a la lista `tareas_leidas`.</li>\r\n                <li>Imprime la lista `tareas_leidas` para verificar que el proceso fue exitoso.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM4L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM4L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Escribir el archivo</span>\r\n<span class=\"variable\">tareas</span> = [<span class=\"highlight\">\"Comprar leche\"</span>, <span class=\"highlight\">\"Pasear al perro\"</span>, <span class=\"highlight\">\"Estudiar POO\"</span>]\r\n<span class=\"keyword\">with</span> <span class=\"function\">open</span>(<span class=\"highlight\">'tareas.txt'</span>, <span class=\"highlight\">'w'</span>) <span class=\"keyword\">as</span> <span class=\"variable\">f</span>:\r\n    <span class=\"keyword\">for</span> <span class=\"variable\">tarea</span> <span class=\"keyword\">in</span> <span class=\"variable\">tareas</span>:\r\n        <span class=\"variable\">f</span>.<span class=\"function\">write</span>(<span class=\"variable\">tarea</span> + <span class=\"highlight\">'\\n'</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Tareas guardadas en tareas.txt\"</span>)\r\n\r\n<span class=\"comment\"># Leer el archivo</span>\r\n<span class=\"variable\">tareas_leidas</span> = []\r\n<span class=\"keyword\">with</span> <span class=\"function\">open</span>(<span class=\"highlight\">'tareas.txt'</span>, <span class=\"highlight\">'r'</span>) <span class=\"keyword\">as</span> <span class=\"variable\">f</span>:\r\n    <span class=\"keyword\">for</span> <span class=\"variable\">linea</span> <span class=\"keyword\">in</span> <span class=\"variable\">f</span>:\r\n        <span class=\"variable\">tareas_leidas</span>.<span class=\"function\">append</span>(<span class=\"variable\">linea</span>.<span class=\"function\">strip</span>())\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Tareas leídas del archivo: {tareas_leidas}\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 2, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 16, "fields": {"modulo": 5, "titulo": "Comprension y lambdas", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device--width, initial-scale=1.0\">\r\n    <title>Módulo 5, Lección 1: Comprensión y Lambdas - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 1: Comprensión de Colecciones y Lambdas</h1>\r\n        <p class=\"lesson-intro\">\r\n            Bienvenido a los temas avanzados. En esta lección, aprenderás dos técnicas de Python que te permitirán escribir código mucho más compacto y elegante: la **comprensión de listas**, para crear listas a partir de otras existentes en una sola línea, y las **funciones lambda**, para crear pequeñas funciones anónimas sobre la marcha.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Comprensión de Listas (List Comprehensions)</h2>\r\n        <p>La comprensión de listas es una de las características más apreciadas de Python. Ofrece una sintaxis más corta y legible para crear una nueva lista a partir de un iterable existente, aplicando una expresión y, opcionalmente, un filtro.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Sintaxis de Comprensión de Listas</h3>\r\n            <p><strong>Descripción:</strong> Es una forma compacta de crear listas. La estructura básica es `[expresion for elemento in iterable]`, y se le puede añadir un filtro con `if`.</p>\r\n            <p><strong>Sintaxis:</strong> <code>nueva_lista = [expresion for elemento in iterable if condicion]</code></p>\r\n            <p><strong>Ejemplo Práctico (sin filtro):</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Forma tradicional con un bucle for</span>\r\n<span class=\"variable\">cuadrados</span> = []\r\n<span class=\"keyword\">for</span> <span class=\"variable\">x</span> <span class=\"keyword\">in</span> <span class=\"function\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>):\r\n    <span class=\"variable\">cuadrados</span>.<span class=\"function\">append</span>(<span class=\"variable\">x</span> ** <span class=\"number\">2</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">cuadrados</span>) <span class=\"comment\"># Salida: [1, 4, 9, 16, 25]</span>\r\n\r\n<span class=\"comment\"># La misma operación con comprensión de listas</span>\r\n<span class=\"variable\">cuadrados_comp</span> = [<span class=\"variable\">x</span> ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> <span class=\"variable\">x</span> <span class=\"keyword\">in</span> <span class=\"function\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>)]\r\n<span class=\"function\">print</span>(<span class=\"variable\">cuadrados_comp</span>) <span class=\"comment\"># Salida: [1, 4, 9, 16, 25]</span>\r\n            </pre></div>\r\n            <p><strong>Ejemplo Práctico (con filtro):</strong></p>\r\n             <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Obtener solo los cuadrados de los números pares</span>\r\n<span class=\"variable\">cuadrados_pares</span> = [<span class=\"variable\">x</span> ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> <span class=\"variable\">x</span> <span class=\"keyword\">in</span> <span class=\"function\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">11</span>) <span class=\"keyword\">if</span> <span class=\"variable\">x</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span>]\r\n<span class=\"function\">print</span>(<span class=\"variable\">cuadrados_pares</span>) <span class=\"comment\"># Salida: [4, 16, 36, 64, 100]</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 2: Funciones Anónimas (Lambda)</h2>\r\n        <p>Una **función lambda** es una pequeña función anónima que se define con la palabra clave `lambda`. Puede tomar cualquier número de argumentos, pero solo puede tener una expresión. Se usan a menudo cuando necesitas una función simple por un corto período de tiempo.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Sintaxis de <code>lambda</code></h3>\r\n            <p><strong>Descripción:</strong> Crea una función anónima en una sola línea. Son sintácticamente restringidas a una única expresión.</p>\r\n            <p><strong>Sintaxis:</strong> <code>lambda argumentos: expresion</code></p>\r\n            <p><strong>Ejemplo Práctico:</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Forma tradicional con def</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">sumar</span>(<span class=\"variable\">a</span>, <span class=\"variable\">b</span>):\r\n    <span class=\"keyword\">return</span> <span class=\"variable\">a</span> + <span class=\"variable\">b</span>\r\n\r\n<span class=\"comment\"># La misma función como una lambda</span>\r\n<span class=\"variable\">suma_lambda</span> = <span class=\"keyword\">lambda</span> <span class=\"variable\">a</span>, <span class=\"variable\">b</span>: <span class=\"variable\">a</span> + <span class=\"variable\">b</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Resultado con def: {sumar(5, 3)}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Resultado con lambda: {suma_lambda(5, 3)}\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Resultado con def: 8</span>\r\n<span class=\"highlight\">Resultado con lambda: 8</span>\r\n            </pre></div>\r\n            <p><strong>Aplicación en la Vida Real:</strong> Su verdadero poder se ve cuando se usan como argumento para funciones de orden superior como `map()`, `filter()` o `sorted()`.</p>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 1 (Módulo 5)</h3>\r\n\r\n            <h4>Ejercicio 1: Filtrado de Datos con Comprensión</h4>\r\n            <p><strong>Objetivo:</strong> Usar la comprensión de listas para filtrar y transformar datos de una lista existente.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `01_filtrado_listas.py`.</li>\r\n                <li>Define una lista de números, `numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`.</li>\r\n                <li>Usa una comprensión de listas para crear una nueva lista llamada `numeros_pares` que contenga solo los números pares de la lista original.</li>\r\n                <li>Usa otra comprensión de listas para crear una lista llamada `cuadrados_impares` que contenga el cuadrado de los números impares.</li>\r\n                <li>Imprime ambas listas resultantes.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM5L1-1')\">Ver Solución</span>\r\n            <div id=\"solucionM5L1-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">numeros</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]\r\n<span class=\"variable\">numeros_pares</span> = [<span class=\"variable\">num</span> <span class=\"keyword\">for</span> <span class=\"variable\">num</span> <span class=\"keyword\">in</span> <span class=\"variable\">numeros</span> <span class=\"keyword\">if</span> <span class=\"variable\">num</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span>]\r\n<span class=\"variable\">cuadrados_impares</span> = [<span class=\"variable\">num</span>**<span class=\"number\">2</span> <span class=\"keyword\">for</span> <span class=\"variable\">num</span> <span class=\"keyword\">in</span> <span class=\"variable\">numeros</span> <span class=\"keyword\">if</span> <span class=\"variable\">num</span> % <span class=\"number\">2</span> != <span class=\"number\">0</span>]\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Números Pares: {numeros_pares}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Cuadrado de Impares: {cuadrados_impares}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n\r\n            <h4 style=\"margin-top: 30px;\">Ejercicio 2: Ordenando con Lambdas</h4>\r\n            <p><strong>Objetivo:</strong> Usar una función lambda como clave para ordenar una estructura de datos compleja.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `01_ordenando_lambda.py`.</li>\r\n                <li>Define una lista de diccionarios, donde cada diccionario representa a un estudiante con \"nombre\" y \"nota\".</li>\r\n                <li>Usa la función `sorted()` para ordenar la lista de estudiantes.</li>\r\n                <li>Para el argumento `key` de `sorted()`, pasa una función `lambda` que le diga a Python que ordene los diccionarios basándose en el valor de la clave \"nota\".</li>\r\n                <li>Imprime la lista de estudiantes ordenada.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM5L1-2')\">Ver Solución</span>\r\n            <div id=\"solucionM5L1-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">estudiantes</span> = [\r\n    {<span class=\"highlight\">'nombre'</span>: <span class=\"highlight\">'Ana'</span>, <span class=\"highlight\">'nota'</span>: <span class=\"number\">95</span>},\r\n    {<span class=\"highlight\">'nombre'</span>: <span class=\"highlight\">'Luis'</span>, <span class=\"highlight\">'nota'</span>: <span class=\"number\">88</span>},\r\n    {<span class=\"highlight\">'nombre'</span>: <span class=\"highlight\">'Marta'</span>, <span class=\"highlight\">'nota'</span>: <span class=\"number\">100</span>},\r\n]\r\n\r\n<span class=\"variable\">estudiantes_ordenados</span> = <span class=\"function\">sorted</span>(<span class=\"variable\">estudiantes</span>, <span class=\"variable\">key</span>=<span class=\"keyword\">lambda</span> <span class=\"variable\">est</span>: <span class=\"variable\">est</span>[<span class=\"highlight\">'nota'</span>])\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Estudiantes ordenados por nota:\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">estudiantes_ordenados</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 1 (Módulo 5)</h3>\r\n\r\n            <h4>Ejercicio 1: Filtrado de Datos con Comprensión</h4>\r\n            <p><strong>Objetivo:</strong> Usar la comprensión de listas para filtrar y transformar datos de una lista existente.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `01_filtrado_listas.py`.</li>\r\n                <li>Define una lista de números, `numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`.</li>\r\n                <li>Usa una comprensión de listas para crear una nueva lista llamada `numeros_pares` que contenga solo los números pares de la lista original.</li>\r\n                <li>Usa otra comprensión de listas para crear una lista llamada `cuadrados_impares` que contenga el cuadrado de los números impares.</li>\r\n                <li>Imprime ambas listas resultantes.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM5L1-1')\">Ver Solución</span>\r\n            <div id=\"solucionM5L1-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">numeros</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]\r\n<span class=\"variable\">numeros_pares</span> = [<span class=\"variable\">num</span> <span class=\"keyword\">for</span> <span class=\"variable\">num</span> <span class=\"keyword\">in</span> <span class=\"variable\">numeros</span> <span class=\"keyword\">if</span> <span class=\"variable\">num</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span>]\r\n<span class=\"variable\">cuadrados_impares</span> = [<span class=\"variable\">num</span>**<span class=\"number\">2</span> <span class=\"keyword\">for</span> <span class=\"variable\">num</span> <span class=\"keyword\">in</span> <span class=\"variable\">numeros</span> <span class=\"keyword\">if</span> <span class=\"variable\">num</span> % <span class=\"number\">2</span> != <span class=\"number\">0</span>]\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Números Pares: {numeros_pares}\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Cuadrado de Impares: {cuadrados_impares}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n\r\n            <h4 style=\"margin-top: 30px;\">Ejercicio 2: Ordenando con Lambdas</h4>\r\n            <p><strong>Objetivo:</strong> Usar una función lambda como clave para ordenar una estructura de datos compleja.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `01_ordenando_lambda.py`.</li>\r\n                <li>Define una lista de diccionarios, donde cada diccionario representa a un estudiante con \"nombre\" y \"nota\".</li>\r\n                <li>Usa la función `sorted()` para ordenar la lista de estudiantes.</li>\r\n                <li>Para el argumento `key` de `sorted()`, pasa una función `lambda` que le diga a Python que ordene los diccionarios basándose en el valor de la clave \"nota\".</li>\r\n                <li>Imprime la lista de estudiantes ordenada.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM5L1-2')\">Ver Solución</span>\r\n            <div id=\"solucionM5L1-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"variable\">estudiantes</span> = [\r\n    {<span class=\"highlight\">'nombre'</span>: <span class=\"highlight\">'Ana'</span>, <span class=\"highlight\">'nota'</span>: <span class=\"number\">95</span>},\r\n    {<span class=\"highlight\">'nombre'</span>: <span class=\"highlight\">'Luis'</span>, <span class=\"highlight\">'nota'</span>: <span class=\"number\">88</span>},\r\n    {<span class=\"highlight\">'nombre'</span>: <span class=\"highlight\">'Marta'</span>, <span class=\"highlight\">'nota'</span>: <span class=\"number\">100</span>},\r\n]\r\n\r\n<span class=\"variable\">estudiantes_ordenados</span> = <span class=\"function\">sorted</span>(<span class=\"variable\">estudiantes</span>, <span class=\"variable\">key</span>=<span class=\"keyword\">lambda</span> <span class=\"variable\">est</span>: <span class=\"variable\">est</span>[<span class=\"highlight\">'nota'</span>])\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Estudiantes ordenados por nota:\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">estudiantes_ordenados</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 1, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 17, "fields": {"modulo": 5, "titulo": "Programacion asincronica", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 5, Lección 2: Programación Asincrónica - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 2: Programación Asincrónica</h1>\r\n        <p class=\"lesson-intro\">\r\n            Imagina que estás en una cocina. La programación **síncrona** (lo que hemos hecho hasta ahora) es como preparar un plato a la vez: pones el pan en la tostadora, esperas a que salte, y solo entonces empiezas a freír un huevo. Es ineficiente. La **programación asincrónica** es como un chef profesional: pones el pan en la tostadora y, **mientras esperas**, empiezas a freír el huevo. Aprovechas los tiempos de espera para hacer otras cosas.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Conceptos Clave (Concurrencia vs. Paralelismo)</h2>\r\n        <p>\r\n            La programación asincrónica se basa en la **concurrencia**. Es importante no confundirla con el paralelismo.\r\n        </p>\r\n        <ul>\r\n            <li><strong>Concurrencia:</strong> Es la capacidad de **gestionar** múltiples tareas a la vez. El chef que alterna entre la tostadora y la sartén está trabajando de forma concurrente. Solo hay un chef, pero las tareas parecen progresar al mismo tiempo.</li>\r\n            <li><strong>Paralelismo:</strong> Es la capacidad de **ejecutar** múltiples tareas al mismo tiempo. Para esto, necesitarías varios chefs (o varios núcleos de CPU), cada uno trabajando en un plato diferente simultáneamente.</li>\r\n        </ul>\r\n        <p>La programación asincrónica en Python con `asyncio` se centra en la **concurrencia** en un solo hilo de ejecución.</p>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: La Sintaxis `async` y `await`</h2>\r\n        <p>Python nos da dos palabras clave para trabajar con código asíncrono.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>async def</code></h3>\r\n            <p><strong>Descripción:</strong> La palabra clave `async` antes de `def` convierte una función normal en una **corutina**. Una corutina es una función especial que puede ser pausada y reanudada. Es nuestra \"tarea asíncrona\".</p>\r\n            <div class=\"code-block\"><pre><span class=\"keyword\">async def</span> <span class=\"function\">mi_tarea_asincrona</span>():\r\n    <span class=\"comment\"># ... código asíncrono aquí ...</span>\r\n    <span class=\"keyword\">pass</span></pre></div>\r\n        </div>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>await</code></h3>\r\n            <p><strong>Descripción:</strong> La palabra clave `await` se usa dentro de una corutina (`async def`). Le dice a Python: \"Esta operación va a tardar (ej: una petición a una base de datos o una espera). **Pausa esta función aquí**, deja que otras tareas se ejecuten, y vuelve cuando esta operación haya terminado\". Es el momento en que el chef deja la tostadora y se va a la sartén.</p>\r\n            <div class=\"code-block\"><pre><span class=\"keyword\">async def</span> <span class=\"function\">obtener_datos</span>():\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Iniciando descarga...\"</span>)\r\n    <span class=\"keyword\">await</span> <span class=\"variable\">asyncio</span>.<span class=\"function\">sleep</span>(<span class=\"number\">2</span>) <span class=\"comment\"># Simula una operación de red que tarda 2 segundos</span>\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Descarga completada.\"</span>)\r\n    <span class=\"keyword\">return</span> {<span class=\"highlight\">\"datos\"</span>: <span class=\"highlight\">\"...\"</span>}</pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>El Bucle de Eventos (Event Loop)</h3>\r\n            <p>El módulo `asyncio` de Python proporciona un \"bucle de eventos\". Este es el \"director de orquesta\" o el \"jefe de cocina\". Se encarga de gestionar todas las corutinas, pausar las que están esperando con `await` y ejecutar otras que estén listas.</p>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicio: Simulador de Desayuno Asíncrono</h3>\r\n            <p><strong>Objetivo:</strong> Ver la concurrencia en acción creando varias tareas asíncronas que se ejecutan \"a la vez\".</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `02_desayuno_async.py`.</li>\r\n                <li>Importa el módulo `asyncio`.</li>\r\n                <li>Crea tres corutinas (`async def`): `hacer_tostadas()`, `preparar_cafe()` y `freir_huevos()`.</li>\r\n                <li>Dentro de cada una, imprime un mensaje de inicio (ej: \"Poniendo el pan en la tostadora...\"), luego usa `await asyncio.sleep()` con diferentes duraciones (ej: 3, 2 y 4 segundos), y finalmente imprime un mensaje de finalización (ej: \"¡Tostadas listas!\").</li>\r\n                <li>Crea una corutina principal `main()` donde uses `asyncio.gather()` para ejecutar las tres tareas de forma concurrente.</li>\r\n                <li>Al final del script, ejecuta la función `main()` con `asyncio.run(main())`.</li>\r\n                <li>Observa la salida en la consola: verás que todos los mensajes de inicio aparecen primero, y luego los de finalización van apareciendo a medida que sus \"temporizadores\" terminan.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM5L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM5L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">asyncio</span>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">time</span>\r\n\r\n<span class=\"keyword\">async def</span> <span class=\"function\">hacer_tostadas</span>():\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Poniendo el pan en la tostadora...\"</span>)\r\n    <span class=\"keyword\">await</span> <span class=\"variable\">asyncio</span>.<span class=\"function\">sleep</span>(<span class=\"number\">3</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"¡Tostadas listas!\"</span>)\r\n\r\n<span class=\"keyword\">async def</span> <span class=\"function\">preparar_cafe</span>():\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Iniciando la cafetera...\"</span>)\r\n    <span class=\"keyword\">await</span> <span class=\"variable\">asyncio</span>.<span class=\"function\">sleep</span>(<span class=\"number\">2</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"¡Café listo!\"</span>)\r\n\r\n<span class=\"keyword\">async def</span> <span class=\"function\">freir_huevos</span>():\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Poniendo los huevos en la sartén...\"</span>)\r\n    <span class=\"keyword\">await</span> <span class=\"variable\">asyncio</span>.<span class=\"function\">sleep</span>(<span class=\"number\">4</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"¡Huevos listos!\"</span>)\r\n\r\n<span class=\"keyword\">async def</span> <span class=\"function\">main</span>():\r\n    <span class=\"variable\">inicio</span> = <span class=\"variable\">time</span>.<span class=\"function\">time</span>()\r\n    <span class=\"keyword\">await</span> <span class=\"variable\">asyncio</span>.<span class=\"function\">gather</span>(\r\n        <span class=\"function\">hacer_tostadas</span>(),\r\n        <span class=\"function\">preparar_cafe</span>(),\r\n        <span class=\"function\">freir_huevos</span>()\r\n    )\r\n    <span class=\"variable\">fin</span> = <span class=\"variable\">time</span>.<span class=\"function\">time</span>()\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"\\nDesayuno completo en {fin - inicio:.2f} segundos.\"</span>)\r\n\r\n<span class=\"variable\">asyncio</span>.<span class=\"function\">run</span>(<span class=\"function\">main</span>())\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Simulador de Desayuno Asíncrono</h3>\r\n            <p><strong>Objetivo:</strong> Ver la concurrencia en acción creando varias tareas asíncronas que se ejecutan \"a la vez\".</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `02_desayuno_async.py`.</li>\r\n                <li>Importa el módulo `asyncio`.</li>\r\n                <li>Crea tres corutinas (`async def`): `hacer_tostadas()`, `preparar_cafe()` y `freir_huevos()`.</li>\r\n                <li>Dentro de cada una, imprime un mensaje de inicio (ej: \"Poniendo el pan en la tostadora...\"), luego usa `await asyncio.sleep()` con diferentes duraciones (ej: 3, 2 y 4 segundos), y finalmente imprime un mensaje de finalización (ej: \"¡Tostadas listas!\").</li>\r\n                <li>Crea una corutina principal `main()` donde uses `asyncio.gather()` para ejecutar las tres tareas de forma concurrente.</li>\r\n                <li>Al final del script, ejecuta la función `main()` con `asyncio.run(main())`.</li>\r\n                <li>Observa la salida en la consola: verás que todos los mensajes de inicio aparecen primero, y luego los de finalización van apareciendo a medida que sus \"temporizadores\" terminan.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM5L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM5L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">asyncio</span>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">time</span>\r\n\r\n<span class=\"keyword\">async def</span> <span class=\"function\">hacer_tostadas</span>():\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Poniendo el pan en la tostadora...\"</span>)\r\n    <span class=\"keyword\">await</span> <span class=\"variable\">asyncio</span>.<span class=\"function\">sleep</span>(<span class=\"number\">3</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"¡Tostadas listas!\"</span>)\r\n\r\n<span class=\"keyword\">async def</span> <span class=\"function\">preparar_cafe</span>():\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Iniciando la cafetera...\"</span>)\r\n    <span class=\"keyword\">await</span> <span class=\"variable\">asyncio</span>.<span class=\"function\">sleep</span>(<span class=\"number\">2</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"¡Café listo!\"</span>)\r\n\r\n<span class=\"keyword\">async def</span> <span class=\"function\">freir_huevos</span>():\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Poniendo los huevos en la sartén...\"</span>)\r\n    <span class=\"keyword\">await</span> <span class=\"variable\">asyncio</span>.<span class=\"function\">sleep</span>(<span class=\"number\">4</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"¡Huevos listos!\"</span>)\r\n\r\n<span class=\"keyword\">async def</span> <span class=\"function\">main</span>():\r\n    <span class=\"variable\">inicio</span> = <span class=\"variable\">time</span>.<span class=\"function\">time</span>()\r\n    <span class=\"keyword\">await</span> <span class=\"variable\">asyncio</span>.<span class=\"function\">gather</span>(\r\n        <span class=\"function\">hacer_tostadas</span>(),\r\n        <span class=\"function\">preparar_cafe</span>(),\r\n        <span class=\"function\">freir_huevos</span>()\r\n    )\r\n    <span class=\"variable\">fin</span> = <span class=\"variable\">time</span>.<span class=\"function\">time</span>()\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"\\nDesayuno completo en {fin - inicio:.2f} segundos.\"</span>)\r\n\r\n<span class=\"variable\">asyncio</span>.<span class=\"function\">run</span>(<span class=\"function\">main</span>())\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 2, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 18, "fields": {"modulo": 5, "titulo": "Decoradores y generadores", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 5, Lección 3: Decoradores y Generadores - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 3: Decoradores y Generadores</h1>\r\n        <p class=\"lesson-intro\">\r\n            En esta lección, exploraremos dos conceptos de nivel intermedio-avanzado que son clave en Python. Los **decoradores** nos permiten modificar o extender el comportamiento de funciones sin alterar su código. Los **generadores** nos ofrecen una forma increíblemente eficiente de trabajar con secuencias de datos, especialmente cuando son muy grandes.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Decoradores</h2>\r\n        <p>Un **decorador** es, en esencia, una función que toma otra función como argumento, le añade alguna funcionalidad y devuelve una nueva función modificada. Es una forma de \"envolver\" una función con otra.</p>\r\n        <p><strong>Analogía:</strong> Piensa en una función como un regalo. Un decorador es el papel de regalo y el lazo que le pones encima. El regalo original sigue siendo el mismo, pero ahora tiene una presentación (funcionalidad) adicional.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Sintaxis de un Decorador</h3>\r\n            <p><strong>Descripción:</strong> Se utiliza la sintaxis del \"azúcar sintáctico\" con la arroba (`@`) para aplicar un decorador a una función de manera limpia y legible.</p>\r\n            <p><strong>Sintaxis:</strong> <code>@nombre_del_decorador</code></p>\r\n            <p><strong>Ejemplo Práctico:</strong> Un decorador que mide el tiempo de ejecución de una función.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">time</span>\r\n\r\n<span class=\"comment\"># 1. Definimos el decorador</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">medidor_de_tiempo</span>(<span class=\"variable\">funcion_original</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">wrapper</span>(*<span class=\"variable\">args</span>, **<span class=\"variable\">kwargs</span>):\r\n        <span class=\"variable\">inicio</span> = <span class=\"variable\">time</span>.<span class=\"function\">time</span>()\r\n        <span class=\"variable\">resultado</span> = <span class=\"variable\">funcion_original</span>(*<span class=\"variable\">args</span>, **<span class=\"variable\">kwargs</span>)\r\n        <span class=\"variable\">fin</span> = <span class=\"variable\">time</span>.<span class=\"function\">time</span>()\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"La función '{funcion_original.__name__}' tardó {fin - inicio:.4f} segundos.\"</span>)\r\n        <span class=\"keyword\">return</span> <span class=\"variable\">resultado</span>\r\n    <span class=\"keyword\">return</span> <span class=\"variable\">wrapper</span>\r\n\r\n<span class=\"comment\"># 2. Aplicamos el decorador a una función</span>\r\n@<span class=\"function\">medidor_de_tiempo</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">proceso_lento</span>(<span class=\"variable\">segundos</span>):\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Iniciando proceso lento...\"</span>)\r\n    <span class=\"variable\">time</span>.<span class=\"function\">sleep</span>(<span class=\"variable\">segundos</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"Proceso finalizado.\"</span>)\r\n\r\n<span class=\"comment\"># 3. Llamamos a la función decorada</span>\r\n<span class=\"function\">proceso_lento</span>(<span class=\"number\">2</span>)\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 2: Generadores y la Palabra Clave `yield`</h2>\r\n        <p>Un **generador** es una función especial que no devuelve un único valor y termina, sino que \"produce\" (<code>yield</code>) una secuencia de valores, uno a la vez, pausando su estado entre cada uno. Son extremadamente eficientes con la memoria.</p>\r\n        <p><strong>Analogía:</strong> Una función normal con `return` es como un restaurante que te entrega todo tu pedido de una vez en una bolsa. Un generador con `yield` es como un dispensador de caramelos: te da un caramelo cada vez que lo accionas y guarda el resto para la próxima vez.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: La Palabra Clave <code>yield</code></h3>\r\n            <p><strong>Descripción:</strong> `yield` es similar a `return`, pero en lugar de terminar la función, pausa su ejecución y guarda su estado interno. Cuando se le pide el siguiente valor, reanuda la ejecución desde donde se quedó.</p>\r\n            <p><strong>Ejemplo Práctico:</strong> Un generador para la secuencia de Fibonacci.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Definimos la función generadora</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">generador_fibonacci</span>(<span class=\"variable\">limite</span>):\r\n    <span class=\"variable\">a</span>, <span class=\"variable\">b</span> = <span class=\"number\">0</span>, <span class=\"number\">1</span>\r\n    <span class=\"keyword\">while</span> <span class=\"variable\">a</span> < <span class=\"variable\">limite</span>:\r\n        <span class=\"keyword\">yield</span> <span class=\"variable\">a</span> <span class=\"comment\"># Produce el valor actual y pausa</span>\r\n        <span class=\"variable\">a</span>, <span class=\"variable\">b</span> = <span class=\"variable\">b</span>, <span class=\"variable\">a</span> + <span class=\"variable\">b</span>\r\n\r\n<span class=\"comment\"># Usamos el generador en un bucle for</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Secuencia de Fibonacci hasta 50:\"</span>)\r\n<span class=\"keyword\">for</span> <span class=\"variable\">numero</span> <span class=\"keyword\">in</span> <span class=\"function\">generador_fibonacci</span>(<span class=\"number\">50</span>):\r\n    <span class=\"function\">print</span>(<span class=\"variable\">numero</span>, <span class=\"variable\">end</span>=<span class=\"highlight\">\" \"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Secuencia de Fibonacci hasta 50:</span>\r\n<span class=\"highlight\">0 1 1 2 3 5 8 13 21 34 </span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 3 (Módulo 5)</h3>\r\n\r\n            <h4>Ejercicio 1: Decorador de Registro (Logging)</h4>\r\n            <p><strong>Objetivo:</strong> Crear un decorador que imprima un mensaje antes y después de que una función se ejecute.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_decorador_log.py`.</li>\r\n                <li>Define un decorador llamado `log_llamada` que:\r\n                    <ul>\r\n                        <li>Imprima \"Llamando a la función '[nombre de la función]'...\".</li>\r\n                        <li>Ejecute la función original.</li>\r\n                        <li>Imprima \"La función '[nombre de la función]' ha finalizado.\".</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Crea una función simple `saludar(nombre)` que imprima un saludo.</li>\r\n                <li>Aplica el decorador `@log_llamada` a la función `saludar`.</li>\r\n                <li>Llama a `saludar(\"Mundo\")`.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM5L3-1')\">Ver Solución</span>\r\n            <div id=\"solucionM5L3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">def</span> <span class=\"function\">log_llamada</span>(<span class=\"variable\">func</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">wrapper</span>(*<span class=\"variable\">args</span>, **<span class=\"variable\">kwargs</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Llamando a la función '{func.__name__}'...\"</span>)\r\n        <span class=\"variable\">resultado</span> = <span class=\"variable\">func</span>(*<span class=\"variable\">args</span>, **<span class=\"variable\">kwargs</span>)\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"La función '{func.__name__}' ha finalizado.\"</span>)\r\n        <span class=\"keyword\">return</span> <span class=\"variable\">resultado</span>\r\n    <span class=\"keyword\">return</span> <span class=\"variable\">wrapper</span>\r\n\r\n@<span class=\"function\">log_llamada</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">saludar</span>(<span class=\"variable\">nombre</span>):\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"¡Hola, {nombre}!\"</span>)\r\n\r\n<span class=\"function\">saludar</span>(<span class=\"highlight\">\"Mundo\"</span>)\r\n                </pre></div>\r\n            </div>\r\n\r\n            <h4 style=\"margin-top: 30px;\">Ejercicio 2: Generador de Números Pares</h4>\r\n            <p><strong>Objetivo:</strong> Crear un generador para producir una secuencia de números pares de forma eficiente.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_generador_pares.py`.</li>\r\n                <li>Define una función generadora `generador_pares(limite)` que acepte un número `limite`.</li>\r\n                <li>La función debe usar un bucle y la palabra clave `yield` para producir todos los números pares desde 0 hasta `limite` (sin incluir el límite).</li>\r\n                <li>Usa un bucle `for` para iterar sobre el generador `generador_pares(10)` y imprime cada número par que produce.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM5L3-2')\">Ver Solución</span>\r\n            <div id=\"solucionM5L3-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">def</span> <span class=\"function\">generador_pares</span>(<span class=\"variable\">limite</span>):\r\n    <span class=\"variable\">num</span> = <span class=\"number\">0</span>\r\n    <span class=\"keyword\">while</span> <span class=\"variable\">num</span> < <span class=\"variable\">limite</span>:\r\n        <span class=\"keyword\">if</span> <span class=\"variable\">num</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span>:\r\n            <span class=\"keyword\">yield</span> <span class=\"variable\">num</span>\r\n        <span class=\"variable\">num</span> += <span class=\"number\">1</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Números pares hasta 10:\"</span>)\r\n<span class=\"keyword\">for</span> <span class=\"variable\">par</span> <span class=\"keyword\">in</span> <span class=\"function\">generador_pares</span>(<span class=\"number\">10</span>):\r\n    <span class=\"function\">print</span>(<span class=\"variable\">par</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 3 (Módulo 5)</h3>\r\n\r\n            <h4>Ejercicio 1: Decorador de Registro (Logging)</h4>\r\n            <p><strong>Objetivo:</strong> Crear un decorador que imprima un mensaje antes y después de que una función se ejecute.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_decorador_log.py`.</li>\r\n                <li>Define un decorador llamado `log_llamada` que:\r\n                    <ul>\r\n                        <li>Imprima \"Llamando a la función '[nombre de la función]'...\".</li>\r\n                        <li>Ejecute la función original.</li>\r\n                        <li>Imprima \"La función '[nombre de la función]' ha finalizado.\".</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Crea una función simple `saludar(nombre)` que imprima un saludo.</li>\r\n                <li>Aplica el decorador `@log_llamada` a la función `saludar`.</li>\r\n                <li>Llama a `saludar(\"Mundo\")`.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM5L3-1')\">Ver Solución</span>\r\n            <div id=\"solucionM5L3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">def</span> <span class=\"function\">log_llamada</span>(<span class=\"variable\">func</span>):\r\n    <span class=\"keyword\">def</span> <span class=\"function\">wrapper</span>(*<span class=\"variable\">args</span>, **<span class=\"variable\">kwargs</span>):\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"Llamando a la función '{func.__name__}'...\"</span>)\r\n        <span class=\"variable\">resultado</span> = <span class=\"variable\">func</span>(*<span class=\"variable\">args</span>, **<span class=\"variable\">kwargs</span>)\r\n        <span class=\"function\">print</span>(<span class=\"highlight\">f\"La función '{func.__name__}' ha finalizado.\"</span>)\r\n        <span class=\"keyword\">return</span> <span class=\"variable\">resultado</span>\r\n    <span class=\"keyword\">return</span> <span class=\"variable\">wrapper</span>\r\n\r\n@<span class=\"function\">log_llamada</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">saludar</span>(<span class=\"variable\">nombre</span>):\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"¡Hola, {nombre}!\"</span>)\r\n\r\n<span class=\"function\">saludar</span>(<span class=\"highlight\">\"Mundo\"</span>)\r\n                </pre></div>\r\n            </div>\r\n\r\n            <h4 style=\"margin-top: 30px;\">Ejercicio 2: Generador de Números Pares</h4>\r\n            <p><strong>Objetivo:</strong> Crear un generador para producir una secuencia de números pares de forma eficiente.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_generador_pares.py`.</li>\r\n                <li>Define una función generadora `generador_pares(limite)` que acepte un número `limite`.</li>\r\n                <li>La función debe usar un bucle y la palabra clave `yield` para producir todos los números pares desde 0 hasta `limite` (sin incluir el límite).</li>\r\n                <li>Usa un bucle `for` para iterar sobre el generador `generador_pares(10)` y imprime cada número par que produce.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM5L3-2')\">Ver Solución</span>\r\n            <div id=\"solucionM5L3-2\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">def</span> <span class=\"function\">generador_pares</span>(<span class=\"variable\">limite</span>):\r\n    <span class=\"variable\">num</span> = <span class=\"number\">0</span>\r\n    <span class=\"keyword\">while</span> <span class=\"variable\">num</span> < <span class=\"variable\">limite</span>:\r\n        <span class=\"keyword\">if</span> <span class=\"variable\">num</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span>:\r\n            <span class=\"keyword\">yield</span> <span class=\"variable\">num</span>\r\n        <span class=\"variable\">num</span> += <span class=\"number\">1</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Números pares hasta 10:\"</span>)\r\n<span class=\"keyword\">for</span> <span class=\"variable\">par</span> <span class=\"keyword\">in</span> <span class=\"function\">generador_pares</span>(<span class=\"number\">10</span>):\r\n    <span class=\"function\">print</span>(<span class=\"variable\">par</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 3, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 19, "fields": {"modulo": 6, "titulo": "Modulos esenciales", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 6, Lección 1: Módulos Esenciales - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 1: Módulos Esenciales de la Librería Estándar</h1>\r\n        <p class=\"lesson-intro\">\r\n            Python es famoso por su filosofía de \"baterías incluidas\". Esto significa que viene con una enorme **Librería Estándar**, una colección de módulos listos para usar que resuelven problemas comunes sin necesidad de instalar nada extra. En esta lección, exploraremos algunos de los más importantes.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Módulo <code>os</code> - Interactuando con el Sistema Operativo</h2>\r\n        <p>El módulo `os` te proporciona una forma de interactuar con el sistema operativo. Es tu herramienta para trabajar con archivos y directorios: crear carpetas, listar contenidos, comprobar si un archivo existe, etc.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Funciones Comunes del Módulo <code>os</code></h3>\r\n            <ul>\r\n                <li><strong><code>os.path.exists(ruta)</code>:</strong> Comprueba si un archivo o directorio existe.</li>\r\n                <li><strong><code>os.makedirs(ruta)</code>:</strong> Crea un directorio (y todos los intermedios).</li>\r\n                <li><strong><code>os.listdir(ruta)</code>:</strong> Devuelve una lista con los nombres de los archivos y carpetas en una ruta.</li>\r\n            </ul>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: Módulo <code>sys</code> - Interactuando con el Intérprete</h2>\r\n        <p>El módulo `sys` te da acceso a variables y funciones que están fuertemente relacionadas con el intérprete de Python, como los argumentos pasados a tu script desde la línea de comandos.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Argumentos de la Línea de Comandos: <code>sys.argv</code></h3>\r\n            <p><code>sys.argv</code> es una lista que contiene los argumentos pasados a tu script al ejecutarlo desde la terminal. El primer elemento (`sys.argv[0]`) es siempre el nombre del propio script.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"comment\"># Imagina un archivo llamado 'mi_script.py' con este código:</span>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">sys</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Argumentos recibidos: {sys.argv}\"</span>)\r\n\r\n<span class=\"comment\"># Si lo ejecutas desde la terminal así:</span>\r\n<span class=\"comment\">> python mi_script.py hola mundo 123</span>\r\n\r\n<span class=\"comment\"># La Salida Esperada en la Consola sería:</span>\r\n<span class=\"highlight\">Argumentos recibidos: ['mi_script.py', 'hola', 'mundo', '123']</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 3: Módulo <code>datetime</code> - Manejando Fechas y Horas</h2>\r\n        <p>El módulo `datetime` simplifica enormemente el trabajo con fechas y horas, permitiéndote obtener la fecha actual, formatearla y realizar cálculos.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>Obtener y Formatear la Fecha Actual</h3>\r\n            <p><code>datetime.datetime.now()</code> crea un objeto con la fecha y hora actuales. El método <code>.strftime(\"formato\")</code> se usa para convertirlo a un string legible.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">datetime</span>\r\n<span class=\"variable\">ahora</span> = <span class=\"variable\">datetime</span>.<span class=\"variable\">datetime</span>.<span class=\"function\">now</span>()\r\n<span class=\"variable\">fecha_formateada</span> = <span class=\"variable\">ahora</span>.<span class=\"function\">strftime</span>(<span class=\"highlight\">\"%Y-%m-%d %H:%M:%S\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Fecha y hora: {fecha_formateada}\"</span>)\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 4: Módulo <code>logging</code> - Registro de Eventos Profesional</h2>\r\n        <p>Usar `print()` para depurar está bien al principio, pero para aplicaciones serias, el módulo `logging` es la herramienta estándar. Te permite registrar mensajes con diferentes niveles de severidad (DEBUG, INFO, WARNING, ERROR) y dirigirlos a la consola o a un archivo.</p>\r\n        <div class=\"concept-card\">\r\n            <h3>Configuración y Uso Básico de Logging</h3>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">logging</span>\r\n\r\n<span class=\"comment\"># Configuración básica para que muestre mensajes de nivel INFO y superiores</span>\r\n<span class=\"variable\">logging</span>.<span class=\"function\">basicConfig</span>(<span class=\"variable\">level</span>=<span class=\"variable\">logging</span>.<span class=\"variable\">INFO</span>, <span class=\"variable\">format</span>=<span class=\"highlight\">'%(asctime)s - %(levelname)s - %(message)s'</span>)\r\n\r\n<span class=\"variable\">logging</span>.<span class=\"function\">info</span>(<span class=\"highlight\">\"Este es un mensaje informativo.\"</span>)\r\n<span class=\"variable\">logging</span>.<span class=\"function\">warning</span>(<span class=\"highlight\">\"Cuidado, el disco está casi lleno.\"</span>)\r\n<span class=\"variable\">logging</span>.<span class=\"function\">error</span>(<span class=\"highlight\">\"No se pudo conectar a la base de datos.\"</span>)\r\n            </pre></div>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicio: Script de Backup Simple</h3>\r\n            <p><strong>Objetivo:</strong> Usar `sys`, `os`, `shutil` (un módulo para operaciones de alto nivel con archivos) y `logging` para crear un script de backup funcional que se ejecuta desde la terminal.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `01_backup.py`. Importa `sys`, `os`, `shutil` y `logging`.</li>\r\n                <li>Configura `logging` para que muestre mensajes de nivel INFO.</li>\r\n                <li>El script debe aceptar dos argumentos desde la terminal: el archivo de origen y el directorio de destino. Usa `sys.argv` para leerlos.</li>\r\n                <li>Verifica que se hayan proporcionado exactamente dos argumentos. Si no, muestra un error con `logging.error()` y sal del programa con `sys.exit()`.</li>\r\n                <li>Usa `os.path.exists()` para comprobar que el archivo de origen existe. Si no, loguea un error y sal.</li>\r\n                <li>Usa `os.makedirs()` con `exist_ok=True` para asegurarte de que el directorio de destino existe.</li>\r\n                <li>Usa `shutil.copy(origen, destino)` para copiar el archivo.</li>\r\n                <li>Loguea cada paso del proceso con `logging.info()` (ej: \"Iniciando backup...\", \"Copia completada con éxito.\").</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM6L1-1')\">Ver Solución</span>\r\n            <div id=\"solucionM6L1-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">sys</span>, <span class=\"variable\">os</span>, <span class=\"variable\">shutil</span>, <span class=\"variable\">logging</span>\r\n\r\n<span class=\"variable\">logging</span>.<span class=\"function\">basicConfig</span>(<span class=\"variable\">level</span>=<span class=\"variable\">logging</span>.<span class=\"variable\">INFO</span>, <span class=\"variable\">format</span>=<span class=\"highlight\">'%(levelname)s: %(message)s'</span>)\r\n\r\n<span class=\"comment\"># 1. Verificar argumentos</span>\r\n<span class=\"keyword\">if</span> <span class=\"function\">len</span>(<span class=\"variable\">sys</span>.<span class=\"variable\">argv</span>) != <span class=\"number\">3</span>:\r\n    <span class=\"variable\">logging</span>.<span class=\"function\">error</span>(<span class=\"highlight\">\"Uso: python 01_backup.py &lt;archivo_origen&gt; &lt;dir_destino&gt;\"</span>)\r\n    <span class=\"variable\">sys</span>.<span class=\"function\">exit</span>(<span class=\"number\">1</span>)\r\n\r\n<span class=\"variable\">origen</span> = <span class=\"variable\">sys</span>.<span class=\"variable\">argv</span>[<span class=\"number\">1</span>]\r\n<span class=\"variable\">destino</span> = <span class=\"variable\">sys</span>.<span class=\"variable\">argv</span>[<span class=\"number\">2</span>]\r\n\r\n<span class=\"comment\"># 2. Verificar origen y crear destino</span>\r\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable\">os</span>.<span class=\"variable\">path</span>.<span class=\"function\">exists</span>(<span class=\"variable\">origen</span>):\r\n    <span class=\"variable\">logging</span>.<span class=\"function\">error</span>(<span class=\"highlight\">f\"El archivo de origen '{origen}' no existe.\"</span>)\r\n    <span class=\"variable\">sys</span>.<span class=\"function\">exit</span>(<span class=\"number\">1</span>)\r\n\r\n<span class=\"variable\">os</span>.<span class=\"function\">makedirs</span>(<span class=\"variable\">destino</span>, <span class=\"variable\">exist_ok</span>=<span class=\"boolean\">True</span>)\r\n\r\n<span class=\"comment\"># 3. Copiar el archivo</span>\r\n<span class=\"keyword\">try</span>:\r\n    <span class=\"variable\">shutil</span>.<span class=\"function\">copy</span>(<span class=\"variable\">origen</span>, <span class=\"variable\">destino</span>)\r\n    <span class=\"variable\">logging</span>.<span class=\"function\">info</span>(<span class=\"highlight\">f\"Backup de '{origen}' completado en '{destino}'.\"</span>)\r\n<span class=\"keyword\">except</span> <span class=\"variable\">Exception</span> <span class=\"keyword\">as</span> <span class=\"variable\">e</span>:\r\n    <span class=\"variable\">logging</span>.<span class=\"function\">error</span>(<span class=\"highlight\">f\"Ocurrió un error al copiar: {e}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Script de Backup Simple</h3>\r\n            <p><strong>Objetivo:</strong> Usar `sys`, `os`, `shutil` (un módulo para operaciones de alto nivel con archivos) y `logging` para crear un script de backup funcional que se ejecuta desde la terminal.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `01_backup.py`. Importa `sys`, `os`, `shutil` y `logging`.</li>\r\n                <li>Configura `logging` para que muestre mensajes de nivel INFO.</li>\r\n                <li>El script debe aceptar dos argumentos desde la terminal: el archivo de origen y el directorio de destino. Usa `sys.argv` para leerlos.</li>\r\n                <li>Verifica que se hayan proporcionado exactamente dos argumentos. Si no, muestra un error con `logging.error()` y sal del programa con `sys.exit()`.</li>\r\n                <li>Usa `os.path.exists()` para comprobar que el archivo de origen existe. Si no, loguea un error y sal.</li>\r\n                <li>Usa `os.makedirs()` con `exist_ok=True` para asegurarte de que el directorio de destino existe.</li>\r\n                <li>Usa `shutil.copy(origen, destino)` para copiar el archivo.</li>\r\n                <li>Loguea cada paso del proceso con `logging.info()` (ej: \"Iniciando backup...\", \"Copia completada con éxito.\").</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM6L1-1')\">Ver Solución</span>\r\n            <div id=\"solucionM6L1-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">sys</span>, <span class=\"variable\">os</span>, <span class=\"variable\">shutil</span>, <span class=\"variable\">logging</span>\r\n\r\n<span class=\"variable\">logging</span>.<span class=\"function\">basicConfig</span>(<span class=\"variable\">level</span>=<span class=\"variable\">logging</span>.<span class=\"variable\">INFO</span>, <span class=\"variable\">format</span>=<span class=\"highlight\">'%(levelname)s: %(message)s'</span>)\r\n\r\n<span class=\"comment\"># 1. Verificar argumentos</span>\r\n<span class=\"keyword\">if</span> <span class=\"function\">len</span>(<span class=\"variable\">sys</span>.<span class=\"variable\">argv</span>) != <span class=\"number\">3</span>:\r\n    <span class=\"variable\">logging</span>.<span class=\"function\">error</span>(<span class=\"highlight\">\"Uso: python 01_backup.py &lt;archivo_origen&gt; &lt;dir_destino&gt;\"</span>)\r\n    <span class=\"variable\">sys</span>.<span class=\"function\">exit</span>(<span class=\"number\">1</span>)\r\n\r\n<span class=\"variable\">origen</span> = <span class=\"variable\">sys</span>.<span class=\"variable\">argv</span>[<span class=\"number\">1</span>]\r\n<span class=\"variable\">destino</span> = <span class=\"variable\">sys</span>.<span class=\"variable\">argv</span>[<span class=\"number\">2</span>]\r\n\r\n<span class=\"comment\"># 2. Verificar origen y crear destino</span>\r\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable\">os</span>.<span class=\"variable\">path</span>.<span class=\"function\">exists</span>(<span class=\"variable\">origen</span>):\r\n    <span class=\"variable\">logging</span>.<span class=\"function\">error</span>(<span class=\"highlight\">f\"El archivo de origen '{origen}' no existe.\"</span>)\r\n    <span class=\"variable\">sys</span>.<span class=\"function\">exit</span>(<span class=\"number\">1</span>)\r\n\r\n<span class=\"variable\">os</span>.<span class=\"function\">makedirs</span>(<span class=\"variable\">destino</span>, <span class=\"variable\">exist_ok</span>=<span class=\"boolean\">True</span>)\r\n\r\n<span class=\"comment\"># 3. Copiar el archivo</span>\r\n<span class=\"keyword\">try</span>:\r\n    <span class=\"variable\">shutil</span>.<span class=\"function\">copy</span>(<span class=\"variable\">origen</span>, <span class=\"variable\">destino</span>)\r\n    <span class=\"variable\">logging</span>.<span class=\"function\">info</span>(<span class=\"highlight\">f\"Backup de '{origen}' completado en '{destino}'.\"</span>)\r\n<span class=\"keyword\">except</span> <span class=\"variable\">Exception</span> <span class=\"keyword\">as</span> <span class=\"variable\">e</span>:\r\n    <span class=\"variable\">logging</span>.<span class=\"function\">error</span>(<span class=\"highlight\">f\"Ocurrió un error al copiar: {e}\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 1, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 20, "fields": {"modulo": 6, "titulo": "Expresiones regulares", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 6, Lección 2: Expresiones Regulares - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 2: Expresiones Regulares</h1>\r\n        <p class=\"lesson-intro\">\r\n            Las **expresiones regulares** (o \"regex\") son un \"mini-lenguaje\" especializado en la búsqueda y manipulación de patrones en texto. Son una herramienta fundamental para tareas como validar formatos (emails, números de teléfono), encontrar datos específicos en un texto largo o reemplazar partes de una cadena de caracteres. En Python, trabajamos con ellas a través del módulo <code>re</code>.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Funciones Básicas del Módulo <code>re</code></h2>\r\n        <p>El módulo `re` nos ofrece varias funciones para trabajar con patrones. Las más comunes son `search`, `findall` y `sub`.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>re.search(patron, texto)</code></h3>\r\n            <p><strong>Descripción:</strong> Escanea el `texto` buscando la **primera ubicación** donde el `patron` produce una coincidencia.</p>\r\n            <p><strong>Retorna:</strong> Un objeto \"match\" si encuentra una coincidencia, o `None` si no encuentra nada.</p>\r\n            <p><strong>Ejemplo Práctico:</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">re</span>\r\n<span class=\"variable\">texto</span> = <span class=\"highlight\">\"El número de teléfono es 123-456-7890.\"</span>\r\n<span class=\"variable\">patron</span> = <span class=\"highlight\">r\"\\d{3}-\\d{3}-\\d{4}\"</span> <span class=\"comment\"># \\d representa un dígito, {3} significa 3 veces</span>\r\n\r\n<span class=\"variable\">coincidencia</span> = <span class=\"variable\">re</span>.<span class=\"function\">search</span>(<span class=\"variable\">patron</span>, <span class=\"variable\">texto</span>)\r\n<span class=\"keyword\">if</span> <span class=\"variable\">coincidencia</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Número encontrado: {coincidencia.group(0)}\"</span>)\r\n<span class=\"keyword\">else</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"No se encontró un número.\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Número encontrado: 123-456-7890</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>re.findall(patron, texto)</code></h3>\r\n            <p><strong>Descripción:</strong> Encuentra **todas** las subcadenas que coinciden con el `patron` y las devuelve como una lista de strings.</p>\r\n            <p><strong>Retorna:</strong> Una lista de strings.</p>\r\n            <p><strong>Ejemplo Práctico:</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">re</span>\r\n<span class=\"variable\">texto</span> = <span class=\"highlight\">\"Los correos son user1@mail.com y user2@domain.org\"</span>\r\n<span class=\"variable\">patron_email</span> = <span class=\"highlight\">r\"\\w+@\\w+\\.\\w+\"</span> <span class=\"comment\"># \\w+ significa \"una o más letras/números\"</span>\r\n\r\n<span class=\"variable\">emails</span> = <span class=\"variable\">re</span>.<span class=\"function\">findall</span>(<span class=\"variable\">patron_email</span>, <span class=\"variable\">texto</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Emails encontrados: {emails}\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Emails encontrados: ['user1@mail.com', 'user2@domain.org']</span>\r\n            </pre></div>\r\n        </div>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>re.sub(patron, reemplazo, texto)</code></h3>\r\n            <p><strong>Descripción:</strong> Busca todas las ocurrencias del `patron` en el `texto` y las reemplaza con el string de `reemplazo`.</p>\r\n            <p><strong>Retorna:</strong> Un nuevo string con los reemplazos hechos.</p>\r\n            <p><strong>Ejemplo Práctico:</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">re</span>\r\n<span class=\"variable\">texto</span> = <span class=\"highlight\">\"Mi número es 12345 y el tuyo 54321\"</span>\r\n<span class=\"variable\">texto_censurado</span> = <span class=\"variable\">re</span>.<span class=\"function\">sub</span>(<span class=\"highlight\">r\"\\d\"</span>, <span class=\"highlight\">\"X\"</span>, <span class=\"variable\">texto</span>) <span class=\"comment\"># Reemplaza cada dígito (\\d) por una 'X'</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"variable\">texto_censurado</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Mi número es XXXXX y el tuyo XXXXX</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicios de la Lección 2 (Módulo 6)</h3>\r\n\r\n            <h4>Ejercicio 1: Extractor de Hashtags</h4>\r\n            <p><strong>Objetivo:</strong> Usar `re.findall` para extraer todos los hashtags de un texto.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `02_extractor_hashtags.py`.</li>\r\n                <li>Importa el módulo `re`.</li>\r\n                <li>Define un string `texto_post` que contenga varios hashtags (ej: \"¡Qué gran día de #programacion en #Python!\").</li>\r\n                <li>Define un patrón de regex que busque un `#` seguido de una o más letras o números (`#\\w+`).</li>\r\n                <li>Usa `re.findall()` para encontrar todos los hashtags y guárdalos en una lista.</li>\r\n                <li>Imprime la lista de hashtags encontrados.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM6L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM6L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">re</span>\r\n\r\n<span class=\"variable\">texto_post</span> = <span class=\"highlight\">\"¡Qué gran día de #programacion en #Python! Me encanta el #codigo limpio.\"</span>\r\n<span class=\"variable\">patron_hashtag</span> = <span class=\"highlight\">r\"#\\w+\"</span>\r\n\r\n<span class=\"variable\">hashtags</span> = <span class=\"variable\">re</span>.<span class=\"function\">findall</span>(<span class=\"variable\">patron_hashtag</span>, <span class=\"variable\">texto_post</span>)\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Hashtags Encontrados ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">hashtags</span>)\r\n<span class=\"comment\"># Salida Esperada: ['#programacion', '#Python', '#codigo']</span>\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicios de la Lección 2 (Módulo 6)</h3>\r\n\r\n            <h4>Ejercicio 1: Extractor de Hashtags</h4>\r\n            <p><strong>Objetivo:</strong> Usar `re.findall` para extraer todos los hashtags de un texto.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `02_extractor_hashtags.py`.</li>\r\n                <li>Importa el módulo `re`.</li>\r\n                <li>Define un string `texto_post` que contenga varios hashtags (ej: \"¡Qué gran día de #programacion en #Python!\").</li>\r\n                <li>Define un patrón de regex que busque un `#` seguido de una o más letras o números (`#\\w+`).</li>\r\n                <li>Usa `re.findall()` para encontrar todos los hashtags y guárdalos en una lista.</li>\r\n                <li>Imprime la lista de hashtags encontrados.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM6L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM6L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">re</span>\r\n\r\n<span class=\"variable\">texto_post</span> = <span class=\"highlight\">\"¡Qué gran día de #programacion en #Python! Me encanta el #codigo limpio.\"</span>\r\n<span class=\"variable\">patron_hashtag</span> = <span class=\"highlight\">r\"#\\w+\"</span>\r\n\r\n<span class=\"variable\">hashtags</span> = <span class=\"variable\">re</span>.<span class=\"function\">findall</span>(<span class=\"variable\">patron_hashtag</span>, <span class=\"variable\">texto_post</span>)\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Hashtags Encontrados ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">hashtags</span>)\r\n<span class=\"comment\"># Salida Esperada: ['#programacion', '#Python', '#codigo']</span>\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 2, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 21, "fields": {"modulo": 6, "titulo": "Logging y debugging", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 6, Lección 3: Logging y Debugging - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 3: Logging y Debugging</h1>\r\n        <p class=\"lesson-intro\">\r\n            Escribir código es solo una parte del trabajo. La otra es encontrar y corregir errores (<strong>debugging</strong>) y registrar lo que hace tu programa (<strong>logging</strong>). Usar `print()` para depurar está bien al principio, pero para aplicaciones serias, Python ofrece herramientas mucho más potentes y profesionales.\r\n        </p>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Módulo <code>logging</code> - Un Registro de Eventos Profesional</h2>\r\n        <p>El módulo `logging` te permite registrar mensajes con diferentes niveles de severidad. Esto es infinitamente mejor que `print()` porque puedes filtrar mensajes, guardarlos en un archivo y obtener información detallada como la fecha, hora y el nivel del evento.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Los 5 Niveles de Logging</h3>\r\n            <p>El sistema de logging tiene 5 niveles estándar, ordenados de menor a mayor severidad. Al configurar el logger a un nivel (ej: INFO), solo se registrarán los mensajes de ese nivel o superiores.</p>\r\n            \r\n            <h4>🔵 Nivel: <code>DEBUG</code></h4>\r\n            <ul>\r\n                <li><strong>¿Para qué sirve?</strong> Para el diagnóstico detallado. Es el \"microscopio\" del programador.</li>\r\n                <li><strong>¿Dónde se emplea?</strong> Durante el desarrollo para rastrear el valor de variables, el flujo de ejecución, o estados complejos. Nunca debería estar activado en un entorno de producción.</li>\r\n            </ul>\r\n\r\n            <h4>🔵 Nivel: <code>INFO</code></h4>\r\n            <ul>\r\n                <li><strong>¿Para qué sirve?</strong> Para confirmar que todo funciona como se espera. Es el \"diario de a bordo\" de la aplicación.</li>\r\n                <li><strong>¿Dónde se emplea?</strong> Para registrar eventos rutinarios e importantes: \"Usuario X ha iniciado sesión\", \"Proceso de pago completado\", \"Conexión a la base de datos establecida\".</li>\r\n            </ul>\r\n\r\n            <h4>🔵 Nivel: <code>WARNING</code></h4>\r\n            <ul>\r\n                <li><strong>¿Para qué sirve?</strong> Para indicar que algo inesperado sucedió, pero el software sigue funcionando. Son alertas que pueden requerir atención.</li>\r\n                <li><strong>¿Dónde se emplea?</strong> Para situaciones como \"Contraseña a punto de expirar\", \"Uso de disco al 80%\", o \"Parámetro obsoleto detectado\".</li>\r\n            </ul>\r\n\r\n            <h4>🔵 Nivel: <code>ERROR</code></h4>\r\n            <ul>\r\n                <li><strong>¿Para qué sirve?</strong> Para registrar un problema serio que impidió que una operación se completara.</li>\r\n                <li><strong>¿Dónde se emplea?</strong> Típicamente dentro de un bloque `except`, cuando una operación crítica falla: \"No se pudo conectar a la base de datos\", \"El archivo de configuración no se encontró\".</li>\r\n            </ul>\r\n\r\n            <h4>🔵 Nivel: <code>CRITICAL</code></h4>\r\n            <ul>\r\n                <li><strong>¿Para qué sirve?</strong> Para un error gravísimo que puede causar que la aplicación se detenga por completo.</li>\r\n                <li><strong>¿Dónde se emplea?</strong> En situaciones catastróficas: \"El disco duro está lleno, no se puede escribir más\", \"Fallo de un componente crítico del sistema\".</li>\r\n            </ul>\r\n            \r\n            <h4>¿Cómo se implementan? (Ejemplo Funcional)</h4>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">logging</span>\r\n\r\n<span class=\"comment\"># Configuramos el logger para que solo muestre mensajes de nivel WARNING y superiores</span>\r\n<span class=\"variable\">logging</span>.<span class=\"function\">basicConfig</span>(<span class=\"variable\">level</span>=<span class=\"variable\">logging</span>.<span class=\"variable\">WARNING</span>, <span class=\"variable\">format</span>=<span class=\"highlight\">'%(levelname)s: %(message)s'</span>)\r\n\r\n<span class=\"comment\"># Estos mensajes serán ignorados porque su nivel es inferior a WARNING</span>\r\n<span class=\"variable\">logging</span>.<span class=\"function\">debug</span>(<span class=\"highlight\">\"Detalles de una variable interna.\"</span>)\r\n<span class=\"variable\">logging</span>.<span class=\"function\">info</span>(<span class=\"highlight\">\"El usuario ha accedido al panel.\"</span>)\r\n\r\n<span class=\"comment\"># Estos mensajes SÍ aparecerán</span>\r\n<span class=\"variable\">logging</span>.<span class=\"function\">warning</span>(<span class=\"highlight\">\"La API externa está respondiendo lentamente.\"</span>)\r\n<span class=\"variable\">logging</span>.<span class=\"function\">error</span>(<span class=\"highlight\">\"No se pudo procesar el pago del usuario 123.\"</span>)\r\n<span class=\"variable\">logging</span>.<span class=\"function\">critical</span>(<span class=\"highlight\">\"¡Fallo total del sistema de autenticación!\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">WARNING: La API externa está respondiendo lentamente.</span>\r\n<span class=\"highlight\">ERROR: No se pudo procesar el pago del usuario 123.</span>\r\n<span class=\"highlight\">CRITICAL: ¡Fallo total del sistema de autenticación!</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicio: Registrando un Proceso</h3>\r\n            <p><strong>Objetivo:</strong> Usar el módulo `logging` para registrar cada paso importante de un proceso en un archivo.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_procesador_datos.py`. Importa `logging` y `time`.</li>\r\n                <li>Configura `logging` para que guarde los mensajes en un archivo llamado `proceso.log`, con un nivel `INFO` y un formato que incluya la fecha/hora y el nivel del mensaje.</li>\r\n                <li>Define una lista de `datos` (ej: `[\"dato1\", \"dato2\", \"error\", \"dato3\"]`).</li>\r\n                <li>Loguea un mensaje de `INFO` al inicio del proceso.</li>\r\n                <li>Usa un bucle `for` para iterar sobre los `datos`.\r\n                    <ul>\r\n                        <li>Dentro del bucle, loguea un mensaje `INFO` indicando qué dato se está procesando.</li>\r\n                        <li>Si el dato es igual a `\"error\"`, loguea un mensaje de `ERROR`.</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Loguea un mensaje `INFO` al final del proceso.</li>\r\n                <li>Ejecuta el script y luego revisa el contenido del archivo `proceso.log`.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM6L3-1')\">Ver Solución</span>\r\n            <div id=\"solucionM6L3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">logging</span>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">time</span>\r\n\r\n<span class=\"variable\">logging</span>.<span class=\"function\">basicConfig</span>(<span class=\"variable\">filename</span>=<span class=\"highlight\">'proceso.log'</span>, <span class=\"variable\">level</span>=<span class=\"variable\">logging</span>.<span class=\"variable\">INFO</span>, <span class=\"variable\">format</span>=<span class=\"highlight\">'%(asctime)s - %(levelname)s - %(message)s'</span>)\r\n\r\n<span class=\"variable\">datos</span> = [<span class=\"highlight\">\"dato1\"</span>, <span class=\"highlight\">\"dato2\"</span>, <span class=\"highlight\">\"error\"</span>, <span class=\"highlight\">\"dato3\"</span>]\r\n\r\n<span class=\"variable\">logging</span>.<span class=\"function\">info</span>(<span class=\"highlight\">\"Inicio del procesamiento de datos.\"</span>)\r\n\r\n<span class=\"keyword\">for</span> <span class=\"variable\">dato</span> <span class=\"keyword\">in</span> <span class=\"variable\">datos</span>:\r\n    <span class=\"keyword\">if</span> <span class=\"variable\">dato</span> == <span class=\"highlight\">\"error\"</span>:\r\n        <span class=\"variable\">logging</span>.<span class=\"function\">error</span>(<span class=\"highlight\">f\"¡Error encontrado al procesar '{dato}'!\"</span>)\r\n    <span class=\"keyword\">else</span>:\r\n        <span class=\"variable\">logging</span>.<span class=\"function\">info</span>(<span class=\"highlight\">f\"Procesando '{dato}' correctamente.\"</span>)\r\n\r\n<span class=\"variable\">logging</span>.<span class=\"function\">info</span>(<span class=\"highlight\">\"Procesamiento de datos finalizado.\"</span>)\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Proceso completado. Revisa 'proceso.log' para ver los detalles.\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Registrando un Proceso</h3>\r\n            <p><strong>Objetivo:</strong> Usar el módulo `logging` para registrar cada paso importante de un proceso en un archivo.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_procesador_datos.py`. Importa `logging` y `time`.</li>\r\n                <li>Configura `logging` para que guarde los mensajes en un archivo llamado `proceso.log`, con un nivel `INFO` y un formato que incluya la fecha/hora y el nivel del mensaje.</li>\r\n                <li>Define una lista de `datos` (ej: `[\"dato1\", \"dato2\", \"error\", \"dato3\"]`).</li>\r\n                <li>Loguea un mensaje de `INFO` al inicio del proceso.</li>\r\n                <li>Usa un bucle `for` para iterar sobre los `datos`.\r\n                    <ul>\r\n                        <li>Dentro del bucle, loguea un mensaje `INFO` indicando qué dato se está procesando.</li>\r\n                        <li>Si el dato es igual a `\"error\"`, loguea un mensaje de `ERROR`.</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Loguea un mensaje `INFO` al final del proceso.</li>\r\n                <li>Ejecuta el script y luego revisa el contenido del archivo `proceso.log`.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM6L3-1')\">Ver Solución</span>\r\n            <div id=\"solucionM6L3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">logging</span>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">time</span>\r\n\r\n<span class=\"variable\">logging</span>.<span class=\"function\">basicConfig</span>(<span class=\"variable\">filename</span>=<span class=\"highlight\">'proceso.log'</span>, <span class=\"variable\">level</span>=<span class=\"variable\">logging</span>.<span class=\"variable\">INFO</span>, <span class=\"variable\">format</span>=<span class=\"highlight\">'%(asctime)s - %(levelname)s - %(message)s'</span>)\r\n\r\n<span class=\"variable\">datos</span> = [<span class=\"highlight\">\"dato1\"</span>, <span class=\"highlight\">\"dato2\"</span>, <span class=\"highlight\">\"error\"</span>, <span class=\"highlight\">\"dato3\"</span>]\r\n\r\n<span class=\"variable\">logging</span>.<span class=\"function\">info</span>(<span class=\"highlight\">\"Inicio del procesamiento de datos.\"</span>)\r\n\r\n<span class=\"keyword\">for</span> <span class=\"variable\">dato</span> <span class=\"keyword\">in</span> <span class=\"variable\">datos</span>:\r\n    <span class=\"keyword\">if</span> <span class=\"variable\">dato</span> == <span class=\"highlight\">\"error\"</span>:\r\n        <span class=\"variable\">logging</span>.<span class=\"function\">error</span>(<span class=\"highlight\">f\"¡Error encontrado al procesar '{dato}'!\"</span>)\r\n    <span class=\"keyword\">else</span>:\r\n        <span class=\"variable\">logging</span>.<span class=\"function\">info</span>(<span class=\"highlight\">f\"Procesando '{dato}' correctamente.\"</span>)\r\n\r\n<span class=\"variable\">logging</span>.<span class=\"function\">info</span>(<span class=\"highlight\">\"Procesamiento de datos finalizado.\"</span>)\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"Proceso completado. Revisa 'proceso.log' para ver los detalles.\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 3, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 22, "fields": {"modulo": 7, "titulo": "Introduccion a pandas", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 7, Lección 1: Introducción a Pandas - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 1: Introducción a Pandas</h1>\r\n        <p class=\"lesson-intro\">\r\n            Bienvenido al mundo del análisis de datos con Python. **Pandas** es una librería de terceros (no viene por defecto con Python) que se ha convertido en la herramienta estándar para la manipulación y el análisis de datos. Piensa en Pandas como una versión programable y súper potente de una hoja de cálculo como Excel.\r\n        </p>\r\n        <div class=\"note\">\r\n            <p><strong>Instalación:</strong> Para usar Pandas, primero debes instalarlo. Abre tu terminal (con tu entorno virtual activado) y ejecuta: <code>pip install pandas</code></p>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: ¿Qué son las Series y los DataFrames?</h2>\r\n        <p>Pandas introduce dos estructuras de datos principales que son la base de todo análisis:</p>\r\n        <ul>\r\n            <li><strong>Serie (Series):</strong> Es una estructura de una dimensión, similar a una columna en una hoja de cálculo o una lista con etiquetas (índices).</li>\r\n            <li><strong>DataFrame:</strong> Es una estructura de dos dimensiones, como una tabla completa o una hoja de cálculo, con filas y columnas etiquetadas. Es la estructura con la que más trabajarás.</li>\r\n        </ul>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Creación de un DataFrame</h3>\r\n            <p>La forma más común de crear un DataFrame es a partir de un diccionario de Python, donde las claves son los nombres de las columnas y los valores son listas con los datos de esas columnas.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">pandas</span> <span class=\"keyword\">as</span> <span class=\"variable\">pd</span> <span class=\"comment\"># 'pd' es el alias estándar para pandas</span>\r\n\r\n<span class=\"variable\">datos</span> = {\r\n    <span class=\"highlight\">'Nombre'</span>: [<span class=\"highlight\">'Ana'</span>, <span class=\"highlight\">'Luis'</span>, <span class=\"highlight\">'Marta'</span>],\r\n    <span class=\"highlight\">'Edad'</span>: [<span class=\"number\">28</span>, <span class=\"number\">34</span>, <span class=\"number\">22</span>],\r\n    <span class=\"highlight\">'Ciudad'</span>: [<span class=\"highlight\">'Lima'</span>, <span class=\"highlight\">'Bogotá'</span>, <span class=\"highlight\">'Madrid'</span>]\r\n}\r\n\r\n<span class=\"variable\">df</span> = <span class=\"variable\">pd</span>.<span class=\"function\">DataFrame</span>(<span class=\"variable\">datos</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">df</span>)\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: Lectura y Escritura de Archivos CSV</h2>\r\n        <p>El verdadero poder de Pandas reside en su capacidad para leer datos desde una multitud de formatos de archivo. El más común es el CSV (Valores Separados por Comas).</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: <code>pd.read_csv()</code> y <code>.to_csv()</code></h3>\r\n            <p><strong><code>pd.read_csv('ruta/al/archivo.csv')</code>:</strong> Lee un archivo CSV y lo carga en un DataFrame de Pandas.</p>\r\n            <p><strong><code>df.to_csv('ruta/nuevo_archivo.csv', index=False)</code>:</strong> Guarda el contenido de un DataFrame en un nuevo archivo CSV. `index=False` evita que Pandas guarde el índice del DataFrame como una columna.</p>\r\n            <p><strong>Ejemplo Práctico:</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">pandas</span> <span class=\"keyword\">as</span> <span class=\"variable\">pd</span>\r\n\r\n<span class=\"comment\"># Suponiendo que tenemos un archivo 'ventas.csv' con este contenido:</span>\r\n<span class=\"comment\"># producto,cantidad,precio</span>\r\n<span class=\"comment\"># Laptop,10,1200</span>\r\n<span class=\"comment\"># Mouse,50,25</span>\r\n\r\n<span class=\"comment\"># Leer el archivo CSV</span>\r\n<span class=\"variable\">df_ventas</span> = <span class=\"variable\">pd</span>.<span class=\"function\">read_csv</span>(<span class=\"highlight\">'ventas.csv'</span>)\r\n\r\n<span class=\"comment\"># Inspeccionar los primeros datos con .head()</span>\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Primeras 5 filas del DataFrame ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">df_ventas</span>.<span class=\"function\">head</span>())\r\n\r\n<span class=\"comment\"># Añadir una nueva columna calculada</span>\r\n<span class=\"variable\">df_ventas</span>[<span class=\"highlight\">'Total'</span>] = <span class=\"variable\">df_ventas</span>[<span class=\"highlight\">'cantidad'</span>] * <span class=\"variable\">df_ventas</span>[<span class=\"highlight\">'precio'</span>]\r\n\r\n<span class=\"comment\"># Guardar el nuevo DataFrame en otro archivo</span>\r\n<span class=\"variable\">df_ventas</span>.<span class=\"function\">to_csv</span>(<span class=\"highlight\">'ventas_con_total.csv'</span>, <span class=\"variable\">index</span>=<span class=\"boolean\">False</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"\\nArchivo 'ventas_con_total.csv' guardado con éxito.\"</span>)\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicio: Análisis Básico de Datos de Películas</h3>\r\n            <p><strong>Objetivo:</strong> Usar Pandas para leer un archivo CSV, realizar un filtrado básico y encontrar información específica.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `01_analisis_peliculas.py`. Importa `pandas as pd`.</li>\r\n                <li>Crea un archivo de texto en la misma carpeta llamado `peliculas.csv` con el siguiente contenido:\r\n                    <div class=\"code-block\"><pre>\r\ntitulo,director,año,puntuacion\r\nInception,Christopher Nolan,2010,8.8\r\nThe Matrix,Wachowskis,1999,8.7\r\nParasite,Bong Joon Ho,2019,8.6\r\nThe Godfather,Francis Ford Coppola,1972,9.2\r\n                    </pre></div>\r\n                </li>\r\n                <li>Usa `pd.read_csv()` para cargar `peliculas.csv` en un DataFrame.</li>\r\n                <li>Imprime el DataFrame completo.</li>\r\n                <li>**Filtrado:** Crea un nuevo DataFrame llamado `peliculas_modernas` que contenga solo las películas estrenadas después del año 2000. Imprímelo.</li>\r\n                <li>**Búsqueda:** Encuentra la película con la puntuación más alta. Puedes hacerlo así: `mejor_pelicula = df.loc[df['puntuacion'].idxmax()]`. Imprime esta información.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM7L1-1')\">Ver Solución</span>\r\n            <div id=\"solucionM7L1-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">pandas</span> <span class=\"keyword\">as</span> <span class=\"variable\">pd</span>\r\n\r\n<span class=\"comment\"># Cargar los datos</span>\r\n<span class=\"variable\">df</span> = <span class=\"variable\">pd</span>.<span class=\"function\">read_csv</span>(<span class=\"highlight\">'peliculas.csv'</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- DataFrame Completo ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">df</span>)\r\n\r\n<span class=\"comment\"># Filtrar películas modernas</span>\r\n<span class=\"variable\">peliculas_modernas</span> = <span class=\"variable\">df</span>[<span class=\"variable\">df</span>[<span class=\"highlight\">'año'</span>] > <span class=\"number\">2000</span>]\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"\\n--- Películas Estrenadas Después del 2000 ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">peliculas_modernas</span>)\r\n\r\n<span class=\"comment\"># Encontrar la película con la mejor puntuación</span>\r\n<span class=\"variable\">mejor_pelicula</span> = <span class=\"variable\">df</span>.<span class=\"function\">loc</span>[<span class=\"variable\">df</span>[<span class=\"highlight\">'puntuacion'</span>].<span class=\"function\">idxmax</span>()]\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"\\n--- Película con la Mejor Puntuación ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">mejor_pelicula</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Análisis Básico de Datos de Películas</h3>\r\n            <p><strong>Objetivo:</strong> Usar Pandas para leer un archivo CSV, realizar un filtrado básico y encontrar información específica.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `01_analisis_peliculas.py`. Importa `pandas as pd`.</li>\r\n                <li>Crea un archivo de texto en la misma carpeta llamado `peliculas.csv` con el siguiente contenido:\r\n                    <div class=\"code-block\"><pre>\r\ntitulo,director,año,puntuacion\r\nInception,Christopher Nolan,2010,8.8\r\nThe Matrix,Wachowskis,1999,8.7\r\nParasite,Bong Joon Ho,2019,8.6\r\nThe Godfather,Francis Ford Coppola,1972,9.2\r\n                    </pre></div>\r\n                </li>\r\n                <li>Usa `pd.read_csv()` para cargar `peliculas.csv` en un DataFrame.</li>\r\n                <li>Imprime el DataFrame completo.</li>\r\n                <li>**Filtrado:** Crea un nuevo DataFrame llamado `peliculas_modernas` que contenga solo las películas estrenadas después del año 2000. Imprímelo.</li>\r\n                <li>**Búsqueda:** Encuentra la película con la puntuación más alta. Puedes hacerlo así: `mejor_pelicula = df.loc[df['puntuacion'].idxmax()]`. Imprime esta información.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM7L1-1')\">Ver Solución</span>\r\n            <div id=\"solucionM7L1-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">pandas</span> <span class=\"keyword\">as</span> <span class=\"variable\">pd</span>\r\n\r\n<span class=\"comment\"># Cargar los datos</span>\r\n<span class=\"variable\">df</span> = <span class=\"variable\">pd</span>.<span class=\"function\">read_csv</span>(<span class=\"highlight\">'peliculas.csv'</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- DataFrame Completo ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">df</span>)\r\n\r\n<span class=\"comment\"># Filtrar películas modernas</span>\r\n<span class=\"variable\">peliculas_modernas</span> = <span class=\"variable\">df</span>[<span class=\"variable\">df</span>[<span class=\"highlight\">'año'</span>] > <span class=\"number\">2000</span>]\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"\\n--- Películas Estrenadas Después del 2000 ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">peliculas_modernas</span>)\r\n\r\n<span class=\"comment\"># Encontrar la película con la mejor puntuación</span>\r\n<span class=\"variable\">mejor_pelicula</span> = <span class=\"variable\">df</span>.<span class=\"function\">loc</span>[<span class=\"variable\">df</span>[<span class=\"highlight\">'puntuacion'</span>].<span class=\"function\">idxmax</span>()]\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"\\n--- Película con la Mejor Puntuación ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"variable\">mejor_pelicula</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 1, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 23, "fields": {"modulo": 7, "titulo": "Numpy y matplotlib", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 7, Lección 2: NumPy y Matplotlib - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 2: NumPy y Matplotlib</h1>\r\n        <p class=\"lesson-intro\">\r\n            Si Pandas es la hoja de cálculo, **NumPy** es la calculadora científica súper-optimizada y **Matplotlib** es el estudio de diseño gráfico. NumPy es la base para el cálculo numérico en Python, ofreciendo una estructura de datos llamada `array` que es mucho más rápida que las listas para operaciones matemáticas. Matplotlib es la librería por excelencia para crear todo tipo de gráficos y visualizaciones a partir de tus datos.\r\n        </p>\r\n        <div class=\"note\">\r\n            <p><strong>Instalación:</strong> Necesitarás instalar ambas librerías. En tu terminal, ejecuta:<br><code>pip install numpy matplotlib</code></p>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: NumPy - El Poder de los Arrays</h2>\r\n        <p>El objeto central de NumPy es el `ndarray` (array N-dimensional). Es similar a una lista, pero con dos ventajas clave: es mucho más rápido para operaciones matemáticas y permite realizar **operaciones vectorizadas**.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>Operaciones Vectorizadas</h3>\r\n            <p>Significa que puedes aplicar una operación a todos los elementos de un array a la vez, sin necesidad de un bucle `for`. Esto hace que el código sea más limpio y órdenes de magnitud más rápido.</p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">numpy</span> <span class=\"keyword\">as</span> <span class=\"variable\">np</span> <span class=\"comment\"># 'np' es el alias estándar para numpy</span>\r\n\r\n<span class=\"comment\"># Con listas de Python, necesitaríamos un bucle:</span>\r\n<span class=\"variable\">lista</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]\r\n<span class=\"variable\">multiplicada_lista</span> = [<span class=\"variable\">x</span> * <span class=\"number\">2</span> <span class=\"keyword\">for</span> <span class=\"variable\">x</span> <span class=\"keyword\">in</span> <span class=\"variable\">lista</span>]\r\n\r\n<span class=\"comment\"># Con NumPy, la operación es directa (vectorizada):</span>\r\n<span class=\"variable\">array</span> = <span class=\"variable\">np</span>.<span class=\"function\">array</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])\r\n<span class=\"variable\">multiplicado_array</span> = <span class=\"variable\">array</span> * <span class=\"number\">2</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Resultado con NumPy: {multiplicado_array}\"</span>)\r\n\r\n<span class=\"comment\"># Salida Esperada en la Consola</span>\r\n<span class=\"highlight\">Resultado con NumPy: [2 4 6 8]</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: Matplotlib - Visualizando tus Datos</h2>\r\n        <p>Una imagen vale más que mil palabras, y en el análisis de datos, un gráfico vale más que mil tablas. Matplotlib te permite crear gráficos de líneas, barras, histogramas, diagramas de dispersión y mucho más.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Creación de un Gráfico Básico</h3>\r\n            <p><strong>Descripción:</strong> El flujo básico para crear un gráfico es: crear los datos, pasarlos a una función de ploteo, personalizar el gráfico con títulos y etiquetas, y finalmente mostrarlo.</p>\r\n            <p><strong>Funciones Clave del Módulo <code>matplotlib.pyplot</code> (alias <code>plt</code>):</strong></p>\r\n            <ul>\r\n                <li><strong><code>plt.figure(figsize=(w, h))</code>:</strong> Crea una figura (un lienzo) para el gráfico, con un tamaño opcional.</li>\r\n                <li><strong><code>plt.plot(x, y)</code>:</strong> Dibuja un gráfico de líneas con los datos de `x` y `y`.</li>\r\n                <li><strong><code>plt.title('...')</code>, <code>plt.xlabel('...')</code>, <code>plt.ylabel('...')</code>:</strong> Añaden título y etiquetas a los ejes.</li>\r\n                <li><strong><code>plt.show()</code>:</strong> Muestra la ventana con el gráfico final.</li>\r\n            </ul>\r\n            <p><strong>Ejemplo Práctico:</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">matplotlib.pyplot</span> <span class=\"keyword\">as</span> <span class=\"variable\">plt</span>\r\n\r\n<span class=\"variable\">meses</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]\r\n<span class=\"variable\">ventas</span> = [<span class=\"number\">120</span>, <span class=\"number\">150</span>, <span class=\"number\">130</span>, <span class=\"number\">180</span>, <span class=\"number\">210</span>, <span class=\"number\">190</span>]\r\n\r\n<span class=\"variable\">plt</span>.<span class=\"function\">figure</span>(<span class=\"variable\">figsize</span>=(<span class=\"number\">8</span>, <span class=\"number\">5</span>)) <span class=\"comment\"># Tamaño del gráfico</span>\r\n<span class=\"variable\">plt</span>.<span class=\"function\">plot</span>(<span class=\"variable\">meses</span>, <span class=\"variable\">ventas</span>, <span class=\"variable\">marker</span>=<span class=\"highlight\">'o'</span>) <span class=\"comment\"># marker='o' dibuja círculos en los puntos</span>\r\n\r\n<span class=\"variable\">plt</span>.<span class=\"function\">title</span>(<span class=\"highlight\">'Ventas Mensuales'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">xlabel</span>(<span class=\"highlight\">'Mes'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">ylabel</span>(<span class=\"highlight\">'Ventas (en miles)'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">grid</span>(<span class=\"boolean\">True</span>) <span class=\"comment\"># Añade una cuadrícula</span>\r\n\r\n<span class=\"variable\">plt</span>.<span class=\"function\">show</span>() <span class=\"comment\"># Muestra el gráfico</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicio: Análisis y Visualización de Datos Climáticos</h3>\r\n            <p><strong>Objetivo:</strong> Usar NumPy para realizar cálculos estadísticos básicos sobre datos de temperatura y Matplotlib para visualizar los resultados.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `02_clima.py`. Importa `numpy as np` y `matplotlib.pyplot as plt`.</li>\r\n                <li>Crea un array de NumPy llamado `meses` que vaya del 1 al 12.</li>\r\n                <li>Crea otro array de NumPy llamado `temperaturas` con 12 valores de temperaturas promedio mensuales (puedes inventarlos).</li>\r\n                <li>**Análisis con NumPy:** Calcula la temperatura promedio, la máxima y la mínima del año usando los métodos `.mean()`, `.max()` y `.min()` del array `temperaturas`.</li>\r\n                <li>Imprime estos valores estadísticos en la consola.</li>\r\n                <li>**Visualización con Matplotlib:**\r\n                    <ul>\r\n                        <li>Crea un gráfico de líneas de `meses` vs `temperaturas`.</li>\r\n                        <li>Añade un título y etiquetas a los ejes X e Y.</li>\r\n                        <li>Usa `plt.axhline(y=temp_promedio, color='r', linestyle='--')` para dibujar una línea roja punteada que represente la temperatura promedio.</li>\r\n                        <li>Muestra el gráfico con `plt.show()`.</li>\r\n                    </ul>\r\n                </li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM7L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM7L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">numpy</span> <span class=\"keyword\">as</span> <span class=\"variable\">np</span>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">matplotlib.pyplot</span> <span class=\"keyword\">as</span> <span class=\"variable\">plt</span>\r\n\r\n<span class=\"variable\">meses</span> = <span class=\"variable\">np</span>.<span class=\"function\">arange</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>)\r\n<span class=\"variable\">temperaturas</span> = <span class=\"variable\">np</span>.<span class=\"function\">array</span>([<span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">18</span>, <span class=\"number\">21</span>, <span class=\"number\">24</span>, <span class=\"number\">28</span>, <span class=\"number\">30</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">22</span>, <span class=\"number\">18</span>, <span class=\"number\">16</span>])\r\n\r\n<span class=\"comment\"># Análisis con NumPy</span>\r\n<span class=\"variable\">temp_promedio</span> = <span class=\"variable\">temperaturas</span>.<span class=\"function\">mean</span>()\r\n<span class=\"variable\">temp_max</span> = <span class=\"variable\">temperaturas</span>.<span class=\"function\">max</span>()\r\n<span class=\"variable\">temp_min</span> = <span class=\"variable\">temperaturas</span>.<span class=\"function\">min</span>()\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Análisis Climático Anual ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Temperatura Promedio: {temp_promedio:.2f}°C\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Temperatura Máxima: {temp_max}°C\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Temperatura Mínima: {temp_min}°C\"</span>)\r\n\r\n<span class=\"comment\"># Visualización con Matplotlib</span>\r\n<span class=\"variable\">plt</span>.<span class=\"function\">figure</span>(<span class=\"variable\">figsize</span>=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))\r\n<span class=\"variable\">plt</span>.<span class=\"function\">plot</span>(<span class=\"variable\">meses</span>, <span class=\"variable\">temperaturas</span>, <span class=\"variable\">marker</span>=<span class=\"highlight\">'o'</span>, <span class=\"variable\">label</span>=<span class=\"highlight\">'Temp. Mensual'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">axhline</span>(<span class=\"variable\">y</span>=<span class=\"variable\">temp_promedio</span>, <span class=\"variable\">color</span>=<span class=\"highlight\">'r'</span>, <span class=\"variable\">linestyle</span>=<span class=\"highlight\">'--'</span>, <span class=\"variable\">label</span>=<span class=\"highlight\">f'Promedio ({temp_promedio:.2f}°C)'</span>)\r\n\r\n<span class=\"variable\">plt</span>.<span class=\"function\">title</span>(<span class=\"highlight\">'Temperaturas Promedio Mensuales'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">xlabel</span>(<span class=\"highlight\">'Mes del Año'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">ylabel</span>(<span class=\"highlight\">'Temperatura (°C)'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">xticks</span>(<span class=\"variable\">meses</span>) <span class=\"comment\"># Asegura que se muestren todos los meses en el eje X</span>\r\n<span class=\"variable\">plt</span>.<span class=\"function\">legend</span>() <span class=\"comment\"># Muestra las etiquetas (labels)</span>\r\n<span class=\"variable\">plt</span>.<span class=\"function\">grid</span>(<span class=\"boolean\">True</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">show</span>()\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Análisis y Visualización de Datos Climáticos</h3>\r\n            <p><strong>Objetivo:</strong> Usar NumPy para realizar cálculos estadísticos básicos sobre datos de temperatura y Matplotlib para visualizar los resultados.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `02_clima.py`. Importa `numpy as np` y `matplotlib.pyplot as plt`.</li>\r\n                <li>Crea un array de NumPy llamado `meses` que vaya del 1 al 12.</li>\r\n                <li>Crea otro array de NumPy llamado `temperaturas` con 12 valores de temperaturas promedio mensuales (puedes inventarlos).</li>\r\n                <li>**Análisis con NumPy:** Calcula la temperatura promedio, la máxima y la mínima del año usando los métodos `.mean()`, `.max()` y `.min()` del array `temperaturas`.</li>\r\n                <li>Imprime estos valores estadísticos en la consola.</li>\r\n                <li>**Visualización con Matplotlib:**\r\n                    <ul>\r\n                        <li>Crea un gráfico de líneas de `meses` vs `temperaturas`.</li>\r\n                        <li>Añade un título y etiquetas a los ejes X e Y.</li>\r\n                        <li>Usa `plt.axhline(y=temp_promedio, color='r', linestyle='--')` para dibujar una línea roja punteada que represente la temperatura promedio.</li>\r\n                        <li>Muestra el gráfico con `plt.show()`.</li>\r\n                    </ul>\r\n                </li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM7L2-1')\">Ver Solución</span>\r\n            <div id=\"solucionM7L2-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">numpy</span> <span class=\"keyword\">as</span> <span class=\"variable\">np</span>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">matplotlib.pyplot</span> <span class=\"keyword\">as</span> <span class=\"variable\">plt</span>\r\n\r\n<span class=\"variable\">meses</span> = <span class=\"variable\">np</span>.<span class=\"function\">arange</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>)\r\n<span class=\"variable\">temperaturas</span> = <span class=\"variable\">np</span>.<span class=\"function\">array</span>([<span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">18</span>, <span class=\"number\">21</span>, <span class=\"number\">24</span>, <span class=\"number\">28</span>, <span class=\"number\">30</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">22</span>, <span class=\"number\">18</span>, <span class=\"number\">16</span>])\r\n\r\n<span class=\"comment\"># Análisis con NumPy</span>\r\n<span class=\"variable\">temp_promedio</span> = <span class=\"variable\">temperaturas</span>.<span class=\"function\">mean</span>()\r\n<span class=\"variable\">temp_max</span> = <span class=\"variable\">temperaturas</span>.<span class=\"function\">max</span>()\r\n<span class=\"variable\">temp_min</span> = <span class=\"variable\">temperaturas</span>.<span class=\"function\">min</span>()\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Análisis Climático Anual ---\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Temperatura Promedio: {temp_promedio:.2f}°C\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Temperatura Máxima: {temp_max}°C\"</span>)\r\n<span class=\"function\">print</span>(<span class=\"highlight\">f\"Temperatura Mínima: {temp_min}°C\"</span>)\r\n\r\n<span class=\"comment\"># Visualización con Matplotlib</span>\r\n<span class=\"variable\">plt</span>.<span class=\"function\">figure</span>(<span class=\"variable\">figsize</span>=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))\r\n<span class=\"variable\">plt</span>.<span class=\"function\">plot</span>(<span class=\"variable\">meses</span>, <span class=\"variable\">temperaturas</span>, <span class=\"variable\">marker</span>=<span class=\"highlight\">'o'</span>, <span class=\"variable\">label</span>=<span class=\"highlight\">'Temp. Mensual'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">axhline</span>(<span class=\"variable\">y</span>=<span class=\"variable\">temp_promedio</span>, <span class=\"variable\">color</span>=<span class=\"highlight\">'r'</span>, <span class=\"variable\">linestyle</span>=<span class=\"highlight\">'--'</span>, <span class=\"variable\">label</span>=<span class=\"highlight\">f'Promedio ({temp_promedio:.2f}°C)'</span>)\r\n\r\n<span class=\"variable\">plt</span>.<span class=\"function\">title</span>(<span class=\"highlight\">'Temperaturas Promedio Mensuales'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">xlabel</span>(<span class=\"highlight\">'Mes del Año'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">ylabel</span>(<span class=\"highlight\">'Temperatura (°C)'</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">xticks</span>(<span class=\"variable\">meses</span>) <span class=\"comment\"># Asegura que se muestren todos los meses en el eje X</span>\r\n<span class=\"variable\">plt</span>.<span class=\"function\">legend</span>() <span class=\"comment\"># Muestra las etiquetas (labels)</span>\r\n<span class=\"variable\">plt</span>.<span class=\"function\">grid</span>(<span class=\"boolean\">True</span>)\r\n<span class=\"variable\">plt</span>.<span class=\"function\">show</span>()\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 2, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.leccion", "pk": 24, "fields": {"modulo": 7, "titulo": "Web dev con flask y requests", "descripcion": "", "contenido_html": "<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Módulo 7, Lección 3: Desarrollo Web con Flask y Requests - Python Sin Fronteras</title>\r\n    <link rel=\"stylesheet\" href=\"../../css/styles.css\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n    <script>\r\n        function toggleSolution(id) {\r\n            const solution = document.getElementById(id);\r\n            if (solution.style.display === \"block\") {\r\n                solution.style.display = \"none\";\r\n            } else {\r\n                solution.style.display = \"block\";\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>Lección 3: Desarrollo Web con Flask y Requests</h1>\r\n        <p class=\"lesson-intro\">\r\n            En nuestra última lección, abriremos la puerta a dos de las áreas más importantes del desarrollo profesional con Python: la creación de aplicaciones web con **Flask** y la comunicación con otros servicios a través de internet usando **Requests**.\r\n        </p>\r\n        <div class=\"note\">\r\n            <p><strong>Instalación:</strong> Necesitarás instalar ambas librerías. En tu terminal, ejecuta:<br><code>pip install Flask requests</code></p>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <h2>Tema 1: Flask - Creando tu Primera Aplicación Web</h2>\r\n        <p>**Flask** es un \"micro-framework\" para desarrollo web. Se le llama \"micro\" porque es minimalista y fácil de empezar, pero es increíblemente potente y se usa en producción en miles de empresas. Con Flask, puedes crear un servidor web en muy pocas líneas de código.</p>\r\n        \r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Una Aplicación Mínima con Flask</h3>\r\n            <p><strong>Conceptos Clave:</strong></p>\r\n            <ul>\r\n                <li><strong><code>@app.route('/')</code>:</strong> Un decorador que asocia una URL (en este caso, la raíz del sitio `/`) con una función de Python.</li>\r\n                <li><strong>Función de Vista:</strong> La función que se ejecuta cuando un usuario visita la ruta asociada. Lo que esta función retorna es lo que el usuario verá en su navegador.</li>\r\n            </ul>\r\n            <p><strong>Ejemplo Práctico (guarda esto como `app.py`):</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">from</span> <span class=\"variable\">flask</span> <span class=\"keyword\">import</span> <span class=\"variable\">Flask</span>\r\n\r\n<span class=\"variable\">app</span> = <span class=\"variable\">Flask</span>(__name__) <span class=\"comment\"># Creamos la instancia de la aplicación</span>\r\n\r\n@<span class=\"variable\">app</span>.<span class=\"function\">route</span>(<span class=\"highlight\">'/'</span>) <span class=\"comment\"># Definimos la ruta para la página de inicio</span>\r\n<span class=\"keyword\">def</span> <span class=\"function\">hola_mundo</span>():\r\n    <span class=\"keyword\">return</span> <span class=\"highlight\">'¡Hola, Mundo desde Flask!'</span>\r\n\r\n<span class=\"comment\"># Para ejecutar:</span>\r\n<span class=\"comment\"># 1. Abre la terminal en la carpeta del archivo.</span>\r\n<span class=\"comment\"># 2. Ejecuta el comando: flask run</span>\r\n<span class=\"comment\"># 3. Abre tu navegador y ve a http://127.0.0.1:5000</span>\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <h2>Tema 2: Requests - Consumiendo APIs de Internet</h2>\r\n        <p>Una **API** (Interfaz de Programación de Aplicaciones) es como un \"camarero\" en un restaurante. Tú (tu programa) no entras a la cocina (el servidor de otra empresa), sino que le pides al camarero (la API) lo que necesitas, y él te lo trae. La librería `requests` es la forma más sencilla de hacer estas \"peticiones\" en Python.</p>\r\n\r\n        <div class=\"concept-card\">\r\n            <h3>🔵 Ficha Técnica: Petición GET con <code>requests.get()</code></h3>\r\n            <p><strong>Descripción:</strong> `requests.get()` envía una petición HTTP de tipo GET a una URL para obtener información.</p>\r\n            <p><strong>Retorna:</strong> Un objeto `Response`. Los datos que nos interesan suelen estar en formato JSON y se pueden acceder con el método `.json()`.</p>\r\n            <p><strong>Ejemplo Práctico (obteniendo un dato curioso de gatos):</strong></p>\r\n            <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">requests</span>\r\n\r\n<span class=\"variable\">URL_API</span> = <span class=\"highlight\">\"https://catfact.ninja/fact\"</span>\r\n\r\n<span class=\"keyword\">try</span>:\r\n    <span class=\"variable\">respuesta</span> = <span class=\"variable\">requests</span>.<span class=\"function\">get</span>(<span class=\"variable\">URL_API</span>)\r\n    <span class=\"variable\">respuesta</span>.<span class=\"function\">raise_for_status</span>() <span class=\"comment\"># Lanza un error si la petición falló (ej. error 404)</span>\r\n\r\n    <span class=\"variable\">datos</span> = <span class=\"variable\">respuesta</span>.<span class=\"function\">json</span>() <span class=\"comment\"># Convierte la respuesta JSON a un diccionario de Python</span>\r\n    <span class=\"variable\">dato_curioso</span> = <span class=\"variable\">datos</span>[<span class=\"highlight\">'fact'</span>]\r\n    \r\n    <span class=\"function\">print</span>(<span class=\"highlight\">\"--- Dato Curioso de Gatos ---\"</span>)\r\n    <span class=\"function\">print</span>(<span class=\"variable\">dato_curioso</span>)\r\n\r\n<span class=\"keyword\">except</span> <span class=\"variable\">requests</span>.<span class=\"variable\">exceptions</span>.<span class=\"variable\">RequestException</span> <span class=\"keyword\">as</span> <span class=\"variable\">e</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Error al conectar con la API: {e}\"</span>)\r\n            </pre></div>\r\n        </div>\r\n        \r\n        <hr>\r\n\r\n        <div class=\"exercise\">\r\n            <h3>🚀 Ejercicio: Generador de Chistes de Programadores</h3>\r\n            <p><strong>Objetivo:</strong> Usar la librería `requests` para conectarse a una API pública de chistes y mostrar un chiste al usuario.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_chistes_api.py`. Importa `requests`.</li>\r\n                <li>Usaremos la API de chistes para programadores: `https://official-joke-api.appspot.com/random_joke`.</li>\r\n                <li>Usa `requests.get()` para hacer una petición a esa URL.</li>\r\n                <li>Convierte la respuesta a formato JSON usando el método `.json()`.</li>\r\n                <li>El diccionario resultante tendrá dos claves: `\"setup\"` (el inicio del chiste) y `\"punchline\"` (el remate). Extrae ambos valores.</li>\r\n                <li>Imprime el inicio del chiste, haz una pequeña pausa (puedes usar `input(\"Presiona Enter para ver el remate...\")`) y luego imprime el remate.</li>\r\n                <li>Envuelve tu código en un bloque `try-except` para manejar posibles errores de conexión.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM7L3-1')\">Ver Solución</span>\r\n            <div id=\"solucionM7L3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">requests</span>\r\n\r\n<span class=\"variable\">API_URL</span> = <span class=\"highlight\">\"https://official-joke-api.appspot.com/random_joke\"</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Generador de Chistes para Programadores ---\"</span>)\r\n<span class=\"keyword\">try</span>:\r\n    <span class=\"variable\">respuesta</span> = <span class=\"variable\">requests</span>.<span class=\"function\">get</span>(<span class=\"variable\">API_URL</span>)\r\n    <span class=\"variable\">respuesta</span>.<span class=\"function\">raise_for_status</span>() <span class=\"comment\"># Buena práctica para verificar errores</span>\r\n\r\n    <span class=\"variable\">chiste</span> = <span class=\"variable\">respuesta</span>.<span class=\"function\">json</span>()\r\n    <span class=\"variable\">inicio</span> = <span class=\"variable\">chiste</span>[<span class=\"highlight\">'setup'</span>]\r\n    <span class=\"variable\">remate</span> = <span class=\"variable\">chiste</span>[<span class=\"highlight\">'punchline'</span>]\r\n\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"\\nPregunta: {inicio}\"</span>)\r\n    <span class=\"function\">input</span>(<span class=\"highlight\">\"(Presiona Enter para ver el remate...)\"</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Respuesta: {remate}\"</span>)\r\n\r\n<span class=\"keyword\">except</span> <span class=\"variable\">requests</span>.<span class=\"variable\">exceptions</span>.<span class=\"variable\">RequestException</span> <span class=\"keyword\">as</span> <span class=\"variable\">e</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"No se pudo obtener un chiste. Error: {e}\"</span>)\r\n                </pre></div>\r\n            </div>\r\n        </div>", "codigo_ejercicio": "", "instrucciones_ejercicio": "<h3>🚀 Ejercicio: Generador de Chistes de Programadores</h3>\r\n            <p><strong>Objetivo:</strong> Usar la librería `requests` para conectarse a una API pública de chistes y mostrar un chiste al usuario.</p>\r\n            <p><strong>Instrucciones:</strong></p>\r\n            <ol>\r\n                <li>Crea un script `03_chistes_api.py`. Importa `requests`.</li>\r\n                <li>Usaremos la API de chistes para programadores: `https://official-joke-api.appspot.com/random_joke`.</li>\r\n                <li>Usa `requests.get()` para hacer una petición a esa URL.</li>\r\n                <li>Convierte la respuesta a formato JSON usando el método `.json()`.</li>\r\n                <li>El diccionario resultante tendrá dos claves: `\"setup\"` (el inicio del chiste) y `\"punchline\"` (el remate). Extrae ambos valores.</li>\r\n                <li>Imprime el inicio del chiste, haz una pequeña pausa (puedes usar `input(\"Presiona Enter para ver el remate...\")`) y luego imprime el remate.</li>\r\n                <li>Envuelve tu código en un bloque `try-except` para manejar posibles errores de conexión.</li>\r\n            </ol>\r\n            <span class=\"solution-toggle\" onclick=\"toggleSolution('solucionM7L3-1')\">Ver Solución</span>\r\n            <div id=\"solucionM7L3-1\" class=\"exercise-solution\">\r\n                <div class=\"code-block\"><pre>\r\n<span class=\"keyword\">import</span> <span class=\"variable\">requests</span>\r\n\r\n<span class=\"variable\">API_URL</span> = <span class=\"highlight\">\"https://official-joke-api.appspot.com/random_joke\"</span>\r\n\r\n<span class=\"function\">print</span>(<span class=\"highlight\">\"--- Generador de Chistes para Programadores ---\"</span>)\r\n<span class=\"keyword\">try</span>:\r\n    <span class=\"variable\">respuesta</span> = <span class=\"variable\">requests</span>.<span class=\"function\">get</span>(<span class=\"variable\">API_URL</span>)\r\n    <span class=\"variable\">respuesta</span>.<span class=\"function\">raise_for_status</span>() <span class=\"comment\"># Buena práctica para verificar errores</span>\r\n\r\n    <span class=\"variable\">chiste</span> = <span class=\"variable\">respuesta</span>.<span class=\"function\">json</span>()\r\n    <span class=\"variable\">inicio</span> = <span class=\"variable\">chiste</span>[<span class=\"highlight\">'setup'</span>]\r\n    <span class=\"variable\">remate</span> = <span class=\"variable\">chiste</span>[<span class=\"highlight\">'punchline'</span>]\r\n\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"\\nPregunta: {inicio}\"</span>)\r\n    <span class=\"function\">input</span>(<span class=\"highlight\">\"(Presiona Enter para ver el remate...)\"</span>)\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"Respuesta: {remate}\"</span>)\r\n\r\n<span class=\"keyword\">except</span> <span class=\"variable\">requests</span>.<span class=\"variable\">exceptions</span>.<span class=\"variable\">RequestException</span> <span class=\"keyword\">as</span> <span class=\"variable\">e</span>:\r\n    <span class=\"function\">print</span>(<span class=\"highlight\">f\"No se pudo obtener un chiste. Error: {e}\"</span>)\r\n                </pre></div>\r\n            </div>", "puntos_xp": 10, "orden": 3, "usuarios_completado": [["Carlos"]]}}, {"model": "cursos.post", "pk": 1, "fields": {"titulo": "Ayuda para los Cursos", "contenido": "Por Este medio me pueden comunicar para que pueda ayudarles en su aventura por Python, No duden en preguntar y si les ayudara lo nates posible, gracias y sigan apoyando la pagina.", "autor": ["Carlos"], "fecha_publicacion": "2025-09-10T22:22:46.997Z", "imagen": "", "me_gusta": []}}, {"model": "cursos.herramienta", "pk": 2, "fields": {"nombre": "Descargar Visula Studio Code", "descripcion": "Descarga la ultima actualizacion de visual studio x64-1.103.2", "enlace": "https://vscode.download.prss.microsoft.com/dbazure/download/stable/6f17636121051a53c88d3e605c491d22af2ba755/VSCodeUserSetup-x64-1.103.2.exe", "archivo": "", "imagen": "media/herramientas/microsoft_visual_studio_code_macos_bigsur_icon_189957_ht0djf", "autor": ["Carlos"], "fecha_creacion": "2025-09-08T19:15:35.532Z", "estado": "aprobado", "click_count": 1}}, {"model": "cursos.herramienta", "pk": 4, "fields": {"nombre": "Python 3.13", "descripcion": "Descarga la Ultima actualización de Python", "enlace": "https://www.python.org/ftp/python/3.13.7/python-3.13.7-amd64.exe", "archivo": "", "imagen": "media/herramientas/logo_python_w8no82", "autor": ["Carlos"], "fecha_creacion": "2025-09-08T20:34:07.880Z", "estado": "aprobado", "click_count": 3}}, {"model": "cursos.juego", "pk": 1, "fields": {"nombre": "juego de pizaz", "descripcion": "Esta es una página donde podrás jugar algunos juegos para distraerte, para luego continuar con tus clases, mucha suerte", "enlace": "https://www.crazygames.com/es/juego/steal-brainrot-online", "archivo": "", "imagen": "media/juegos/Gemini_Generated_Image_7gn0og7gn0og7gn0_oh5evc", "autor": ["Carlos"], "fecha_creacion": "2025-09-08T19:29:09.418Z", "estado": "aprobado", "click_count": 3}}, {"model": "cursos.casoprueba", "pk": 1, "fields": {"leccion": 1, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "Hola, Mundo"}}, {"model": "cursos.casoprueba", "pk": 2, "fields": {"leccion": 3, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "--- Resumen de Compra ---\r\n┬íDescuento aplicado!\r\nTotal a pagar: $102.0"}}, {"model": "cursos.casoprueba", "pk": 3, "fields": {"leccion": 2, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "50"}}, {"model": "cursos.casoprueba", "pk": 4, "fields": {"leccion": 4, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "Total de ventas: $27.0"}}, {"model": "cursos.casoprueba", "pk": 8, "fields": {"leccion": 5, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "77.0"}}, {"model": "cursos.casoprueba", "pk": 9, "fields": {"leccion": 6, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "['Estudiar Python', 'Hacer la compra', 'Pasear al perro', 'URGENTE: Enviar email']"}}, {"model": "cursos.casoprueba", "pk": 10, "fields": {"leccion": 7, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "({'Git'}, {'API', 'Git', 'HTML', 'Figma', 'Python', 'SQL', 'UX'}, {'SQL', 'API', 'Python'})"}}, {"model": "cursos.casoprueba", "pk": 11, "fields": {"leccion": 8, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "{'hola': 2, 'mundo': 1, 'python': 3}"}}, {"model": "cursos.casoprueba", "pk": 12, "fields": {"leccion": 9, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "Ingredientes finales de la receta: {'ajo', 'sal', 'tomate', 'aceite'}"}}, {"model": "cursos.casoprueba", "pk": 13, "fields": {"leccion": 10, "expresion_a_evaluar": "(lambda: (e := Estudiante(\"Laura\", 22), e.agregar_curso(\"Matem├íticas\"), e.agregar_curso(\"Historia\"), e.obtener_cursos()))()", "resultado_esperado": "['Matem├íticas', 'Historia']"}}, {"model": "cursos.casoprueba", "pk": 14, "fields": {"leccion": 11, "expresion_a_evaluar": "probar_coche(\"Tesla\")", "resultado_esperado": "('El veh├¡culo se est├í moviendo.', 'Reproduciendo m├║sica...')"}}, {"model": "cursos.casoprueba", "pk": 15, "fields": {"leccion": 12, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "Enviando email: Tu pedido ha sido enviado."}}, {"model": "cursos.casoprueba", "pk": 18, "fields": {"leccion": 13, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "Conectando a PostgreSQL"}}, {"model": "cursos.casoprueba", "pk": 21, "fields": {"leccion": 14, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "Error: No se puede dividir por cero."}}, {"model": "cursos.casoprueba", "pk": 23, "fields": {"leccion": 15, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "['Comprar leche', 'Pasear al perro', 'Estudiar POO']"}}, {"model": "cursos.casoprueba", "pk": 24, "fields": {"leccion": 16, "expresion_a_evaluar": "ordenar_por_longitud(['sol', 'mar', 'manzana', 'computadora'])", "resultado_esperado": "['sol', 'mar', 'manzana', 'computadora']"}}, {"model": "cursos.casoprueba", "pk": 25, "fields": {"leccion": 17, "expresion_a_evaluar": "asyncio.run(obtener_datos_usuario(1))", "resultado_esperado": "Buscando datos para el usuario 2...\r\n{'id': 2, 'nombre': 'Ana'}"}}, {"model": "cursos.casoprueba", "pk": 26, "fields": {"leccion": 18, "expresion_a_evaluar": "list(generador_pares(10))", "resultado_esperado": "[0, 2, 4, 6, 8]"}}, {"model": "cursos.casoprueba", "pk": 27, "fields": {"leccion": 19, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "12-09-2025"}}, {"model": "cursos.casoprueba", "pk": 28, "fields": {"leccion": 20, "expresion_a_evaluar": "extraer_hashtags(\"┬íQu├® gran d├¡a de #programacion en #Python! Me encanta el #codigo limpio.\")", "resultado_esperado": "['#programacion', '#Python', '#codigo']"}}, {"model": "cursos.casoprueba", "pk": 29, "fields": {"leccion": 21, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "Nivel de log: WARNING"}}, {"model": "cursos.casoprueba", "pk": 30, "fields": {"leccion": 22, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "Inception"}}, {"model": "cursos.casoprueba", "pk": 31, "fields": {"leccion": 23, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "--- An├ílisis Clim├ítico Anual ---\r\nTemperatura Promedio: 21.92┬░C\r\nTemperatura M├íxima: 30┬░C\r\nTemperatura M├¡nima: 15┬░C"}}, {"model": "cursos.casoprueba", "pk": 32, "fields": {"leccion": 24, "expresion_a_evaluar": "Salida de consola directa", "resultado_esperado": "Los gatos"}}, {"model": "socialaccount.socialaccount", "pk": 1, "fields": {"user": ["carlos_andres"], "provider": "google", "uid": "117727390653669009287", "last_login": "2025-09-10T22:15:22.411Z", "date_joined": "2025-09-08T18:28:45.278Z", "extra_data": {"iss": "https://accounts.google.com", "azp": "502602138729-e3o3ulfk145da09g929vgm0f7l7uca3v.apps.googleusercontent.com", "aud": "502602138729-e3o3ulfk145da09g929vgm0f7l7uca3v.apps.googleusercontent.com", "sub": "117727390653669009287", "at_hash": "m0zA8RxllKfrq7aA1uSsnA", "name": "Carlos Andres Quezada Gorena", "picture": "https://lh3.googleusercontent.com/a/ACg8ocLM4NkOKn7yZkGAzia-eqE64gTDIQ6LItOVqCR4d9h06JHP3g=s96-c", "given_name": "Carlos Andres", "family_name": "Quezada Gorena", "iat": 1757542520, "exp": 1757546120}}}, {"model": "socialaccount.socialaccount", "pk": 2, "fields": {"user": ["andres"], "provider": "google", "uid": "106712841841016794975", "last_login": "2025-09-08T18:29:03.673Z", "date_joined": "2025-09-08T18:29:03.673Z", "extra_data": {"iss": "https://accounts.google.com", "azp": "502602138729-e3o3ulfk145da09g929vgm0f7l7uca3v.apps.googleusercontent.com", "aud": "502602138729-e3o3ulfk145da09g929vgm0f7l7uca3v.apps.googleusercontent.com", "sub": "106712841841016794975", "at_hash": "Ny8EvwqFnNFm3hcoEvj1jA", "name": "Andres Gorena", "picture": "https://lh3.googleusercontent.com/a/ACg8ocJdriQ8KUAuZHBxDhknQ4AgOBQyfohEChOUHYuC4bufW7cTnJ4=s96-c", "given_name": "Andres", "family_name": "Gorena", "iat": 1757356142, "exp": 1757359742}}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2025-09-08T18:18:28.382Z", "user": ["Carlos"], "content_type": ["account", "emailaddress"], "object_id": "1", "object_repr": "Google Aut", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2025-09-08T18:19:10.873Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "24", "object_repr": "Web dev con flask y requests", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2025-09-08T18:19:25.753Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2025-09-08T18:19:43.988Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2025-09-08T18:19:56.014Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "3", "object_repr": "Operadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2025-09-08T18:20:05.281Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "3", "object_repr": "Operadores", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2025-09-08T18:20:16.638Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "4", "object_repr": "Control de flujo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2025-09-08T18:20:29.615Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "5", "object_repr": "Funciones y modulos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2025-09-08T18:20:40.316Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "6", "object_repr": "Listas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2025-09-08T18:20:50.320Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "7", "object_repr": "Tuplas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2025-09-08T18:20:59.814Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "8", "object_repr": "Diccionarios", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2025-09-08T18:21:12.750Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "9", "object_repr": "Conjuntos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2025-09-08T18:21:19.771Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "8", "object_repr": "Diccionarios", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2025-09-08T18:24:39.661Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "10", "object_repr": "Clases y objetos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2025-09-08T18:25:30.616Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "11", "object_repr": "Herencia", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2025-09-08T18:25:43.127Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "12", "object_repr": "Polimorfismo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2025-09-08T18:25:52.667Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "13", "object_repr": "Encapsulamiento y abstraccion", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2025-09-08T18:26:02.221Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "14", "object_repr": "Manejo de excepciones", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2025-09-08T18:26:12.023Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "15", "object_repr": "Manipulacion de archivos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2025-09-08T18:26:20.727Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "16", "object_repr": "Comprension y lambdas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2025-09-08T18:26:29.151Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "17", "object_repr": "Programacion asincronica", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2025-09-08T18:26:39.128Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "18", "object_repr": "Decoradores y generadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2025-09-08T18:26:47.415Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "18", "object_repr": "Decoradores y generadores", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2025-09-08T18:26:56.163Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "19", "object_repr": "Modulos esenciales", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2025-09-08T18:27:04.541Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "20", "object_repr": "Expresiones regulares", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2025-09-08T18:27:12.664Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "21", "object_repr": "Logging y debugging", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2025-09-08T18:27:20.097Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "22", "object_repr": "Introduccion a pandas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2025-09-08T18:27:28.782Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "23", "object_repr": "Numpy y matplotlib", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2025-09-08T18:27:39.614Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "24", "object_repr": "Web dev con flask y requests", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2025-09-08T18:28:11.478Z", "user": ["Carlos"], "content_type": ["sites", "site"], "object_id": "1", "object_repr": "Python Sin Fronteras", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Logo\"]}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2025-09-08T22:36:17.804Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2025-09-08T22:37:24.678Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2025-09-09T22:47:45.823Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2025-09-09T22:49:59.728Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2025-09-10T00:16:03.796Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Codigo ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2025-09-10T00:16:52.347Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Codigo ejercicio\", \"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2025-09-10T00:22:11.051Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2025-09-10T00:26:36.654Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2025-09-10T00:29:02.958Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2025-09-10T00:29:42.420Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2025-09-10T00:31:22.650Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2025-09-10T00:33:20.507Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2025-09-10T00:39:36.916Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "3", "object_repr": "Operadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2025-09-10T00:40:56.740Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2025-09-10T00:41:38.269Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "3", "object_repr": "Operadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2025-09-10T00:45:20.797Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2025-09-10T02:37:52.779Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2025-09-10T02:38:53.244Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2025-09-10T02:39:27.915Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2025-09-10T02:40:00.668Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2025-09-10T02:41:37.768Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2025-09-10T02:43:30.573Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2025-09-10T02:44:30.032Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 54, "fields": {"action_time": "2025-09-10T02:45:30.891Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 55, "fields": {"action_time": "2025-09-10T02:46:11.497Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 56, "fields": {"action_time": "2025-09-10T02:54:04.408Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 57, "fields": {"action_time": "2025-09-10T02:57:03.472Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 58, "fields": {"action_time": "2025-09-10T02:57:47.164Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 59, "fields": {"action_time": "2025-09-10T02:58:38.030Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 60, "fields": {"action_time": "2025-09-11T00:40:42.074Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 61, "fields": {"action_time": "2025-09-11T00:42:55.366Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 62, "fields": {"action_time": "2025-09-11T00:51:01.014Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\", \"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 63, "fields": {"action_time": "2025-09-11T00:55:02.893Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\", \"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 64, "fields": {"action_time": "2025-09-11T01:11:51.974Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 65, "fields": {"action_time": "2025-09-11T01:12:53.249Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\", \"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 66, "fields": {"action_time": "2025-09-11T01:15:39.844Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 67, "fields": {"action_time": "2025-09-11T01:16:47.195Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 68, "fields": {"action_time": "2025-09-11T01:19:10.478Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 69, "fields": {"action_time": "2025-09-11T01:20:28.101Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 70, "fields": {"action_time": "2025-09-11T01:24:55.382Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 71, "fields": {"action_time": "2025-09-11T01:25:57.951Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 72, "fields": {"action_time": "2025-09-11T01:27:15.145Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 73, "fields": {"action_time": "2025-09-11T01:27:50.770Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 74, "fields": {"action_time": "2025-09-11T01:28:23.848Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 75, "fields": {"action_time": "2025-09-11T01:30:02.554Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 76, "fields": {"action_time": "2025-09-11T01:37:10.127Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 77, "fields": {"action_time": "2025-09-11T01:37:27.264Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 78, "fields": {"action_time": "2025-09-11T01:45:39.423Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 79, "fields": {"action_time": "2025-09-11T01:46:26.534Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 80, "fields": {"action_time": "2025-09-11T01:50:09.637Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 81, "fields": {"action_time": "2025-09-11T02:16:07.923Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 82, "fields": {"action_time": "2025-09-11T02:23:23.399Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "1", "object_repr": "Caso de prueba para 'Intro entorno'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 83, "fields": {"action_time": "2025-09-11T02:26:39.018Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 84, "fields": {"action_time": "2025-09-11T02:27:27.066Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 85, "fields": {"action_time": "2025-09-11T02:28:26.640Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 86, "fields": {"action_time": "2025-09-11T02:28:46.165Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 87, "fields": {"action_time": "2025-09-11T02:29:33.573Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "3", "object_repr": "Operadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\", \"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 88, "fields": {"action_time": "2025-09-11T02:33:40.796Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "2", "object_repr": "Caso de prueba para 'Operadores'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 89, "fields": {"action_time": "2025-09-11T02:36:21.849Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 90, "fields": {"action_time": "2025-09-11T02:36:43.802Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "3", "object_repr": "Caso de prueba para 'Variables y tipos datos'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 91, "fields": {"action_time": "2025-09-11T02:41:09.970Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "3", "object_repr": "Operadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 92, "fields": {"action_time": "2025-09-11T02:58:59.749Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "2", "object_repr": "Caso de prueba para 'Operadores'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\", \"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 93, "fields": {"action_time": "2025-09-11T03:04:40.865Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "2", "object_repr": "Caso de prueba para 'Operadores'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 94, "fields": {"action_time": "2025-09-11T03:11:07.689Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "2", "object_repr": "Caso de prueba para 'Operadores'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 95, "fields": {"action_time": "2025-09-11T03:13:25.855Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "4", "object_repr": "Control de flujo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 96, "fields": {"action_time": "2025-09-11T03:19:46.565Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "4", "object_repr": "Control de flujo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 97, "fields": {"action_time": "2025-09-11T03:24:56.212Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "4", "object_repr": "Control de flujo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 98, "fields": {"action_time": "2025-09-11T03:26:20.986Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "4", "object_repr": "Caso de prueba para 'Control de flujo'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 99, "fields": {"action_time": "2025-09-11T03:32:13.366Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "5", "object_repr": "Funciones y modulos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 100, "fields": {"action_time": "2025-09-11T03:32:44.730Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "5", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 101, "fields": {"action_time": "2025-09-11T03:33:04.357Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "6", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 102, "fields": {"action_time": "2025-09-11T03:33:21.970Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "7", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 103, "fields": {"action_time": "2025-09-11T03:40:10.098Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "5", "object_repr": "Funciones y modulos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 104, "fields": {"action_time": "2025-09-11T03:41:25.363Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "5", "object_repr": "Funciones y modulos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\", \"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 105, "fields": {"action_time": "2025-09-11T12:13:57.693Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "5", "object_repr": "Funciones y modulos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 106, "fields": {"action_time": "2025-09-11T12:25:46.201Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "5", "object_repr": "Funciones y modulos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 107, "fields": {"action_time": "2025-09-11T12:26:10.055Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "5", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 108, "fields": {"action_time": "2025-09-11T12:26:16.185Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "6", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 109, "fields": {"action_time": "2025-09-11T12:26:19.909Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "7", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 110, "fields": {"action_time": "2025-09-11T12:27:43.765Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "5", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 111, "fields": {"action_time": "2025-09-11T12:27:54.205Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "6", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 112, "fields": {"action_time": "2025-09-11T12:27:59.660Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "7", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 113, "fields": {"action_time": "2025-09-11T12:28:38.213Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "8", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 114, "fields": {"action_time": "2025-09-11T12:29:47.386Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "8", "object_repr": "Caso de prueba para 'Funciones y modulos'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 115, "fields": {"action_time": "2025-09-11T12:37:25.317Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "5", "object_repr": "Funciones y modulos", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 116, "fields": {"action_time": "2025-09-11T12:37:37.334Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "6", "object_repr": "Listas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 117, "fields": {"action_time": "2025-09-11T12:40:57.657Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "9", "object_repr": "Caso de prueba para 'Listas'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 118, "fields": {"action_time": "2025-09-11T13:13:31.143Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "9", "object_repr": "Caso de prueba para 'Listas'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 119, "fields": {"action_time": "2025-09-11T13:24:33.792Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "7", "object_repr": "Tuplas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 120, "fields": {"action_time": "2025-09-11T13:25:42.773Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "10", "object_repr": "Caso de prueba para 'Tuplas'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 121, "fields": {"action_time": "2025-09-11T13:27:35.970Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "10", "object_repr": "Caso de prueba para 'Tuplas'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 122, "fields": {"action_time": "2025-09-11T13:48:02.327Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "8", "object_repr": "Diccionarios", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 123, "fields": {"action_time": "2025-09-11T13:50:04.638Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "11", "object_repr": "Caso de prueba para 'Diccionarios'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 124, "fields": {"action_time": "2025-09-11T13:51:37.382Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "11", "object_repr": "Caso de prueba para 'Diccionarios'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 125, "fields": {"action_time": "2025-09-11T13:52:23.064Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "11", "object_repr": "Caso de prueba para 'Diccionarios'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 126, "fields": {"action_time": "2025-09-11T13:55:48.024Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "9", "object_repr": "Conjuntos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 127, "fields": {"action_time": "2025-09-11T13:56:24.868Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "12", "object_repr": "Caso de prueba para 'Conjuntos'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 128, "fields": {"action_time": "2025-09-11T13:57:04.254Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "12", "object_repr": "Caso de prueba para 'Conjuntos'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 129, "fields": {"action_time": "2025-09-11T13:57:47.977Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "12", "object_repr": "Caso de prueba para 'Conjuntos'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 130, "fields": {"action_time": "2025-09-11T13:58:28.370Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "12", "object_repr": "Caso de prueba para 'Conjuntos'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 131, "fields": {"action_time": "2025-09-11T14:11:32.857Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "10", "object_repr": "Clases y objetos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 132, "fields": {"action_time": "2025-09-11T14:12:22.713Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "13", "object_repr": "Caso de prueba para 'Clases y objetos'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 133, "fields": {"action_time": "2025-09-11T14:17:14.855Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "11", "object_repr": "Herencia", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 134, "fields": {"action_time": "2025-09-11T14:17:52.148Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "14", "object_repr": "Caso de prueba para 'Herencia'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 135, "fields": {"action_time": "2025-09-11T14:22:17.935Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "12", "object_repr": "Polimorfismo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 136, "fields": {"action_time": "2025-09-11T14:22:44.612Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "15", "object_repr": "Caso de prueba para 'Polimorfismo'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 137, "fields": {"action_time": "2025-09-11T14:23:04.484Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "16", "object_repr": "Caso de prueba para 'Polimorfismo'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 138, "fields": {"action_time": "2025-09-11T14:23:25.940Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "17", "object_repr": "Caso de prueba para 'Polimorfismo'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 139, "fields": {"action_time": "2025-09-11T14:25:22.732Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "16", "object_repr": "Caso de prueba para 'Polimorfismo'", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 140, "fields": {"action_time": "2025-09-11T14:25:26.727Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "17", "object_repr": "Caso de prueba para 'Polimorfismo'", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 141, "fields": {"action_time": "2025-09-11T14:25:45.273Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "15", "object_repr": "Caso de prueba para 'Polimorfismo'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 142, "fields": {"action_time": "2025-09-11T14:26:27.561Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "15", "object_repr": "Caso de prueba para 'Polimorfismo'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 143, "fields": {"action_time": "2025-09-12T14:12:52.304Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "13", "object_repr": "Encapsulamiento y abstraccion", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 144, "fields": {"action_time": "2025-09-12T14:13:28.949Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "18", "object_repr": "Caso de prueba para 'Encapsulamiento y abstraccion'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 145, "fields": {"action_time": "2025-09-12T14:13:46.114Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "19", "object_repr": "Caso de prueba para 'Encapsulamiento y abstraccion'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 146, "fields": {"action_time": "2025-09-12T14:15:14.204Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "18", "object_repr": "Caso de prueba para 'Encapsulamiento y abstraccion'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 147, "fields": {"action_time": "2025-09-12T14:15:18.760Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "19", "object_repr": "Caso de prueba para 'Encapsulamiento y abstraccion'", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 148, "fields": {"action_time": "2025-09-12T14:15:22.338Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "18", "object_repr": "Caso de prueba para 'Encapsulamiento y abstraccion'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 149, "fields": {"action_time": "2025-09-12T14:19:33.353Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "14", "object_repr": "Manejo de excepciones", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 150, "fields": {"action_time": "2025-09-12T14:20:05.816Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "20", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 151, "fields": {"action_time": "2025-09-12T14:20:30.662Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "21", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 152, "fields": {"action_time": "2025-09-12T14:20:48.632Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "22", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 153, "fields": {"action_time": "2025-09-12T14:32:16.096Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "14", "object_repr": "Manejo de excepciones", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 154, "fields": {"action_time": "2025-09-12T14:34:14.463Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "20", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 155, "fields": {"action_time": "2025-09-12T14:34:24.489Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "21", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 156, "fields": {"action_time": "2025-09-12T14:44:16.690Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "20", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 157, "fields": {"action_time": "2025-09-12T14:44:21.542Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "21", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 158, "fields": {"action_time": "2025-09-12T14:44:25.688Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "22", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 159, "fields": {"action_time": "2025-09-12T14:45:25.702Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "22", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 160, "fields": {"action_time": "2025-09-12T14:45:30.533Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "20", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 161, "fields": {"action_time": "2025-09-12T14:45:46.310Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "21", "object_repr": "Caso de prueba para 'Manejo de excepciones'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 162, "fields": {"action_time": "2025-09-12T14:52:01.594Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "15", "object_repr": "Manipulacion de archivos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 163, "fields": {"action_time": "2025-09-12T14:52:40.227Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "23", "object_repr": "Caso de prueba para 'Manipulacion de archivos'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 164, "fields": {"action_time": "2025-09-12T14:58:50.995Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "16", "object_repr": "Comprension y lambdas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 165, "fields": {"action_time": "2025-09-12T14:59:50.034Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "24", "object_repr": "Caso de prueba para 'Comprension y lambdas'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 166, "fields": {"action_time": "2025-09-12T15:00:48.175Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "24", "object_repr": "Caso de prueba para 'Comprension y lambdas'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 167, "fields": {"action_time": "2025-09-12T15:01:40.927Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "24", "object_repr": "Caso de prueba para 'Comprension y lambdas'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\", \"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 168, "fields": {"action_time": "2025-09-12T15:05:48.755Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "17", "object_repr": "Programacion asincronica", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 169, "fields": {"action_time": "2025-09-12T15:06:11.629Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "25", "object_repr": "Caso de prueba para 'Programacion asincronica'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 170, "fields": {"action_time": "2025-09-12T15:08:34.979Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "25", "object_repr": "Caso de prueba para 'Programacion asincronica'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 171, "fields": {"action_time": "2025-09-12T15:12:07.486Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "18", "object_repr": "Decoradores y generadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 172, "fields": {"action_time": "2025-09-12T15:12:36.271Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "26", "object_repr": "Caso de prueba para 'Decoradores y generadores'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 173, "fields": {"action_time": "2025-09-12T15:18:41.408Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "19", "object_repr": "Modulos esenciales", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 174, "fields": {"action_time": "2025-09-12T15:19:06.040Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "27", "object_repr": "Caso de prueba para 'Modulos esenciales'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 175, "fields": {"action_time": "2025-09-12T15:21:04.616Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "27", "object_repr": "Caso de prueba para 'Modulos esenciales'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 176, "fields": {"action_time": "2025-09-12T15:21:48.811Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "27", "object_repr": "Caso de prueba para 'Modulos esenciales'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 177, "fields": {"action_time": "2025-09-12T15:22:39.065Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "27", "object_repr": "Caso de prueba para 'Modulos esenciales'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 178, "fields": {"action_time": "2025-09-12T15:23:29.102Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "27", "object_repr": "Caso de prueba para 'Modulos esenciales'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 179, "fields": {"action_time": "2025-09-12T15:24:38.836Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "27", "object_repr": "Caso de prueba para 'Modulos esenciales'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 180, "fields": {"action_time": "2025-09-12T15:27:15.827Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "20", "object_repr": "Expresiones regulares", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 181, "fields": {"action_time": "2025-09-12T15:27:51.342Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "28", "object_repr": "Caso de prueba para 'Expresiones regulares'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 182, "fields": {"action_time": "2025-09-12T15:29:46.585Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "28", "object_repr": "Caso de prueba para 'Expresiones regulares'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\", \"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 183, "fields": {"action_time": "2025-09-12T15:34:27.051Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "21", "object_repr": "Logging y debugging", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 184, "fields": {"action_time": "2025-09-12T15:35:09.593Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "29", "object_repr": "Caso de prueba para 'Logging y debugging'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 185, "fields": {"action_time": "2025-09-12T15:35:40.992Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "29", "object_repr": "Caso de prueba para 'Logging y debugging'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\", \"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 186, "fields": {"action_time": "2025-09-12T15:36:33.652Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "29", "object_repr": "Caso de prueba para 'Logging y debugging'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 187, "fields": {"action_time": "2025-09-12T15:49:40.320Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "22", "object_repr": "Introduccion a pandas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 188, "fields": {"action_time": "2025-09-12T15:50:21.391Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "30", "object_repr": "Caso de prueba para 'Introduccion a pandas'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 189, "fields": {"action_time": "2025-09-12T15:51:53.433Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "22", "object_repr": "Introduccion a pandas", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 190, "fields": {"action_time": "2025-09-12T15:52:37.465Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "30", "object_repr": "Caso de prueba para 'Introduccion a pandas'", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 191, "fields": {"action_time": "2025-09-12T16:00:37.932Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "30", "object_repr": "Caso de prueba para 'Introduccion a pandas'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\", \"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 192, "fields": {"action_time": "2025-09-12T16:01:35.879Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "30", "object_repr": "Caso de prueba para 'Introduccion a pandas'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 193, "fields": {"action_time": "2025-09-12T16:05:16.391Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "23", "object_repr": "Numpy y matplotlib", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 194, "fields": {"action_time": "2025-09-12T16:06:33.810Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "31", "object_repr": "Caso de prueba para 'Numpy y matplotlib'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 195, "fields": {"action_time": "2025-09-12T16:08:13.233Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "23", "object_repr": "Numpy y matplotlib", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 196, "fields": {"action_time": "2025-09-12T16:09:58.346Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "31", "object_repr": "Caso de prueba para 'Numpy y matplotlib'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 197, "fields": {"action_time": "2025-09-12T16:12:36.449Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "23", "object_repr": "Numpy y matplotlib", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 198, "fields": {"action_time": "2025-09-12T16:13:29.501Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "24", "object_repr": "Web dev con flask y requests", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 199, "fields": {"action_time": "2025-09-12T16:13:51.726Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "32", "object_repr": "Caso de prueba para 'Web dev con flask y requests'", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 200, "fields": {"action_time": "2025-09-12T16:14:33.321Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "32", "object_repr": "Caso de prueba para 'Web dev con flask y requests'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 201, "fields": {"action_time": "2025-09-12T16:15:28.740Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "32", "object_repr": "Caso de prueba para 'Web dev con flask y requests'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 202, "fields": {"action_time": "2025-09-12T16:16:00.845Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "32", "object_repr": "Caso de prueba para 'Web dev con flask y requests'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Expresion a evaluar\"]}}]"}}, {"model": "admin.logentry", "pk": 203, "fields": {"action_time": "2025-09-12T16:22:48.910Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 204, "fields": {"action_time": "2025-09-12T16:28:03.011Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 205, "fields": {"action_time": "2025-09-12T16:28:45.334Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 206, "fields": {"action_time": "2025-09-12T16:29:08.794Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 207, "fields": {"action_time": "2025-09-12T16:29:28.794Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 208, "fields": {"action_time": "2025-09-12T16:29:54.057Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 209, "fields": {"action_time": "2025-09-12T16:30:32.225Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 210, "fields": {"action_time": "2025-09-12T16:31:21.544Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 211, "fields": {"action_time": "2025-09-12T16:31:39.584Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 212, "fields": {"action_time": "2025-09-12T16:31:53.794Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 213, "fields": {"action_time": "2025-09-12T16:32:51.869Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 214, "fields": {"action_time": "2025-09-12T16:33:50.347Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "3", "object_repr": "Operadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 215, "fields": {"action_time": "2025-09-12T16:34:43.844Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "4", "object_repr": "Control de flujo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 216, "fields": {"action_time": "2025-09-12T16:35:02.561Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "5", "object_repr": "Funciones y modulos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 217, "fields": {"action_time": "2025-09-12T16:35:20.004Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "6", "object_repr": "Listas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 218, "fields": {"action_time": "2025-09-12T16:35:37.459Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "7", "object_repr": "Tuplas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 219, "fields": {"action_time": "2025-09-12T16:35:57.601Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "8", "object_repr": "Diccionarios", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 220, "fields": {"action_time": "2025-09-12T16:36:12.868Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "9", "object_repr": "Conjuntos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 221, "fields": {"action_time": "2025-09-12T16:36:33.408Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "10", "object_repr": "Clases y objetos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 222, "fields": {"action_time": "2025-09-12T16:37:00.246Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "11", "object_repr": "Herencia", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 223, "fields": {"action_time": "2025-09-12T16:37:06.712Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "11", "object_repr": "Herencia", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 224, "fields": {"action_time": "2025-09-12T16:37:19.702Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "12", "object_repr": "Polimorfismo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 225, "fields": {"action_time": "2025-09-12T16:38:34.389Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "13", "object_repr": "Encapsulamiento y abstraccion", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 226, "fields": {"action_time": "2025-09-12T16:38:56.035Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "14", "object_repr": "Manejo de excepciones", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 227, "fields": {"action_time": "2025-09-12T16:39:11.997Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "15", "object_repr": "Manipulacion de archivos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 228, "fields": {"action_time": "2025-09-12T16:39:30.004Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "16", "object_repr": "Comprension y lambdas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 229, "fields": {"action_time": "2025-09-12T16:39:41.737Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "17", "object_repr": "Programacion asincronica", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 230, "fields": {"action_time": "2025-09-12T16:39:58.370Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "18", "object_repr": "Decoradores y generadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 231, "fields": {"action_time": "2025-09-12T16:40:03.695Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "17", "object_repr": "Programacion asincronica", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 232, "fields": {"action_time": "2025-09-12T16:40:14.912Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "19", "object_repr": "Modulos esenciales", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 233, "fields": {"action_time": "2025-09-12T16:40:28.164Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "20", "object_repr": "Expresiones regulares", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 234, "fields": {"action_time": "2025-09-12T16:40:51.727Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "21", "object_repr": "Logging y debugging", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 235, "fields": {"action_time": "2025-09-12T16:41:05.184Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "22", "object_repr": "Introduccion a pandas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 236, "fields": {"action_time": "2025-09-12T16:41:24.342Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "23", "object_repr": "Numpy y matplotlib", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 237, "fields": {"action_time": "2025-09-12T16:41:37.337Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "24", "object_repr": "Web dev con flask y requests", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 238, "fields": {"action_time": "2025-09-12T16:41:54.797Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "24", "object_repr": "Web dev con flask y requests", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 239, "fields": {"action_time": "2025-09-21T16:23:23.249Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "4", "object_repr": "Control de flujo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 240, "fields": {"action_time": "2025-09-21T16:24:14.349Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialtoken"], "object_id": "4", "object_repr": "Caso de prueba para 'Control de flujo'", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Resultado esperado\"]}}]"}}, {"model": "admin.logentry", "pk": 241, "fields": {"action_time": "2025-09-21T23:33:26.505Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialapp"], "object_id": "3", "object_repr": "andres", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 242, "fields": {"action_time": "2025-09-21T23:33:34.397Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialapp"], "object_id": "4", "object_repr": "Andres", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 243, "fields": {"action_time": "2025-09-21T23:33:34.397Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialapp"], "object_id": "2", "object_repr": "carlos_andres", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 244, "fields": {"action_time": "2025-09-21T23:34:34.299Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialaccount"], "object_id": "2", "object_repr": "https://pixelogic-sin-fronteras.onrender.com", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 245, "fields": {"action_time": "2025-09-21T23:34:48.600Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialaccount"], "object_id": "2", "object_repr": "https://pixelogic-sin-fronteras.onrender.com", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 246, "fields": {"action_time": "2025-09-21T23:35:31.334Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialaccount"], "object_id": "2", "object_repr": "https://pixelogic-sin-fronteras.onrender.com", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 247, "fields": {"action_time": "2025-09-23T14:22:05.808Z", "user": ["Carlos"], "content_type": ["socialaccount", "socialaccount"], "object_id": "1", "object_repr": "pixelogic-sin-fronteras.onrender.com", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Domain name\", \"Display name\"]}}]"}}, {"model": "admin.logentry", "pk": 248, "fields": {"action_time": "2025-09-27T14:19:19.437Z", "user": ["Carlos"], "content_type": ["cursos", "curso"], "object_id": "1", "object_repr": "Python Sin Fronteras", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Logo\"]}}]"}}, {"model": "admin.logentry", "pk": 249, "fields": {"action_time": "2025-09-27T14:20:00.949Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "4", "object_repr": "Python 3.13", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Imagen\"]}}]"}}, {"model": "admin.logentry", "pk": 250, "fields": {"action_time": "2025-09-27T14:20:31.675Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "4", "object_repr": "Python 3.13", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Descripcion\"]}}]"}}, {"model": "admin.logentry", "pk": 251, "fields": {"action_time": "2025-09-27T14:20:42.943Z", "user": ["Carlos"], "content_type": ["cursos", "herramienta"], "object_id": "2", "object_repr": "Descargar Visula Studio Code", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Imagen\"]}}]"}}, {"model": "admin.logentry", "pk": 252, "fields": {"action_time": "2025-09-27T14:22:28.070Z", "user": ["Carlos"], "content_type": ["cursos", "juego"], "object_id": "1", "object_repr": "juego de pizaz", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Descripcion\", \"Imagen\"]}}]"}}, {"model": "admin.logentry", "pk": 253, "fields": {"action_time": "2025-09-27T14:22:36.193Z", "user": ["Carlos"], "content_type": ["cursos", "juego"], "object_id": "1", "object_repr": "juego de pizaz", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Descripcion\"]}}]"}}, {"model": "admin.logentry", "pk": 254, "fields": {"action_time": "2025-09-27T16:41:51.745Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 255, "fields": {"action_time": "2025-09-27T16:42:41.042Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 256, "fields": {"action_time": "2025-09-27T16:42:53.174Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "3", "object_repr": "Operadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 257, "fields": {"action_time": "2025-09-27T16:43:07.703Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "4", "object_repr": "Control de flujo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 258, "fields": {"action_time": "2025-09-27T16:43:20.213Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "5", "object_repr": "Funciones y modulos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 259, "fields": {"action_time": "2025-09-27T16:43:37.574Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "6", "object_repr": "Listas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 260, "fields": {"action_time": "2025-09-27T16:43:49.861Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "7", "object_repr": "Tuplas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 261, "fields": {"action_time": "2025-09-27T16:48:20.427Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "6", "object_repr": "Listas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 262, "fields": {"action_time": "2025-09-27T16:48:36.526Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "7", "object_repr": "Tuplas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 263, "fields": {"action_time": "2025-09-27T16:48:54.838Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "8", "object_repr": "Diccionarios", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 264, "fields": {"action_time": "2025-09-27T16:49:14.384Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "9", "object_repr": "Conjuntos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 265, "fields": {"action_time": "2025-09-27T16:54:17.229Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "10", "object_repr": "Clases y objetos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 266, "fields": {"action_time": "2025-09-27T16:54:32.320Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "11", "object_repr": "Herencia", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 267, "fields": {"action_time": "2025-09-27T16:54:47.493Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "12", "object_repr": "Polimorfismo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 268, "fields": {"action_time": "2025-09-27T16:54:59.344Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "13", "object_repr": "Encapsulamiento y abstraccion", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 269, "fields": {"action_time": "2025-09-27T16:55:15.377Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "14", "object_repr": "Manejo de excepciones", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 270, "fields": {"action_time": "2025-09-27T16:55:29.459Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "15", "object_repr": "Manipulacion de archivos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 271, "fields": {"action_time": "2025-09-27T16:55:42.894Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "16", "object_repr": "Comprension y lambdas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 272, "fields": {"action_time": "2025-09-27T16:55:55.868Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "17", "object_repr": "Programacion asincronica", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 273, "fields": {"action_time": "2025-09-27T16:56:06.917Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "18", "object_repr": "Decoradores y generadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 274, "fields": {"action_time": "2025-09-27T16:56:20.209Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "19", "object_repr": "Modulos esenciales", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 275, "fields": {"action_time": "2025-09-27T16:56:38.810Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "20", "object_repr": "Expresiones regulares", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 276, "fields": {"action_time": "2025-09-27T16:56:55.520Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "21", "object_repr": "Logging y debugging", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 277, "fields": {"action_time": "2025-09-27T16:57:07.812Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "22", "object_repr": "Introduccion a pandas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 278, "fields": {"action_time": "2025-09-27T16:57:22.788Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "23", "object_repr": "Numpy y matplotlib", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 279, "fields": {"action_time": "2025-09-27T16:57:34.321Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "24", "object_repr": "Web dev con flask y requests", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Contenido html\"]}}]"}}, {"model": "admin.logentry", "pk": 280, "fields": {"action_time": "2025-09-27T17:15:04.796Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "1", "object_repr": "Intro entorno", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 281, "fields": {"action_time": "2025-09-27T17:16:20.294Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "2", "object_repr": "Variables y tipos datos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 282, "fields": {"action_time": "2025-09-27T17:16:49.239Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "3", "object_repr": "Operadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 283, "fields": {"action_time": "2025-09-27T17:17:30.955Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "4", "object_repr": "Control de flujo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 284, "fields": {"action_time": "2025-09-27T17:18:00.764Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "5", "object_repr": "Funciones y modulos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 285, "fields": {"action_time": "2025-09-27T17:18:47.204Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "6", "object_repr": "Listas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 286, "fields": {"action_time": "2025-09-27T17:20:48.617Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "7", "object_repr": "Tuplas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 287, "fields": {"action_time": "2025-09-27T17:21:10.013Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "8", "object_repr": "Diccionarios", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 288, "fields": {"action_time": "2025-09-27T17:21:40.808Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "9", "object_repr": "Conjuntos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 289, "fields": {"action_time": "2025-09-27T17:22:39.662Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "10", "object_repr": "Clases y objetos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 290, "fields": {"action_time": "2025-09-27T17:23:10.993Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "11", "object_repr": "Herencia", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 291, "fields": {"action_time": "2025-09-27T17:23:35.472Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "12", "object_repr": "Polimorfismo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 292, "fields": {"action_time": "2025-09-27T17:23:53.623Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "13", "object_repr": "Encapsulamiento y abstraccion", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 293, "fields": {"action_time": "2025-09-27T17:24:36.641Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "14", "object_repr": "Manejo de excepciones", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 294, "fields": {"action_time": "2025-09-27T17:25:00.423Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "15", "object_repr": "Manipulacion de archivos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 295, "fields": {"action_time": "2025-09-27T17:25:27.627Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "16", "object_repr": "Comprension y lambdas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 296, "fields": {"action_time": "2025-09-27T17:25:51.250Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "17", "object_repr": "Programacion asincronica", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 297, "fields": {"action_time": "2025-09-27T17:26:14.220Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "18", "object_repr": "Decoradores y generadores", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 298, "fields": {"action_time": "2025-09-27T17:26:43.022Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "19", "object_repr": "Modulos esenciales", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 299, "fields": {"action_time": "2025-09-27T17:26:57.786Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "19", "object_repr": "Modulos esenciales", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 300, "fields": {"action_time": "2025-09-27T17:27:41.527Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "19", "object_repr": "Modulos esenciales", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 301, "fields": {"action_time": "2025-09-27T17:28:09.835Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "20", "object_repr": "Expresiones regulares", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 302, "fields": {"action_time": "2025-09-27T17:28:38.087Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "21", "object_repr": "Logging y debugging", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 303, "fields": {"action_time": "2025-09-27T17:29:00.759Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "22", "object_repr": "Introduccion a pandas", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 304, "fields": {"action_time": "2025-09-27T17:29:24.686Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "23", "object_repr": "Numpy y matplotlib", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 305, "fields": {"action_time": "2025-09-27T17:29:45.357Z", "user": ["Carlos"], "content_type": ["cursos", "leccion"], "object_id": "24", "object_repr": "Web dev con flask y requests", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Instrucciones ejercicio\"]}}]"}}, {"model": "admin.logentry", "pk": 306, "fields": {"action_time": "2025-09-27T17:30:38.169Z", "user": ["Carlos"], "content_type": ["cursos", "modulo"], "object_id": "1", "object_repr": "Módulo 1: Fundamentos de Python", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Titulo\", \"Descripcion\"]}}]"}}, {"model": "admin.logentry", "pk": 307, "fields": {"action_time": "2025-09-27T17:31:18.002Z", "user": ["Carlos"], "content_type": ["cursos", "modulo"], "object_id": "2", "object_repr": "Módulo 2: Estructuras de Datos en Profundidad", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Titulo\", \"Descripcion\"]}}]"}}, {"model": "admin.logentry", "pk": 308, "fields": {"action_time": "2025-09-27T17:33:10.799Z", "user": ["Carlos"], "content_type": ["cursos", "modulo"], "object_id": "3", "object_repr": "Módulo 3: Programación Orientada a Objetos (POO)", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Titulo\", \"Descripcion\"]}}]"}}, {"model": "admin.logentry", "pk": 309, "fields": {"action_time": "2025-09-27T17:33:47.902Z", "user": ["Carlos"], "content_type": ["cursos", "modulo"], "object_id": "4", "object_repr": "Módulo 4: Manejo de Errores y Archivos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Titulo\", \"Descripcion\"]}}]"}}, {"model": "admin.logentry", "pk": 310, "fields": {"action_time": "2025-09-27T17:34:31.924Z", "user": ["Carlos"], "content_type": ["cursos", "modulo"], "object_id": "5", "object_repr": "Módulo 5: Temas Avanzados de Python", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Titulo\", \"Descripcion\"]}}]"}}, {"model": "admin.logentry", "pk": 311, "fields": {"action_time": "2025-09-27T17:35:28.275Z", "user": ["Carlos"], "content_type": ["cursos", "modulo"], "object_id": "6", "object_repr": "Módulo 6: La Librería Estándar y Expresiones Regulares", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Titulo\", \"Descripcion\"]}}]"}}, {"model": "admin.logentry", "pk": 312, "fields": {"action_time": "2025-09-27T17:36:21.119Z", "user": ["Carlos"], "content_type": ["cursos", "modulo"], "object_id": "7", "object_repr": "Módulo 7: Ecosistema y Desarrollo Profesional", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Titulo\", \"Descripcion\"]}}]"}}]